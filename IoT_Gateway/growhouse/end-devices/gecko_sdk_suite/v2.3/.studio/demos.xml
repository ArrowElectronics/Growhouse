<?xml version="1.0" encoding="UTF-8"?>
<demos>
  <demo name="efm32lg.dk3650.demo.blink" label="DK3650 blink">
    <property key="blurb" value="Blink example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library
to demonstrate the use of the LED on the EFM32LG-DK3650 development kit.
This example is intended as a skeleton for new projects.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.eeprom" label="DK3650 eeprom">
    <property key="blurb" value="I2C eeprom example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/eeprom/bin/eeprom.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;I2C eeprom example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB including DK BSP
(board support package) and demonstrates the use of the I2C bus
accessing the EEPROM on the DK.

The first 3 bytes of the EEPROM is displayed on the TFT screen (this
will normally be FFFFFF first time.) Since stored in EEPROM, the data
survives resets and power cycles.

The following usage is possible:

- Joystick up/down will increment/decrement the first byte (Byte0) in
  the EEPROM. Byte1 is then set to Byte0+1, and Byte2 is set to Byte1+1.
- Press SW4 button to reset 3 first bytes to 0xFF.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.emode" label="DK3650 emode">
    <property key="blurb" value="Energy Mode 0-4 example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/emode/bin/emode.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Energy Mode 0-4 example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project for the EFM32LG-DK3650 development kit, illustrates the
various energy saving modes of the EFM32LG990F256.

Use joystick Up and Down to select the demo, after pressing the kit AEM 
button to enable the display to be driven from the Leopard Gecko.

When the correct demo has been selected, press PB1 to activate it. 
After this, you need to use the kit's AEM button again to go back to the
energy mesaurement display. A new press on the AEM button will not bring
back the original screen, as the Leopard Gecko will be in a sleep mode. You
need to restart to test another demo.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.fatcon" label="DK3650 fatcon">
    <property key="blurb" value="FAT File System console example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/fatcon/bin/fatcon.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;FAT File System console example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library
to demonstrate SPI-access to the Micro-SD card on the EFM32LG-DK3650
development kit. The application gives a small &quot;console&quot; on the serial
port which can be used to view and list contents of the file system.
Serial configuration 115200-8-N-1 is used.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.freertos_blink" label="DK3650 freertos_blink">
    <property key="blurb" value="FreeRTOS - Blink example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/freertos_blink/bin/freertos_blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;FreeRTOS - Blink example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board. 
It also shows how to use idle with different energy saving modes with or without ticless mode( from EM1 to EM3 - configured in FreeRTOSConfig.h file).
This example is intended as a skeleton for new projects using FreeRTOS.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.graphxy" label="DK3650 graphxy">
    <property key="blurb" value="emWin example - XY Graph demonstration."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/graphxy/bin/graphxy.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;emWin example - XY Graph demonstration.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the emWin library.

Control using touch panel or joystick.
On application startup there is possibility to
perform touch panel calibration.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.graphxy_mm" label="DK3650 graphxy_mm">
    <property key="blurb" value="emWin example - XY Graph demonstration - energy efficient."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/graphxy_mm/bin/graphxy_mm.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;emWin example - XY Graph demonstration - energy efficient.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the emWin library maintaining
low power consumption.

TFT driver is controlled in so called &quot;Memory Map&quot;
configuration, where internal RAM of TFT controller 
is used. There is no additional framebuffer needed
so this example could be run in small RAM footprint 
systems. The code fits 128kB flash and uses less 
than 32kB RAM.

In idle mode (where no user interaction is required)
EM2 mode is enabled, allowing reducing power consuption
down to ~4uA.

Control using touch panel or joystick.
On application startup there is possibility to
perform touch panel calibration.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.guidemo" label="DK3650 guidemo">
    <property key="blurb" value="emWin example - show gui functionality"/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/guidemo/bin/guidemo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;emWin example - show gui functionality&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the emWin library.

Simple application showing different visual effects
which could be achieved by means of emWin

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.guidemo_mm" label="DK3650 guidemo_mm">
    <property key="blurb" value="emWin example - show gui functionality - energy efficient."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/guidemo_mm/bin/guidemo_mm.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;emWin example - show gui functionality - energy efficient.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the emWin library maintaining
low power consumption.

TFT driver is controlled in so called &quot;Memory Map&quot;
configuration, where internal RAM of TFT controller 
is used. There is no additional framebuffer needed 
so this example could be run in small RAM footprint 
systems.

Simple application showing different visual effects
which could be achieved by means of emWin.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.hardfault" label="DK3650 hardfault">
    <property key="blurb" value="Hardfault handler example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/hardfault/bin/hardfault.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Hardfault handler example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project demonstrates the use of the hard fault handler, and
how to install and use another HardFault exception handler to provide
useful information when these types of errors occurs.
The information is transmitted on the kit UART port, serial configuration
115200-8-N-1 is used.

Three function calls for triggering software errors to be trapped is
provided, comment them in and out to select between them.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.inttemp" label="DK3650 inttemp">
    <property key="blurb" value="Internal temperature sensor example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/inttemp/bin/inttemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB including DK BSP
(board support package) and demonstrates the use of the internal
temperature sensor and ADC on the EFM32.

Note: EFM32 devices with production ID lower than 18 may measure inaccurate
temperatures due to a sensor calibration bug.

The following configuration is possible:

- Joystick push toggles between Fahrenheit and Celsius display mode.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.joystick" label="DK3650 joystick">
    <property key="blurb" value="Kit joystick control example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/joystick/bin/joystick.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Kit joystick control example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library to
demonstrate the joystick control API of the development kit. Please note that
you need to configure the AEM-state to &quot;EFM&quot; to be able to operate this
example. The example also shows how to enable and use a GPIO interrupt.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.leuart" label="DK3650 leuart">
    <property key="blurb" value="LEUART/DMA in Energy mode2 output example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/leuart/bin/leuart.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project reads and sends the data back to terminal using LEUART
while staying in EM2.

It uses the EFM32 CMSIS and EMLIB, to demonstrate the
use of LEUART communication using DMA under the EM2 on the 
EFM32LG_DK3650 development kit.

The LEUART is configured to be used with DMA under EM2.
The terminal configuration is 9600-8-N-1.
The DMA is configured to handle read and write data bytes from LEUART under EM2.

Testing:
1. Use the LEUART serial port header to connect the LEUART to your PC.
2. Configure terminal to 9600-8-N-1.
3. Enter characters from your keyboard and see if you receive the echo on the terminal.
4. Check the average current consumption is equal to EM2 on Energy Profiler.

Board:  Silicon Labs EFM32LG_DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.life" label="DK3650 life">
    <property key="blurb" value="Conway's game of life, TFT direct drive example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/life/bin/life.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Conway's game of life, TFT direct drive example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrate driving the EFM32GG_DK37850 kit's TFT-display 
from the EFM32 Leopard Gecko.

This example is driving the display in &quot;direct drive&quot; (or mode generic in 
SSD2119 terms). Using this mode, the framebuffer resides in the external
PSRAM memory of the development kit. This can be accessed directly to 
modify the screen contents.

This demo demonstrates the use of frame buffer control, and implements
Conway's Game of Life, with triple buffering support. Triple buffering
works the following way
  
 We have 3 frame buffers, A, B and C.

 Buffer A, is currently being displayed on the screen
 Buffer B, is being updated with graphics

 When B is finished - B is set to be displayed on the next frame update
                      C is set to be updated with new graphics

 When C is finished - C is set to be displayed on the next frame update 
                      A is set to be updated with new graphics

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.lines" label="DK3650 lines">
    <property key="blurb" value="Lines TFT Direct Drive example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/lines/bin/lines.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Lines TFT Direct Drive example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrate driving the EFM32GG_DK37850 kit's TFT-display
from the EFM32 Leopard Gecko in &quot;direct drive&quot; (or mode generic in
SSD2119 terms). Using this mode, the framebuffer resides in the external
PSRAM memory of the development kit. This can be accessed directly to
modify the screen contents.

In this mode, the display is configured for having 16-bits per pixel,
RGB with 5-6-5 bits color components of each. The framebuffer is located
at EBI bank 2, offset address 0x88000000. This demo simply draws some
alternating, coloured lines over the entire display.

WARNING:
SD2119 driver and GLIB graphics library are not intended for production 
purposes, and are included here to illustrate TFT display driving only.

These components are subject to changes in API/usage and there will be 
no effort to keep compatibility, or to support this software in any way.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.mandel" label="DK3650 mandel">
    <property key="blurb" value="Mandelbrot image zoom example, using TFT direct drive."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/mandel/bin/mandel.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Mandelbrot image zoom example, using TFT direct drive.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrate driving the EFM32GG_DK37850 kit's TFT-display 
from the EFM32 Leopard Gecko.

The example is driving the display in &quot;direct drive&quot; (or mode generic in 
SSD2119 terms). Using this mode, the framebuffer resides in the external
PSRAM memory of the development kit. This can be accessed directly to 
modify the screen contents.

This example makes a simple mandelbrot fractal zoomer, using up most 
of the external 4MB PSRAM to store the various images, where the screens
are being flipped around in the interrupt routine.

WARNING:
SD2119 driver and GLIB graphics library are not intended for production 
purposes, and are included here to illustrate TFT display driving only.
These components are subject to changes in API/usage and there will be 
no effort to keep compatibility, or to support this software in any way.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.norflash" label="DK3650 norflash">
    <property key="blurb" value="Norflash example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/norflash/bin/norflash.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Norflash example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrates use of the NORFLASH driver.

Connect a terminal to the serialport of the DK (115200-N-8-1).
Operations on the flash are initiated by issuing commands on the terminal.
Command &quot;h&quot; will print a help screen on the terminal :

    Available commands:
        fi        : Show flash information
        h         : Show this help
        dump n    : Show first 16 bytes of sector n
        dumps n   : Show entire sector n content
        blc n     : Blankcheck sector n
        bld       : Blankcheck entire device
        erase n   : Erase sector n
        eraseall  : Erase entire device
        prog n    : Program first 16 bytes of sector n with byte pattern
        exec n    : Execute &quot;blink&quot; from sector n
        misc      : Test misc. NORFLASH API functions
        rspeed    : Measure flash read speed

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.peripherals" label="DK3650 peripherals">
    <property key="blurb" value="Peripheral control example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/peripherals/bin/peripherals.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Peripheral control example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library to
demonstrate how to enable the access to various on-board peripherals. To
reduce leakage current, the EFM32LG-DK3650 board has several analog switches, and to
enable extended functionality there are multiplexers which need to be
configured correctly for most of the kit peripherals.

The on-board LEDs will light up according to the configured state of the
peripherals.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.powertest" label="DK3650 powertest">
    <property key="blurb" value="Power test example, running demonstration of energy modes."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/powertest/bin/powertest.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library
to demonstrate the use of the various Energy Modes available on the
EFM32LG990F256. When running this example, the Energy Profiler tool
in Simplicity Studio can be used to show the power consumption of each
energy mode.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.preamp" label="DK3650 preamp">
    <property key="blurb" value="Pre-amplifier example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/preamp/bin/preamp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Pre-amplifier example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including DK BSP (board 
support package) and demonstrates the use of the ADC/DAC/DMA/PRS/TIMER
to implement a very simple pre-amplifier.

- Connect an audio source to the audio in connector
  on the DVK, for instance an MP3 player.
- Connect an active loudspeaker with built-in amplifier
  to the audio out connector on the DVK.

WARNING:
--------
Do not attach or use headphones with this example. Use small
loadspeakers with built in amplification, ensuring volume is at an
acceptable level. Exposure to loud noises from any source for extended
periods of time may temporarily or permanently affect your hearing. The
louder the volume sound level, the less time is required before your
hearing could be affected. Hearing damage from loud noise is sometimes
undetectable at first and can have a cumulative effect.


The input signal is converted to digital and level
adjusted by the EFM32 core before being converted back
to analog.

The output volume level is adjusted with kit pushbuttons PB1 and PB2.
Output level is indicated by the 14 leftmost user LEDs.

The example will clip the output signal if exceeding predefined
level. This may occur due to too high input signal and/or to high
volume setting. Clipping is indicated by the rightmost user LED.

Push the AEM button on the kit until &quot;EFM&quot; shows in the upper right
corner of the TFT display to activate PB1 and PB2 pushbuttons.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.radialmenu" label="DK3650 radialmenu">
    <property key="blurb" value="emWin example - radial menu demonstartion."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/radialmenu/bin/radialmenu.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;emWin example - radial menu demonstartion.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the emWin library.

Control using touch panel or joystick.
If touch panel misaligned, there is possibility to
perform touch panel calibration, just press PB4.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.realtime" label="DK3650 realtime">
    <property key="blurb" value="Segger emWin example - dynamic graph update."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/realtime/bin/realtime.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Segger emWin example - dynamic graph update.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the emWin library from Segger. emWin 
is an efficient, modular, processor- and LCD controller-independent graphical 
user interface (GUI) library.

In this example, the user can perform touch panel calibration and then
perform touch panel operations to configure the GUI while graphs are 
continuously updated.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.reversi" label="DK3650 reversi">
    <property key="blurb" value="emWin example - reversi game."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/reversi/bin/reversi.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;emWin example - reversi game.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the emWin library.

Control using touch pad or joystick. If there
is misalignment when using touch pad please
do calibration select from menu:
Options-&gt;Touch Panel calibration.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.reversi_mm" label="DK3650 reversi_mm">
    <property key="blurb" value="emWin example - reversi game - energy efficient."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/reversi_mm/bin/reversi_mm.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;emWin example - reversi game - energy efficient.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the emWin library maintaining
low power consumption.

TFT driver is controlled in so called &quot;Memory Map&quot;
configuration, where internal RAM of TFT controller 
is used. There is no additional framebuffer needed
so this example could be run in small RAM footprint 
systems. The code fits 128kB flash and uses less 
than 32kB RAM.

In idle mode (where no user interaction is required)
EM2 mode is enabled, allowing reducing power consumption
down to 4uA.

The game is controlled using touch pad or joystick. 
If there is misalignment when using touch pad please
do calibration - from menu select:
Options-&gt;Touch Panel calibration.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.rs232" label="DK3650 rs232">
    <property key="blurb" value="RS232/UART output example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/rs232/bin/rs232.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;RS232/UART output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB, to demonstrates the
use of UART and LEUART communication on the EFM32LG-DK3650 development kit.

For the default UART communication, serial configuration 115200-8-N-1 is used.
If LEUART mode is configured by defining &quot;RETARGET_LEUART1&quot; as a build option,
terminal configuration is 9600-8-N-1.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.scroller" label="DK3650 scroller">
    <property key="blurb" value="Horizontal single pixel text scroller example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/scroller/bin/scroller.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Horizontal single pixel text scroller example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrate driving the EFM32LG_DK3650 kit's TFT-display
from the EFM32 Leopard Gecko.

This example is driving the display in &quot;direct drive&quot; (or mode generic in
SSD2119 terms). Using this mode, the framebuffer resides in the external
PSRAM memory of the development kit. This can be accessed directly to
modify the screen contents.

This demo demonstrates the use of frame buffer control, and implements
a horizontal scroller and shows the hardware assisted masking and
blending capabilities.

The horizontal scroller is implemented by using a large framebuffer,
which is shifted right one pixel for each horizontal scan line, using
the horizontal sync interrupt, and frame base sync trigger  capability
of the Leopard Gecko devices.

The masking and blending is hardware assisted. The geckos being drawn
on screen are using the same software procedure, only adding mask and
enable configurations.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.slideshow" label="DK3650 slideshow">
    <property key="blurb" value="Slideshow example using microSD."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/slideshow/bin/slideshow.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Slideshow example using microSD.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example uses the FatFS library for accssing a filesystem on a 
microSD card. It will loop through the files present on the card. 
BMP files with a resolution less than the resolution of the screen
(320x240) will be displayed on the TFT.

The demo has two modes of operation. If a file called &quot;files.txt&quot; is 
present on the root of the microSD card, this file will be read. The
BMP files will then be displayed in the order they are listed in the
file.

If this file is not present, all files on the root of tile SD card is 
looped through and displayed. If the BMP decoder cannot display a 
certain file, an error message is displayed.


WARNING:
SD2119 driver and GLIB graphics library are not intended for production 
purposes, and are included here to illustrate TFT display driving only.
This components are subject to changes in API/usage and there will be 
no effort to keep compatibility, or to support this software in any way.

NOTE:
This example is too large to be built with IDEs with 32KB size limits.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.temperature" label="DK3650 temperature">
    <property key="blurb" value="I2C temperature sensor example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/temperature/bin/temperature.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;I2C temperature sensor example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB including DK BSP
(board support package) to demonstrate the use of the I2C bus and 
the temperature sensor on the DK.

Note: On some DK boards the temperature sensor is placed too close 
to components that generate significant heat. The sensor may therefore
read a temperature 2-4 degrees Celsius higher than the ambient temperature.

The following configuration is possible:

- Joystick push toggles between Fahrenheit and Celsius display mode.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.tft" label="DK3650 tft">
    <property key="blurb" value="TFT Addressed map coloured blocks example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/tft/bin/tft.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;TFT Addressed map coloured blocks example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the kit's TFT-display from the EFM32 Leopard Gecko.

This example is driving the display in what is called &quot;address mapped
mode&quot; (or mode 8080). Using this mode, the framebuffer resides in the
memory of the SSD2119 controller chip.

WARNING:
SD2119 driver and GLIB graphics library are not intended for production
purposes, and are included here to illustrate TFT display driving only.

These components are subject to changes in API/usage and there will be
no effort to keep compatibility, or to support this software in any way.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.tftprintf" label="DK3650 tftprintf">
    <property key="blurb" value="Printf output on TFT-LCD."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/tftprintf/bin/tftprintf.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Printf output on TFT-LCD.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the kit's TFT-display from the EFM32 Leopard Gecko. In this case the
display is used as output from a regular printf in the application, as
an alternative to the RS232 port.

This example is driving the display in what is called &quot;address mapped
mode&quot; (or mode 8080). Using this mode, the framebuffer resides in the
memory of the SSD2119 controller chip of the URT TFT-LCD display.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.touch" label="DK3650 touch">
    <property key="blurb" value="Touchscreen example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/touch/bin/touch.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Touchscreen example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrate use of the resistive touchscreen on the
EFM32LG_DK3650 kit's TFT-display.

Touchscreen X and Y positions are obtained using the ADC. Two ADC readouts
are performed, one for X position and one for Y position.

The example allows freehand drawing and calibration. After starting the example
make sure that the EFM32 control the display (use AEM button to toggle).

The calibrations algorithm used is from an article in EETimes 5/31/2002 by
Carlos E. Vidales.

Initial touchscreen calibration is &quot;off&quot; on purpose to demonstrate that
calibration takes effect.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.ucos2_port" label="DK3650 ucos2">
    <property key="blurb" value="uC/OS-II RTOS on EFM32 using example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/ucos2_port/bin/ucos2.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;uC/OS-II RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This is a port of the uC/OS-II RTOS from Micrium Inc, http://www.micrium.com

The port has been adapted by Silicon Labs for use with our Development
Kit. It requires the standard EFM32 CMSIS package (including EMLIB).

The example has three tasks:
 - Task1: LED blink task
 - Task2: Receives characters from serial port and posts message to Task3
 - Task3: Receives message from Task2 and writes it on TFT display

Standard output is redirected to TFT display and standard input is UART1.

uC/OS-II is provided in source form for FREE evaluation, for educational use
or for peaceful research.

If you plan on using uC/OS-II in a commercial product you need to contact
Micrium to properly license its use in your product. We provide ALL the
source code for your convenience and to help you experience uC/OS-II.
The fact that the source is provided does NOT mean that you can use it without
paying a licensing fee.

For commercial use, contact Micrium, http://www.micrium.com for details.

Board:  Silicon Labs EFM32LG_DK3650 Starter Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.usbdcdc" label="DK3650 usbdcdc">
    <property key="blurb" value="USB CDC virtual COM port example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/usbdcdc/bin/usbdcdc.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB CDC virtual COM port example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
and implements an USB CDC based virtual COM port.

UART1 on the DK is used as the physical COM port.
Any data sent to the virtual CDC COM port is transmitted on UART1.
Any data received on UART1 is transmitted to the virtual port.

When connecting the mcu plugin boards USB port to a Windows host PC,
the new hardware &quot;Wizard&quot; may or may not prompt you to provide a driver
installation file (.inf file) depending on your Windows version.

Manually direct Windows to look for drivers in the directory where you have
unpacked your copy of the Silabs-CDC_Install.zip driver file.
This can be done with the new device &quot;Wizard&quot; which might pop up after device
insertion, or you can open &quot;Device Manager&quot;, left click on the new device and
select &quot;Update Driver Software...&quot;.

Some versions of Windows wont allow you to install unsigned drivers. If you
suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.
Win7:
Repeatedly push F8 during boot until the boot menu appears.
Select the &quot;Disable Driver Signature Enforcement&quot; option.
Win10:
Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.
When computer has restarted into the options menu, select:
Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement
You should now be able to install an unsigned driver.

When a driver is succesfully installed, the device will be listed as a &quot;Ports&quot;
device in Device Manager, double-click it, select the &quot;Port Settings&quot; tab and
maybe the &quot;Advanced...&quot; button to set serial port properties.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.usbdcomposite" label="DK3650 usbdcomposite">
    <property key="blurb" value="USB Composite Device example, MSD + CDC + Vendor unique functions."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/usbdcomposite/bin/usbdcomposite.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Composite Device example, MSD + CDC + Vendor unique functions.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
to implement a composite USB device with tree functions:

 - Mass storage class device (MSD) implementing a 4MB disk
 - Communication device class (CDC) implementing a USB to UART bridge
 - Vendor Unique Device similar to the usbdvud example (control DK leds).

As the CDC function has two interface, the CDC function use an Interface
Association Descriptor (IAD). A composite device which use IAD's must be
implemented using bDeviceClass=0xEF, bDeviceSubClass=2 and bDeviceProtocol=1.


The vendor unique function (VUD).
=================================
Toggles user LED's 0-4 when receiving vendor unique class setup commands.
Intended to be used together with the &quot;libusb&quot; device driver, and host
application EFM32-LedApp.exe (a Windows application).
You will find libusb and EFM32-LedApp.exe in the &quot;host&quot; folder of the usbdvud
example. Check EFM32_Vendor_Unique_Device.inf to see how both the usbdvud
example VID_10C4&amp;PID_0001 and this composite example VID_10C4&amp;PID_0008&amp;MI_00
are specified.

The CDC COM port function.
==========================
Implements an USB CDC based virtual COM port. UART1 on the DK is used as the
physical COM port. Any data sent to the virtual CDC COM port is transmitted on
UART1. Any data received on UART1 is transmitted to the virtual port.

USB Mass Storage Device function.
=================================
Implements a Mass Storage Class device (MSD) with 4MByte in external PSRAM.


Windows driver installation.
============================
The first time the composite USB device is connected to the host, Windows must
install drivers for the VUD and CDC functions.

To control the VUD function with EFM32-LedApp.exe you need to install &quot;libusb&quot;
device driver. Manually direct Windows to look for this driver in the &quot;host&quot;
folder of the usbdvud example.
This can be done with the new device &quot;Wizard&quot; which might pop up after device
insertion, or you can open &quot;Device Manager&quot;, left click on one of functions
of the new composite device (marked with yellow exclamation mark) and
select &quot;Update Driver Software...&quot;.
After libusb is installed you can start EFM32-LedApp.exe to control leds on
the DK.

Similarly for the CDC function, direct Windows to look for a driver in the
folder where you have unpacked your copy of the Silabs-CDC_Install.zip driver
file.
This can be done with the new device &quot;Wizard&quot; which might pop up after device
insertion, or you can open &quot;Device Manager&quot;, left click on the new device and
select &quot;Update Driver Software...&quot;. Note how the .inf file specifies interface
number 2, VID_10C4&amp;PID_0008&amp;MI_02.
When the serial port driver is succesfully installed, the device will be listed
as a &quot;Ports&quot; device in Device Manager, double-click it, select the
&quot;Port Settings&quot; tab and maybe the &quot;Advanced...&quot; button to set serial port
properties.

Some versions of Windows wont allow you to install unsigned drivers. If you
suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.
Win7:
Repeatedly push F8 during boot until the boot menu appears.
Select the &quot;Disable Driver Signature Enforcement&quot; option.
Win10:
Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.
When computer has restarted into the options menu, select:
Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement
You should now be able to install an unsigned driver.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.usbdheadphone" label="DK3650 usbdheadphone">
    <property key="blurb" value="USB audio headphone device example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/usbdheadphone/bin/usbdheadphone.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB audio headphone device example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example implements a USB connected headphone device. The device enumerates
as a device supporting stereo 16bit PCM encoded audio at a samplerate of
44.1 kHz (the standard audio CD rate). The samples are sent directly to the I2S
DAC on the mainboard and audio is available on the &quot;AUDIO OUT&quot; jack.

The USB device is modelled as the HT1 (Headphone Topology 1) described in
USB-IF document &quot;Universal Serial Bus Audio Device Class Specification for
Basic Audio Devices&quot;, Release 1.0, November 24th, 2009.

The I2S DAC is fed at a samplerate of 44.118 kHz, so additional audio samples
are occasionally inserted to ensure that the data streams (USB and DAC) stay
synchronized.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.usbdhidkbd" label="DK3650 usbdhidkbd">
    <property key="blurb" value="USB HID keyboard example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/usbdhidkbd/bin/usbdhidkbd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB HID keyboard example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
and implements an USB HID class keyboard device (one button !).

SW1 is the keyboard button. Pressing this button will succesively write
&quot;Silicon Labs - &quot;.

User LED's 0-3 is used as a &quot;heart-beat&quot; counting pattern. The count rate
reflects the scan rate of the onebutton keypad.

User LED 8 reflects hosts NumLock status.
User LED 9 reflects hosts CapsLock status.
User LED 10 reflects hosts ScrollLock status.
User LED 15 reflects the status of the keyboard pushbutton.

It is also possible to make a buspowered device:
 - Enable #define BUSPOWERED in usbconfig.h
 - Program the MCU plugin module, remove it fron the DK.
 - Connect a pushbutton from PORTE bit 0 to GND (optional keyboard button).
 - Connect &quot;USB VREGO&quot; and &quot;VMCU&quot; together.
 - Optionally connect &quot;USB VREGO&quot; and &quot;3.3V&quot; together to enable an activity LED
   (the blue LED labeled &quot;STATUS).
   Note: This will cause the device suspend current to exceed 2.5 mA.

 - NOTE !!! Do NOT insert the plugin module back on the DK with &quot;USB VREGO&quot;,
   &quot;3.3V&quot; and &quot;VMCU&quot; connected together !!!.

This example will output useful info on the DK serial port (115.200 8N1).

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.usbdmicrophone" label="DK3650 usbdmicrophone">
    <property key="blurb" value="USB audio microphone device example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/usbdmicrophone/bin/usbdmicrophone.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB audio microphone device example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example implements a USB connected microphone device. The device enumerates
as a device supporting stereo 16bit PCM encoded audio at a samplerate of
44.1 kHz (the standard audio CD rate). The samples are aquired using the ADC
which is routed to the &quot;AUDIO IN&quot; jack on the mainboard. The example can be
compiled in &quot;tone generator&quot; mode, where the device produce a 1kHz sine.

The USB device is modelled as the MT (Microphone Topology) described in
USB-IF document &quot;Universal Serial Bus Audio Device Class Specification for
Basic Audio Devices&quot;, Release 1.0, November 24th, 2009.

The ADC is sampling at a rate of 44.118 kHz, so additional audio samples
are occasionally inserted or removed from the data sent to host to ensure that
the data streams (USB and ADC) stay synchronized. This gives reasonable audio
quality when listening to music, but produce noticeable artifacts when
listening to a pure sinewave or when the example is compiled in &quot;tone generator&quot;
mode.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.usbdmsd" label="DK3650 usbdmsd">
    <property key="blurb" value="USB Mass Storage Device example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/usbdmsd/bin/usbdmsd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Mass Storage Device example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
to implement a device Mass Storage Class device (MSD).

The example provides five different MSD types.

 - A 96KByte &quot;disk&quot; in internal SRAM
 - A 4MByte &quot;disk&quot; in external PSRAM
 - A disk implemented with a micro SD-Card
 - An internal FLASH &quot;disk&quot; (disksize is internal FLASH size minus 64K)
 - A 16MB external NORFLASH &quot;disk&quot;

Select mediatype in msddmedia.h (#define MSD_MEDIA)

It is also possible to make a buspowered device:
 - Enable #define BUSPOWERED in usbconfig.h (only valid for SRAM and FLASH media)
 - Program the MCU plugin module, remove it from the DK.
 - Connect &quot;USB VREGO&quot; and &quot;VMCU&quot; together.
 - Optionally connect &quot;USB VREGO&quot; and &quot;3.3V&quot; together to enable an activity LED
   (the blue LED labeled &quot;STATUS&quot;).
   Note: This will cause the device suspend current to exceed 2.5 mA.

 - NOTE !!! Do NOT insert the plugin module back on the DK with &quot;USB VREGO&quot;,
   &quot;3.3V&quot; and &quot;VMCU&quot; connected together !!!.

The example will output some info on the DK serial port (115.200 8N1).

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.usbdtouch" label="DK3650 usbdtouch">
    <property key="blurb" value="USB Bitmap transfer using USB drive functionality."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/usbdtouch/bin/usbdtouch.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Bitmap transfer using USB drive functionality.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrate use several functionalities:
1. Creation of virtual drive in system with FAT FS,
2. Mounting the drive on PC and file transfer,
3. Bitmap file creation based on TFT frame buffer content,
4. Resistive touch panel interaction.

On system startup initial drive is created and 
formatted using FAT FS then simple readme.txt file 
is put on file system. Every time user press PB4 key
new file, containing TFT frame buffer in bitmap format
is added. All files could be retrieved after connecting
board to PC by means of USB. For this connection use
small USB socket located on Leopard Gecko CPU board, not
the big one on development kit.

If new files doesn't appear on drive after pressing PB4,
try to reconnect the board to PC.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.usbdvud" label="DK3650 usbdvud">
    <property key="blurb" value="USB Vendor Unique Device example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/usbdvud/bin/usbdvud.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Vendor Unique Device example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
and implements an USB Vendor Unique Device.

The example will toggle User LED's 0-4 when receiving vendor unique class
setup commands.

This example is intended to be used together with the &quot;libusb&quot; device driver,
and host application EFM32-LedApp.exe (a Windows application).

The first time the USB device is connected to the host, you must tell the host
OS to install the &quot;libusb&quot; device driver.

On Windows, you can follow this procedure:
Insert the device, and manually direct Windows to look for drivers in the
directory where you have your copy of the &quot;EFM32_Vendor_Unique_Device.inf&quot; file.
This can be done with the new device &quot;Wizard&quot; which might pop up after device
insertion, or you can open &quot;Device Manager&quot;, left click on the new device and
select &quot;Update Driver Software...&quot;.

Some versions of Windows wont allow you to install unsigned drivers. If you
suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.
Win7:
Repeatedly push F8 during boot until the boot menu appears.
Select the &quot;Disable Driver Signature Enforcement&quot; option.
Win10:
Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.
When computer has restarted into the options menu, select:
Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement
You should now be able to install an unsigned driver.

After libusb is installed, start EFM32-LedApp.exe.

This example will output some info on the DK serial port (115.200 8N1).

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.usbhenum" label="DK3650 usbhenum">
    <property key="blurb" value="USB device enumerator example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/usbhenum/bin/usbhenum.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB device enumerator example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the USB host stack to implement
a simple device enumerator.

Connect a terminal to the DK UART port (115.200, N, 8, 1) and
then connect any USB device to the USB port of the MCU plug-in module.

Info about the VID/PID and some string descriptors will be output on
the serial port. The connected USB device will not be configured.

Note that USB disk drives may fail, as some of them draw too much current
when attached.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.usbhhidkbd" label="DK3650 usbhhidkbd">
    <property key="blurb" value="USB Host HID keyboard example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/usbhhidkbd/bin/usbhhidkbd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Host HID keyboard example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the USB host stack to implement
support for USB HID Keyboards.

Connect a terminal to the DK UART port (115.200, N, 8, 1) and
then connect a USB keyboard to the USB port of the MCU plug-in module.

The example will flash keyboard leds (numlock, scrollock and capslock)
with a binary counting pattern.

Keyboard entry will be echoed on the UART serial port.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.usbhmsdfatcon" label="DK3650 usbhmsdfatcon">
    <property key="blurb" value="USB Host mass storage device example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/usbhmsdfatcon/bin/usbhmsdfatcon.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Host mass storage device example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the USB host and the MSD modules in the
drivers directory to implement support for Mass Storage Device's (MSD).

Connect a terminal to the DK UART port (115.200, N, 8, 1) and
then connect a memory stick the USB port of the MCU plug-in module.

Info about the MSD device will be output on the serial port. When a MSD
device is connected and detected as a valid, you can issue commands at the
serial port console to list all files on the device (ls), type the content
of a file (cat) and append test to a file (echo).

Note that USB disk drives may fail, as some of them draw too much current
when attached.

NOTE:
This example is too large to be built with IDEs with 32KB size limits.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.wavplayer" label="DK3650 wavplayer">
    <property key="blurb" value="Audio .WAV format player."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/wavplayer/bin/wavplayer.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Audio .WAV format player.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including DK BSP (board support
package) and demonstrates how to play a wav file from the SD-card.

The wav file must be named &quot;sweet1.wav&quot; and must be encoded with 16-bit
PCM audio sampling.

The output volume level is adjusted with kit pushbuttons PB1 and PB2.
Output level is indicated by the 14 leftmost user LEDs.
Push the AEM button on the kit until &quot;EFM&quot; shows in the upper right
corner of the TFT display to activate PB1 and PB2 pushbuttons.

The example can be build for using the I2S dac or onchip DAC0.
Look for #define USE_I2S near top of file wavplayer.c

It sets up access to DVK registers, and supports fat-filesystem on the
sd-card.

Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.dk3650.demo.webserver" label="DK3650 webserver">
    <property key="blurb" value="Webserver example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd3601a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_DK3650/webserver/bin/webserver.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Webserver example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;==================

This example shows how to use the EFM32LG-DK3650 to run a http server with a
static web page. This example is using the lwip network stack to provide the
necessary protocol implementations and it's using the ksz8851snl ethernet
controller on the development kit to send and receive packets.

Web page
=========

To view the static web page open your browser to http://dk-ip/ where the 
dk-ip is the ip address assigned to your development kit.

You can find the source code for the static web page under the html directory.
These source files are converted into the fsdata_custom.c file that the lwip
http module knows how to read. This conversion is done by the makefsdata tool.

To customize your own web pages, you can use the makefsdata tool to generate
your own fsdata_custom.c file. The makefsdata tool is provided as part of lwip,
and you can find the C source file for it in the lwip-
contrib/apps/httpserver_raw/makefsdata folder (Don't use the makefsdata perl
script, it is outdated). This is an example of how you can generate the
fsdata_custom.c file using makefsdata.exe.

makefsdata.exe html -l1 -f:fsdata_custom.c

Output
=======

When a network interface is up and running the IP address of the server is
displayed on the LCD display together with rx/tx packet statistics. If you want
to view the lwip trace output you can open a serial connection to the
development kit using baud rate 115200.

IP Configuration
=================

By default this example is configured to use DHCP to fetch an ip address. If you
want to use static ip address instead then follow these steps.

1. open lwipopts.h
2. edit the LWIP_DHCP option to be

#define LWIP_DHCP                       0

3. edit the STATIC_* options to match your desired ip address, subnet mask,
default gateway. This is an example of how to configure these static ip
addresses.

ip: 192.168.0.12
sn: 255.255.255.0
gw: 192.168.0.1

#define STATIC_IPADDR0                  192
#define STATIC_IPADDR1                  168
#define STATIC_IPADDR2                  0
#define STATIC_IPADDR3                  12

#define STATIC_NET_MASK0                255
#define STATIC_NET_MASK1                255
#define STATIC_NET_MASK2                255
#define STATIC_NET_MASK3                0

#define STATIC_GW_IPADDR0               192
#define STATIC_GW_IPADDR1               168
#define STATIC_GW_IPADDR2               0
#define STATIC_GW_IPADDR3               1


ksz8851snl interface
=====================

The ksz8851snl ethernet controller is using an spi interface, and this is
connected to one of the EFM32 USARTs. See the kit user-manual for the actual
pins. This example also shows how to use the provided ksz8851snl drivers to
operate the ethernet controller. These are the main files that are used when
interfacing with the ksz8851snl.

drivers/ksz8851snl.c

This is the hardware abstraction layer for the ksz8851snl. This file contains
functionality like enable and initialize the chip.

drivers/ksz8851snl_spi.c

This contains the spi communication functions for the ksz8851snl. We provide the
low level operations like read/write register as well as read/write fifo in this
file.

lwip-contrib/ports/efm32/ksz8851snl_driver.c

This is the lwip driver that interfaces between the lwip stack and our
ksz8851snl.c hardware abstraction layer.

Interrupt Handling
===================

The ksz8851snl has an interrupt pin that is routed through the board controller
and into a GPIO pin on the EFM32. When the ethernet interrupt is enabled. This
interrupt pin is active low. The ksz8851snl will trigger an interrupt if the
link status has changed or if an ethernet frame has been received or
transmitted. In this example the GPIO is configured to trigger an interrupt on a
falling edge of the ethernet interrupt pin.

The interrupts of the ksz8851snl are not serviced directly from the GPIO
interrupt handler. What we do instead is to signal to the application that an
interrupt is pending and let the main application eventually call the interrupt
service routine within the ksz8851snl driver. The reason for doing this is
because we want to minimize the amount of time inside the interrupt handler.
When a received frame interrupt is triggered the ksz8851snl driver will have to
allocate buffer and transfer a large amount of data from the controller to ram,
and then pass this buffer into the lwip stack.


Board:  Silicon Labs EFM32LG-DK3650 Development Kit
Device: EFM32LG990F256

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.blink" label="STK3600 blink">
    <property key="blurb" value="Blink example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library to
demonstrate the use of the LED's on the starter kit. This example is intended as
a skeleton for new projects.

Board:  Silicon Labs EFM32LG_STK3600 Starter Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.burtc" label="STK3600 burtc">
    <property key="blurb" value="Backup power domain RTC example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/burtc/bin/burtc.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Backup power domain RTC example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrate use of the backup power domain and the
backup real time clock (BURTC).

Start the example with the Power Source Selector switch in the &quot;DBG&quot; position.
When the clock is running you can adjust time by pressing pushbuttons
PB0 and PB1.
When you move the Power Source Selector switch to the &quot;USB&quot; position, the
EFM is turned off and the BURTC peripheral runs on power from the BU capacitor.
(See User manual for EFM32LG-STK3600 starter kit for details on the hardware).
When you move the Power Source Selector switch back to the &quot;DBG&quot; position, you
can verify that time has been recorded correctly.

Board:  Silicon Labs EFM32LG-STK3600 Starter Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.clock" label="STK3600 clock">
    <property key="blurb" value="Wall Clock example using the segment LCD."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/clock/bin/clock.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Wall Clock example using the segment LCD.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS  and demonstrates  the use of
the LCD controller, RTC (real time counter), VCMP, GPIO and various
Energy Modes (EM).

The RTC is set up to wake the EFM32 from EM2 every minute. During this
interval, the LCD is updated to reflect the current time. The animation
feature is used to show the seconds. This is done by using the frame
event counter to drive the animation feature every second.

Time is set with pushbuttons PB0 and PB1.
 - Pushing PB0 increments minute count.
 - Pushing PB1 increments hour count.

The VCMP is used to measure the input voltage on every wakeup. If the
voltage drops too low, voltage boost is enabled on the LCD. This makes
the LCD clear and readable even when running on low batteries.

Board:  Silicon Labs EFM32LG_STK3600 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.cpt007b" label="STK3600 cpt007b_demo">
    <property key="blurb" value="CPT007B Demo"/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/cpt007b/bin/cpt007b_demo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;CPT007B Demo&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This demo demonstrates the capacitive button function of CPT007B fixed function
board. This demo runs on the EFM32 STK, and communicates with CPT007B through
the GPIO pins on the EXP header. Virtual buttons on STK's LCD screen indicate
whether the capacitive sensing buttons on CPT007B are pressed or released.
This demo supports up to 7 capacitive buttons on CPT007B
 
Board:  Silicon Labs EFM32LG_STK3600 Starter Kit and CPT007B Evaluation Board
Device: EFM32LG990F256&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.cslib" label="STK3600 cslib">
    <property key="blurb" value="CSLIB example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/cslib/bin/cslib.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;CSLIB example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the capacitive sensing firmware library to sample
capacitive sensing buttons on the STK.  Real-time sample information, touch
qualification status, and other state variables can be displayed and examined
in the Capacitive Sensing Profiler tool.

Board:  Silicon Labs EFM32LG_STK3600 Starter Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.emlcd" label="STK3600 emlcd">
    <property key="blurb" value="Energy Modes with segment LCD example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/emlcd/bin/emlcd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Energy Modes with segment LCD example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library to
demonstrate the use of the LCD controller, RTC (real time counter), GPIO and
various Energy Modes (EM) on the starter kit.

EM2 is used for delays in between refreshing the LCD display, and a lot of
&quot;eye candy&quot; are present to show off the MCU module's LCD display.

The LCD controller drives the display down to EM2. In the demo, EM2 is used
for &quot;most&quot; delays to show off this feature. The user can press PB0 or PB1 to
activate EM3 and EM4. EM4 requires a system reset, while PB0 again will wake
up the system  from Energy Mode 3.

Board:  Silicon Labs EFM32STG_STK3600 Starter Kit
Device: EFM32LG990F256

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.emode" label="STK3600 emode">
    <property key="blurb" value="Select a single energy mode, and stay there."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/emode/bin/emode.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 EMLIB and demonstrates the use of
the LCD controller, RTC (real time counter), GPIO and various Energy
Modes (EM).

The user can press the push buttons PB0 and PB1 to select which energy
mode to demonstrate.

This demo application has been made to give a quick demo of the
Energy Profiler from Silicon Labs and to reproduce the different 
energy modes seen in the EFM32 datasheet current consumption table. 

Board:  Silicon Labs EFM32LG_STK3600 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.freertos_blink" label="STK3600 freertos_blink">
    <property key="blurb" value="FreeRTOS - Blink example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/freertos_blink/bin/freertos_blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;FreeRTOS - Blink example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board. 
It also shows how to use idle with different energy saving modes ( from EM1 to EM3 - configured in FreeRTOSConfig.h file).
This example is intended as a skeleton for new projects using FreeRTOS.

Board:  Silicon Labs EFM32LG_STK3600 Starter Kit
Device: EFM32LG990F256&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.freertos_tickless" label="STK3600 freertos_tickless">
    <property key="blurb" value="FreeRTOS - Tickless example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/freertos_tickless/bin/freertos_tickless.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;FreeRTOS - Tickless example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks,
one sender generating number and one receiver that displays the number on the LCD. The FreeRTOS is 
configured in tickless mode, going into EM2 when no tasks are active.

EM3 mode cannot be used in this example because the LCD driver and timer are not available in EM3.
For more details, see the configuraiton in FreeRTOSConfig.h file.

Board:  Silicon Labs EFM32LG_STK3600 Starter Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.gpiointerrupt" label="STK3600 gpiointerrupt">
    <property key="blurb" value="Gpio interrupt example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/gpiointerrupt/bin/gpiointerrupt.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Gpio interrupt example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and gpio interrupt dispatcher driver to show
how to handle multiple GPIO interrupts. Buttons pressing toggles LEDs.

Board:  Silicon Labs EFM32LG_STK3600 Starter Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.inttemp" label="STK3600 inttemp">
    <property key="blurb" value="Internal temperature sensor example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/inttemp/bin/inttemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB to demonstrate
the usage of the internal temperature sensor on EFM32 Leopard Gecko
devices.

Note: EFM32 devices with production ID lower than 18 may measure inaccurate
temperatures due to a sensor calibration bug.

Board:  Silicon Labs EFM32LG_STK3600 Starter Kit
Device: EFM32LG990F256

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.lcd" label="STK3600 lcd">
    <property key="blurb" value="Segment LCD controller example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/lcd/bin/lcd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Segment LCD controller example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB peripheral library and
demonstrates the use of the segment LCD controller.

Board:  Silicon Labs EFM32LG_STK3600 Starter Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.lcsense" label="STK3600 lcsense">
    <property key="blurb" value="LC sense example using LESENSE."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/lcsense/bin/lcsense.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;LC sense example using LESENSE.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and demonstrates the use of 
the LESENSE peripheral on the board.

This demo has two different modes.
To change between them, press PB1. In Mode0 (default). The LESENSE
module will wake up whenever a metal object is passed above the LC
sensor in the bottom right of the STK. In Mode 1, the EFM32 will only
wake up every fifth time the metal object is passed over the sensor.

Board: Silicon Labs EFM32LG_STK3600 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.leuart" label="STK3600 leuart">
    <property key="blurb" value="LEUART/DMA in Energy mode2 output example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/leuart/bin/leuart.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project reads and sends the data back to terminal using LEUART
while staying in EM2.

It uses the EFM32 CMSIS and EMLIB, to demonstrate the
use of LEUART communication using DMA under the EM2 on the 
EFM32LG_STK3600 Starter Kit.

The LEUART is configured to be used with DMA under EM2.
The terminal configuration is 9600-8-N-1.
The DMA is configured to handle read and write data bytes from LEUART under EM2.

Testing:
1. Use the expansion header to connect the LEUART to your PC.
2. Pin Configuration:
	2.1. Pin-12 (PD4) LEUART0_TX
	2.2. Pin-14 (PD5) LEUART0_RX
	2.3. Pin-1 Gnd

3. Configure terminal to 9600-8-N-1.
4. Enter characters from your keyboard and see if you receive the echo on the terminal.
5. Check the average current consumption is equal to EM2 on Energy Profiler.

Board:  Silicon Labs EFM32LG_STK3600 Starter Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.lightsense" label="STK3600 lightsense">
    <property key="blurb" value="Lightsensor example using LESENSE."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/lightsense/bin/lightsense.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Lightsensor example using LESENSE.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS
and demonstrates the use of the LESENSE peripheral on the board.

This demo has two different modes.
To change between them, press PB0. In Mode0 (default). The LESENSE
module will wake up whenever a &quot;dark&quot; event is detected by the light sensor
below the &quot;EFM32&quot; sign on the right from the LCD on the STK. In Mode 1,
EFM32 will only wake up on every fifth &quot;dark&quot; event.

Board: Silicon Labs EFM32LG_STK3600 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.mpu" label="STK3600 mpu">
    <property key="blurb" value="Memory Protection Unit example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/mpu/bin/mpu.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Memory Protection Unit example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including STK BSP (board
support package).

It sets up the MPU to demonstrate usage of MPU to catch memory access
violations. STK pushbuttons are used generate MPU faults.

Board:  Silicon Labs EFM32LG_STK3600 Development Kit
Device: EFM32LG990F256

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.nandflash" label="STK3600 nandflash">
    <property key="blurb" value="Nandflash example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/nandflash/bin/nandflash.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Nandflash example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrates use of the NANDFLASH driver.

Connect a terminal to the TTL-level serialport (115200-N-8-1) on EXP port pins
4 and 6.
Operations on the flash are initiated by issuing commands on the terminal.
Command &quot;h&quot; will print a help screen on the terminal :

    Available commands:
        fi         : Show NAND flash device information
        h          : Show this help
        rp n       : Read page n
        bp n       : Blankcheck page n
        bd         : Blankcheck entire device
        bb         : Check bad-block info
        mb n       : Mark block n as bad
        wp n       : Write page n
        eb n       : Erase block n
        ecc n      : Check ECC algorithm, uses page n and n+1
        cp m n     : Copy page m to page n

Note that the nandflash device used on this kit has 32 pages per block, so
pages 0-31 belongs to block 0.

Board:  Silicon Labs EFM32LG-STK3600 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.nvm_simple" label="STK3600 nvm_simple">
    <property key="blurb" value="nvm_simple - non-volatile memory driver usage simple example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/nvm_simple/bin/nvm_simple.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;nvm_simple - non-volatile memory driver usage simple example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example shows simple usage of NVM module.

It stores object (32bit word in this case) into flash region declared 
as non-volatile memory area. It uses wear leveling and demonstrates 
simple use of the NVM driver. There are two types of pages: &quot;normal&quot; 
dedicated for storing multiple objects which doesn't change often 
and &quot;wear&quot; which can store single object (but this could be structure
containing many fields) that can often change. In this example on two pages 
same object is stored but NVM could handle multiple pages with different objects.

PB0 - short press recalls data from &quot;normal&quot; page
PB0 - long press store data to &quot;normal&quot; page
PB1 - counts up, and after releasing stores data to &quot;wear&quot; page

RESET - resets CPU and if there were valid data in NVM recovers last data value.

Board:  Silicon Labs EFM32LG-STK3600 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.powertest" label="STK3600 powertest">
    <property key="blurb" value="Power test example, running demonstration of energy modes."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/powertest/bin/powertest.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library
to demonstrate the use of the various Energy Modes available on the
EFM32LG990F256. When running this example, the Energy Profiler tool
in Simplicity Studio can be used to show the power consumption of each
energy mode.

Board:  Silicon Labs EFM32LG-STK3600 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.rtx_blink" label="STK3600 rtx_blink">
    <property key="blurb" value="Keil RTX RTOS - Blink example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/rtx_blink/bin/rtx_blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - Blink example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the Keil RTX RTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board.
This example is intended as a skeleton for new projects using Keil RTX.

Board:  Silicon Labs EFM32LG-STK3600
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.rtx_tickless" label="STK3600 rtx_tickless">
    <property key="blurb" value="Keil RTX RTOS - tick-less example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/rtx_tickless/bin/rtx_tickless.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - tick-less example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the Keil RTX RTOS, and gives a basic demonstration
of using two tasks; one sender generating number and one receiver that displays
the number on LCD. The RTX is configured in tick-less mode, going into EM2 when
no tasks are active. This example is intended as a skeleton for new projects
using Keil RTX for energy aware applications.

Board:  Silicon Labs EFM32LG-STK3600
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.rtx_tickless_nolcd" label="STK3600 rtx_tickless_nolcd">
    <property key="blurb" value="Keil RTX RTOS - tick-less example with LCD off."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/rtx_tickless_nolcd/bin/rtx_tickless_nolcd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - tick-less example with LCD off.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example is modification of rtx_tickless to demonstrate ultra low power consumption 
of Gecko processors in connection with RTX RTOS. Comparing to previous example it has LCD
turned off. There is also possible to disable part of RAM to lower power even further.
Low frequency crystal oscillator was disabled and low frequency RC oscillator used instead
to lower energy consumption even more.

project uses the Keil RTX RTOS, and gives a basic demonstration
of using two tasks; one sender generating number and one receiver.
The RTX is configured in tick-less mode, going into EM2 when
no tasks are active. This example is intended as a skeleton for new projects
using Keil RTX for energy aware applications.

Board:  Silicon Labs EFM32LG-STK3600
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.touch" label="STK3600 touch">
    <property key="blurb" value="Capactive touch example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/touch/bin/touch.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Capactive touch example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrates the capacitive touch capability of the EFM32 and the
Tiny Gecko STK. This is a port of the EFM32_G8xx_STK capacitive touch demo.

It demonstrates the use of LESENSE, ACMP, VCMP, LCD, and EMU.

Board:  Silicon Labs EFM32LG_STK3600
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.ucos2_port" label="STK3600 ucos2">
    <property key="blurb" value="uC/OS-II RTOS on EFM32 using example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/ucos2_port/bin/ucos2.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;uC/OS-II RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This is a port of the uC/OS-II RTOS from Micrium Inc, http://www.micrium.com

The port has been adapted by Silicon Labs for use with our Development
Kit. It requires the standard EFM32 CMSIS package (including EMLIB).

The example has three tasks:
 - Task1: LED blink task
 - Task2: Receives characters from serial port and posts message to Task3
 - Task3: Receives message from Task2 and writes it on LCD and serial port

Serial port can be chosen between:
USART1 - location 1 is used, GPIO port D pins 0 and 1, baudrate 115200-8-N-1.
LEUART0 - location 0 is used, GPIO port D pins 4 and 5, baudrate 9600-8-N-1.

These USARTs are by default not connected to any serial port, so this needs
to be connected to external RS232 ports to be usable.

uC/OS-II is provided in source form for FREE evaluation, for educational use
or for peaceful research.

If you plan on using uC/OS-II in a commercial product you need to contact
Micrium to properly license its use in your product. We provide ALL the
source code for your convenience and to help you experience uC/OS-II.
The fact that the source is provided does NOT mean that you can use it without
paying a licensing fee.

For commercial use, contact Micrium, http://www.micrium.com for details.

Board:  Silicon Labs EFM32LG_STK3600 Starter Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.usbdcomposite" label="STK3600 usbdcomposite">
    <property key="blurb" value="USB Composite Device example, MSD + CDC + Vendor unique functions."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/usbdcomposite/bin/usbdcomposite.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Composite Device example, MSD + CDC + Vendor unique functions.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
to implement a composite USB device with tree functions:

 - Mass storage class device (MSD) implementing a disk in internal flash memory.
 - Communication device class (CDC) implementing a USB to UART bridge
 - Vendor Unique Device similar to the usbdvud example (control STK leds).

As the CDC function has two interface, the CDC function use an Interface
Association Descriptor (IAD). A composite device which use IAD's must be
implemented using bDeviceClass=0xEF, bDeviceSubClass=2 and bDeviceProtocol=1.


The vendor unique function (VUD).
=================================
Toggles user LED's 0 and 1 when receiving vendor unique class setup commands.
Intended to be used together with the &quot;libusb&quot; device driver, and host
application EFM32-LedApp.exe (a Windows application).
You will find libusb and EFM32-LedApp.exe in the &quot;host&quot; folder of the usbdvud
example. Check EFM32_Vendor_Unique_Device.inf to see how both the usbdvud
example VID_10C4&amp;PID_0001 and this composite example VID_10C4&amp;PID_0008&amp;MI_00
are specified.

The CDC COM port function.
==========================
Implements an USB CDC based virtual COM port. USART1 on the STK is used as the
physical COM port. Any data sent to the virtual CDC COM port is transmitted on
USART1. Any data received on USART1 is transmitted to the virtual port.
USART1 is available on the STK EXT port. EXT pin 4 is Tx, pin 6 is Rx.
NOTE: This is a TTL level USART, DO NOT CONNECT DIRECTLY TO RS232 PORTS !

USB Mass Storage Device function.
=================================
Implements a Mass Storage Class device (MSD) with 4MByte in external PSRAM.


Windows driver installation.
============================
The first time the composite USB device is connected to the host, Windows must
install drivers for the VUD and CDC functions.

To control the VUD function with EFM32-LedApp.exe you need to install &quot;libusb&quot;
device driver. Manually direct Windows to look for this driver in the &quot;host&quot;
folder of the usbdvud example.
This can be done with the new device &quot;Wizard&quot; which might pop up after device
insertion, or you can open &quot;Device Manager&quot;, left click on one of functions
of the new composite device (marked with yellow exclamation mark) and
select &quot;Update Driver Software...&quot;.
After libusb is installed you can start EFM32-LedApp.exe to control leds on
the STK.

Similarly for the CDC function, direct Windows to look for a driver in the
folder where you have your copy of the &quot;EFM32-Cdc.inf&quot; file (same folder as
this readme file, unzip the Silabs-CDC_Install.zip).
Note how the .inf file specifies interface number 2, VID_10C4&amp;PID_0008&amp;MI_02.
When the serial port driver is succesfully installed, the device will be listed
as a &quot;Ports&quot; device in Device Manager, double-click it, select the
&quot;Port Settings&quot; tab and maybe the &quot;Advanced...&quot; button to set serial port
properties.

Some versions of Windows wont allow you to install unsigned drivers. If you
suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.
Win7:
Repeatedly push F8 during boot until the boot menu appears.
Select the &quot;Disable Driver Signature Enforcement&quot; option.
Win10:
Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.
When computer has restarted into the options menu, select:
Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement
You should now be able to install an unsigned driver.

Board:  Silicon Labs EFM32LG-STK3600 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.usbdhidkbd" label="STK3600 usbdhidkbd">
    <property key="blurb" value="USB HID keyboard example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/usbdhidkbd/bin/usbdhidkbd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB HID keyboard example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
and implements an USB HID class keyboard device (one button !).

PB0 is the keyboard button. Pressing this button will succesively write
&quot;Silicon Labs - &quot;.

Board:  Silicon Labs EFM32LG-STK3600 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.usbdmsd" label="STK3600 usbdmsd">
    <property key="blurb" value="USB Mass Storage Device example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/usbdmsd/bin/usbdmsd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Mass Storage Device example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
to implement a device Mass Storage Class device (MSD).

The example provides two different MSD types.

 - A 96KByte &quot;disk&quot; in internal SRAM (on devices with 128 kByte or larger SRAM)
 - An internal FLASH &quot;disk&quot; (disksize is internal FLASH size minus 64K)

Select mediatype in msddmedia.h (#define MSD_MEDIA)

Board:  Silicon Labs EFM32LG_STK3600 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.usbdvud" label="STK3600 usbdvud">
    <property key="blurb" value="USB Vendor Unique Device example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/usbdvud/bin/usbdvud.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Vendor Unique Device example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
and implements an USB Vendor Unique Device.

The example will toggle LED's 0 and 1 when receiving vendor unique class
setup commands.

This example is intended to be used together with the &quot;libusb&quot; device driver,
and host application EFM32-LedApp.exe (a Windows application).

The first time the USB device is connected to the host, you must tell the host
OS to install the &quot;libusb&quot; device driver.

On Windows, you can follow this procedure:
Insert the device, and manually direct Windows to look for drivers in the
directory where you have your copy of the &quot;EFM32_Vendor_Unique_Device.inf&quot; file.
This can be done with the new device &quot;Wizard&quot; which might pop up after device
insertion, or you can open &quot;Device Manager&quot;, left click on the new device and
select &quot;Update Driver Software...&quot;.

Some versions of Windows wont allow you to install unsigned drivers. If you
suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.
Win7:
Repeatedly push F8 during boot until the boot menu appears.
Select the &quot;Disable Driver Signature Enforcement&quot; option.
Win10:
Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.
When computer has restarted into the options menu, select:
Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement
You should now be able to install an unsigned driver.

After libusb is installed, start EFM32-LedApp.exe.

Board:  Silicon Labs EFM32LG-STK3600 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.usbhenum" label="STK3600 usbhenum">
    <property key="blurb" value="USB device enumerator example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/usbhenum/bin/usbhenum.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB device enumerator example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the USB host stack to implement
a simple device enumerator. When a device is attached its descriptors are read
and the vendor and product id's (VID/PID) are displayed on the LCD.
The device attached will not be configured.

Note that USB disk drives may fail, as some of them draw too much current
when attached.

Board:  Silicon Labs EFM32LG-STK3600 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.usbxpress_echo" label="STK3600 usbxpress_echo">
    <property key="blurb" value="USBXpress Echo example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/usbxpress_echo/bin/usbxpress_echo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USBXpress Echo example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project demonstrates the EFM32 USBXpress firmware library.
It echoes all received data back to the host that sent it.

The host-side application is the usbxpress_echo.py Python script found in the
USBXpress SDK at Examples/Echo/Host. The USBXpress SDK is available for download
at www.silabs.com/products/mcu/Pages/USBXpress.aspx.

Board:  Silicon Labs EFM32LG_STK3600 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.usbxpress_test_panel" label="STK3600 usbxpress_test_panel">
    <property key="blurb" value="USBXpress Test Panel example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/usbxpress_test_panel/bin/usbxpress_test_panel.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USBXpress Test Panel example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project demonstrates the EFM32 USBXpress firmware library.
It communicates with the TestPanel host application to send and receive data.
TestPanel is included in the USBXpress SDK, available for download at:

https://www.silabs.com/products/mcu/Pages/USBXpress.aspx

Board:  Silicon Labs EFM32LG_STK3600 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32lg.stk3600.demo.userpage" label="STK3600 userpage">
    <property key="blurb" value="Progamming and use of user flash page for data."/>
    <property key="partCompatibility" value="mcu.arm.efm32.lg.*"/>
    <property key="boardCompatibility" value="brd2201a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32LG_STK3600/userpage/bin/userpage.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Progamming and use of user flash page for data.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS  and demonstrates the programming of
the user page in flash. The page can be used for data such as keys, serial
numbers and other information that should not be deleted by a device erase.

PB0 increases the main counter.
PB1 saves the main counter value to the user page and displays how many Flash writes
have been issued.

Board:  Silicon Labs EFM32LG_STK3600 Development Kit
Device: EFM32LG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6241a.demo.blink" label="SLWSTK6241A blink">
    <property key="blurb" value="Blink example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <property key="boardCompatibility" value="brd4542b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6241A_EZR32HG/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use CMSIS and the EMLIB peripheral library to
demonstrate the use of the LED's on the starter kit. This example is intended as
a skeleton for new projects.

Board:  Silicon Labs SLWSTK6241A_EZR32HG Starter Kit
Device: EZR32HG320F64R61
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6241a.demo.clock" label="SLWSTK6241A clock">
    <property key="blurb" value="Analog and digital clock example using the Memory LCD on the SLWSTK6241A_EZR32HG."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <property key="boardCompatibility" value="brd4542b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6241A_EZR32HG/clock/bin/clock.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6241A_EZR32HG.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the SLWSTK6241A_EZR32HG kit.

The user can switch between analog and digital clock modes by pushing
the PB0 button.

The user can increment the second count by pushing the PB1 button.
The minute count can be incremented by pushing the PB1 button for more
than 2 seconds.

The analog clock mode demonstrates the use of GLIB to draw hour, minute
and second pointers on the background which is a bitmap in flash memory.

The digital clock demonstrates the 16x20 font (including number characters
only) of the textdisplay driver.

Board:  Silicon Labs SLWSTK6241A_EZR32HG Starter Kit
Device: EZR32HG320F64R61
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6241a.demo.ezradio_direct_rx" label="SLWSTK6241A ezradio_direct_rx">
    <property key="blurb" value="EZRadio Direct Rx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <property key="boardCompatibility" value="brd4542b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_direct_rx/bin/ezradio_direct_rx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use this example together with the Direct Tx example
running on an other node, so the link functionality can be tested.

The user can start direct reception by pressing the PB0 button. 
Ceasing direct reception can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6241A_EZR32HG Development Kit
Device: EZR32HG320F64R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6241a.demo.ezradio_direct_tx" label="SLWSTK6241A ezradio_direct_tx">
    <property key="blurb" value="EZRadio Direct Tx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <property key="boardCompatibility" value="brd4542b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_direct_tx/bin/ezradio_direct_tx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use this example together with the Direct Rx example
running on an other node, so the link functionality can be tested.

The user can start direct transmission by pressing the PB0 button. 
Ceasing direct transmission can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6241A_EZR32HG Development Kit
Device: EZR32HG320F64R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6241a.demo.ezradio_per" label="SLWSTK6241A ezradio_per">
    <property key="blurb" value="EZRadio packet error rate (PER) example using the EZRadio device in the EZR32HG"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <property key="boardCompatibility" value="brd4542b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_per/bin/ezradio_per.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio packet error rate (PER) example using the EZRadio device in the EZR32HG&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt; device.

This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

This example bases on the standard TRx with auto acknowledge example. It is 
advised to study the original application first.
All the original functionalities can be turned on, however, the main purpose
of this example is to show how to implement transmission packet error rate (PER) 
and RSSI measurements in an application. The user can send either one (PB0) 
or multiple packets (PB1) with the transmitter node and study the PER and RSSI
values on the receiver node.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6241A_EZR32HG Development Kit
Device: EZR32HG320F64R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6241a.demo.ezradio_pn9" label="SLWSTK6241A ezradio_pn9">
    <property key="blurb" value="EZRadio PN9 transmission example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <property key="boardCompatibility" value="brd4542b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_pn9/bin/ezradio_pn9.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

The user can start PN9 (pseudorandom binary where N=9) transmission by pressing
the PB0 button. Ceasing the transmission can be issued by pressing the PB0 
button again. 
See the EzRadio documentation for more information on PN9 transmission.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6241A_EZR32HG Development Kit
Device: EZR32HG320F64R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6241a.demo.ezradio_simple_trx" label="SLWSTK6241A ezradio_simple_trx">
    <property key="blurb" value="EZRadio simple TRx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <property key="boardCompatibility" value="brd4542b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_simple_trx/bin/ezradio_simple_trx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

The user can send one packet with the radio by pushing the PB0 button. The
data counter in the packet is incremented and shown on the LCD. If the
packet is received by the other device, the received data is shown on its
LCD. If the packet is received with CRC error this is printed as well.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6241A_EZR32HG Development Kit
Device: EZR32HG320F64R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6241a.demo.ezradio_trx_ack" label="SLWSTK6241A ezradio_trx_ack">
    <property key="blurb" value="EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <property key="boardCompatibility" value="brd4542b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_trx_ack/bin/ezradio_trx_ack.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt; device.

This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

The user can send one packet with the radio by pushing the PB0 button. The
data counter in the packet is incremented and shown on the LCD. If the
packet is received by the other device, the received data is shown on its
LCD. If the packet is received with CRC error this is printed as well. In case
the data is received properly the receiver automatically sends back an
acknowledge packet. The transmitted and received 'ACK' packet is shown on 
the LCD as well.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6241A_EZR32HG Development Kit
Device: EZR32HG320F64R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6241a.demo.ezradio_unmodulated_carrier" label="SLWSTK6241A ezradio_unmodulated_carrier">
    <property key="blurb" value="EZRadio Unmodulated Carrier transmission example using the EZRadio device in"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <property key="boardCompatibility" value="brd4542b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6241A_EZR32HG/ezradio_unmodulated_carrier/bin/ezradio_unmodulated_carrier.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;the EZR32 device.

This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

The user can start CW transmission by pressing the PB0 button. 
Ceasing the transmission can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6241A_EZR32HG Development Kit
Device: EZR32HG320F64R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6241a.demo.humitemp" label="SLWSTK6241A humitemp">
    <property key="blurb" value="Humidity and temperature demo using the on-board si7021 sensor on the"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <property key="boardCompatibility" value="brd4542b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6241A_EZR32HG/humitemp/bin/humitemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;SLWSTK6241A_EZR32HG board.

This example project uses CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the
SLWSTK6241A_EZR32HG board.

Board:  Silicon Labs SLWSTK6241A_EZR32HG Starter Kit
Device: EZR32HG320F64R61
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6241a.demo.rs232" label="SLWSTK6241A rs232">
    <property key="blurb" value="VCOM/USART/LEUART RS232 output example."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r55."/>
    <property key="boardCompatibility" value="brd4542b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6241A_EZR32HG/rs232/bin/rs232.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses CMSIS and EMLIB, to demonstrates the
use of LEUART, USART or VCOM  communication on the SLWSTK6241A_EZR32HG
wireless starter kit.

Serial port selection is done by defining any one of compiletime macros:
#define RETARGET_LEUART0
#define RETARGET_USART0
#define RETARGET_VCOM       (default)

If a USART is used set terminal configuration to 115200-8-N-1.
If the LEUART is used set terminal configuration to 9600-8-N-1.
For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.

Board:  Silicon Labs SLWSTK6241A_EZR32HG Starter Kit
Device: EZR32HG320F64R61
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6242a.demo.blink" label="SLWSTK6242A blink">
    <property key="blurb" value="Blink example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <property key="boardCompatibility" value="brd4543b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6242A_EZR32HG/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use CMSIS and the EMLIB peripheral library to
demonstrate the use of the LED's on the starter kit. This example is intended as
a skeleton for new projects.

Board:  Silicon Labs SLWSTK6242A_EZR32HG Starter Kit
Device: EZR32HG320F64R61
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6242a.demo.clock" label="SLWSTK6242A clock">
    <property key="blurb" value="Analog and digital clock example using the Memory LCD on the SLWSTK6242A_EZR32HG."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <property key="boardCompatibility" value="brd4543b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6242A_EZR32HG/clock/bin/clock.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6242A_EZR32HG.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the SLWSTK6242A_EZR32HG kit.

The user can switch between analog and digital clock modes by pushing
the PB0 button.

The user can increment the second count by pushing the PB1 button.
The minute count can be incremented by pushing the PB1 button for more
than 2 seconds.

The analog clock mode demonstrates the use of GLIB to draw hour, minute
and second pointers on the background which is a bitmap in flash memory.

The digital clock demonstrates the 16x20 font (including number characters
only) of the textdisplay driver.

Board:  Silicon Labs SLWSTK6242A_EZR32HG Starter Kit
Device: EZR32HG320F64R61
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6242a.demo.ezradio_direct_rx" label="SLWSTK6242A ezradio_direct_rx">
    <property key="blurb" value="EZRadio Direct Rx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <property key="boardCompatibility" value="brd4543b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_direct_rx/bin/ezradio_direct_rx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use this example together with the Direct Tx example
running on an other node, so the link functionality can be tested.

The user can start direct reception by pressing the PB0 button. 
Ceasing direct reception can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6242A_EZR32HG Development Kit
Device: EZR32HG320F64R68
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6242a.demo.ezradio_direct_tx" label="SLWSTK6242A ezradio_direct_tx">
    <property key="blurb" value="EZRadio Direct Tx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <property key="boardCompatibility" value="brd4543b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_direct_tx/bin/ezradio_direct_tx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use this example together with the Direct Rx example
running on an other node, so the link functionality can be tested.

The user can start direct transmission by pressing the PB0 button. 
Ceasing direct transmission can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6242A_EZR32HG Development Kit
Device: EZR32HG320F64R68
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6242a.demo.ezradio_per" label="SLWSTK6242A ezradio_per">
    <property key="blurb" value="EZRadio packet error rate (PER) example using the EZRadio device in the EZR32HG"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <property key="boardCompatibility" value="brd4543b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_per/bin/ezradio_per.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio packet error rate (PER) example using the EZRadio device in the EZR32HG&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt; device.

This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

This example bases on the standard TRx with auto acknowledge example. It is 
advised to study the original application first.
All the original functionalities can be turned on, however, the main purpose
of this example is to show how to implement transmission packet error rate (PER) 
and RSSI measurements in an application. The user can send either one (PB0) 
or multiple packets (PB1) with the transmitter node and study the PER and RSSI
values on the receiver node.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6242A_EZR32HG Development Kit
Device: EZR32HG320F64R68
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6242a.demo.ezradio_pn9" label="SLWSTK6242A ezradio_pn9">
    <property key="blurb" value="EZRadio PN9 transmission example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <property key="boardCompatibility" value="brd4543b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_pn9/bin/ezradio_pn9.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

The user can start PN9 (pseudorandom binary where N=9) transmission by pressing
the PB0 button. Ceasing the transmission can be issued by pressing the PB0 
button again. 
See the EzRadio documentation for more information on PN9 transmission.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6242A_EZR32HG Development Kit
Device: EZR32HG320F64R68
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6242a.demo.ezradio_simple_trx" label="SLWSTK6242A ezradio_simple_trx">
    <property key="blurb" value="EZRadio simple TRx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <property key="boardCompatibility" value="brd4543b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_simple_trx/bin/ezradio_simple_trx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

The user can send one packet with the radio by pushing the PB0 button. The
data counter in the packet is incremented and shown on the LCD. If the
packet is received by the other device, the received data is shown on its
LCD. If the packet is received with CRC error this is printed as well.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6242A_EZR32HG Development Kit
Device: EZR32HG320F64R68
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6242a.demo.ezradio_trx_ack" label="SLWSTK6242A ezradio_trx_ack">
    <property key="blurb" value="EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <property key="boardCompatibility" value="brd4543b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_trx_ack/bin/ezradio_trx_ack.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt; device.

This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

The user can send one packet with the radio by pushing the PB0 button. The
data counter in the packet is incremented and shown on the LCD. If the
packet is received by the other device, the received data is shown on its
LCD. If the packet is received with CRC error this is printed as well. In case
the data is received properly the receiver automatically sends back an
acknowledge packet. The transmitted and received 'ACK' packet is shown on 
the LCD as well.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6242A_EZR32HG Development Kit
Device: EZR32HG320F64R68
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6242a.demo.ezradio_unmodulated_carrier" label="SLWSTK6242A ezradio_unmodulated_carrier">
    <property key="blurb" value="EZRadio Unmodulated Carrier transmission example using the EZRadio device in"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <property key="boardCompatibility" value="brd4543b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6242A_EZR32HG/ezradio_unmodulated_carrier/bin/ezradio_unmodulated_carrier.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;the EZR32 device.

This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

The user can start CW transmission by pressing the PB0 button. 
Ceasing the transmission can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6242A_EZR32HG Development Kit
Device: EZR32HG320F64R68
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6242a.demo.humitemp" label="SLWSTK6242A humitemp">
    <property key="blurb" value="Humidity and temperature demo using the on-board si7021 sensor on the"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <property key="boardCompatibility" value="brd4543b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6242A_EZR32HG/humitemp/bin/humitemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;SLWSTK6242A_EZR32HG board.

This example project uses CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the
SLWSTK6242A_EZR32HG board.

Board:  Silicon Labs SLWSTK6242A_EZR32HG Starter Kit
Device: EZR32HG320F64R61
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6242a.demo.rs232" label="SLWSTK6242A rs232">
    <property key="blurb" value="VCOM/USART/LEUART RS232 output example."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r68."/>
    <property key="boardCompatibility" value="brd4543b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6242A_EZR32HG/rs232/bin/rs232.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses CMSIS and EMLIB, to demonstrates the
use of LEUART, USART or VCOM  communication on the SLWSTK6242A_EZR32HG
wireless starter kit.

Serial port selection is done by defining any one of compiletime macros:
#define RETARGET_LEUART0
#define RETARGET_USART0
#define RETARGET_VCOM       (default)

If a USART is used set terminal configuration to 115200-8-N-1.
If the LEUART is used set terminal configuration to 9600-8-N-1.
For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.

Board:  Silicon Labs SLWSTK6242A_EZR32HG Starter Kit
Device: EZR32HG320F64R61
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6243a.demo.blink" label="SLWSTK6243A blink">
    <property key="blurb" value="Blink example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <property key="boardCompatibility" value="brd4545a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6243A_EZR32HG/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use CMSIS and the EMLIB peripheral library to
demonstrate the use of the LED's on the starter kit. This example is intended as
a skeleton for new projects.

Board:  Silicon Labs SLWSTK6243A_EZR32HG Starter Kit
Device: EZR32HG320F64R61
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6243a.demo.clock" label="SLWSTK6243A clock">
    <property key="blurb" value="Analog and digital clock example using the Memory LCD on the SLWSTK6243A_EZR32HG."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <property key="boardCompatibility" value="brd4545a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6243A_EZR32HG/clock/bin/clock.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6243A_EZR32HG.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the SLWSTK6243A_EZR32HG kit.

The user can switch between analog and digital clock modes by pushing
the PB0 button.

The user can increment the second count by pushing the PB1 button.
The minute count can be incremented by pushing the PB1 button for more
than 2 seconds.

The analog clock mode demonstrates the use of GLIB to draw hour, minute
and second pointers on the background which is a bitmap in flash memory.

The digital clock demonstrates the 16x20 font (including number characters
only) of the textdisplay driver.

Board:  Silicon Labs SLWSTK6243A_EZR32HG Starter Kit
Device: EZR32HG320F64R61
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6243a.demo.ezradio_direct_rx" label="SLWSTK6243A ezradio_direct_rx">
    <property key="blurb" value="EZRadio Direct Rx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <property key="boardCompatibility" value="brd4545a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_direct_rx/bin/ezradio_direct_rx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use this example together with the Direct Tx example
running on an other node, so the link functionality can be tested.

The user can start direct reception by pressing the PB0 button. 
Ceasing direct reception can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6243A_EZR32HG Development Kit
Device: EZR32HG320F64R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6243a.demo.ezradio_direct_tx" label="SLWSTK6243A ezradio_direct_tx">
    <property key="blurb" value="EZRadio Direct Tx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <property key="boardCompatibility" value="brd4545a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_direct_tx/bin/ezradio_direct_tx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use this example together with the Direct Rx example
running on an other node, so the link functionality can be tested.

The user can start direct transmission by pressing the PB0 button. 
Ceasing direct transmission can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6243A_EZR32HG Development Kit
Device: EZR32HG320F64R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6243a.demo.ezradio_per" label="SLWSTK6243A ezradio_per">
    <property key="blurb" value="EZRadio packet error rate (PER) example using the EZRadio device in the EZR32HG"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <property key="boardCompatibility" value="brd4545a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_per/bin/ezradio_per.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio packet error rate (PER) example using the EZRadio device in the EZR32HG&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt; device.

This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

This example bases on the standard TRx with auto acknowledge example. It is 
advised to study the original application first.
All the original functionalities can be turned on, however, the main purpose
of this example is to show how to implement transmission packet error rate (PER) 
and RSSI measurements in an application. The user can send either one (PB0) 
or multiple packets (PB1) with the transmitter node and study the PER and RSSI
values on the receiver node.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6243A_EZR32HG Development Kit
Device: EZR32HG320F64R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6243a.demo.ezradio_pn9" label="SLWSTK6243A ezradio_pn9">
    <property key="blurb" value="EZRadio PN9 transmission example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <property key="boardCompatibility" value="brd4545a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_pn9/bin/ezradio_pn9.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

The user can start PN9 (pseudorandom binary where N=9) transmission by pressing
the PB0 button. Ceasing the transmission can be issued by pressing the PB0 
button again. 
See the EzRadio documentation for more information on PN9 transmission.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6243A_EZR32HG Development Kit
Device: EZR32HG320F64R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6243a.demo.ezradio_simple_trx" label="SLWSTK6243A ezradio_simple_trx">
    <property key="blurb" value="EZRadio simple TRx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <property key="boardCompatibility" value="brd4545a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_simple_trx/bin/ezradio_simple_trx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

The user can send one packet with the radio by pushing the PB0 button. The
data counter in the packet is incremented and shown on the LCD. If the
packet is received by the other device, the received data is shown on its
LCD. If the packet is received with CRC error this is printed as well.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6243A_EZR32HG Development Kit
Device: EZR32HG320F64R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6243a.demo.ezradio_trx_ack" label="SLWSTK6243A ezradio_trx_ack">
    <property key="blurb" value="EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <property key="boardCompatibility" value="brd4545a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_trx_ack/bin/ezradio_trx_ack.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt; device.

This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

The user can send one packet with the radio by pushing the PB0 button. The
data counter in the packet is incremented and shown on the LCD. If the
packet is received by the other device, the received data is shown on its
LCD. If the packet is received with CRC error this is printed as well. In case
the data is received properly the receiver automatically sends back an
acknowledge packet. The transmitted and received 'ACK' packet is shown on 
the LCD as well.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6243A_EZR32HG Development Kit
Device: EZR32HG320F64R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6243a.demo.ezradio_unmodulated_carrier" label="SLWSTK6243A ezradio_unmodulated_carrier">
    <property key="blurb" value="EZRadio Unmodulated Carrier transmission example using the EZRadio device in"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <property key="boardCompatibility" value="brd4545a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6243A_EZR32HG/ezradio_unmodulated_carrier/bin/ezradio_unmodulated_carrier.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;the EZR32 device.

This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

The user can start CW transmission by pressing the PB0 button. 
Ceasing the transmission can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6243A_EZR32HG Development Kit
Device: EZR32HG320F64R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6243a.demo.humitemp" label="SLWSTK6243A humitemp">
    <property key="blurb" value="Humidity and temperature demo using the on-board si7021 sensor on the"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <property key="boardCompatibility" value="brd4545a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6243A_EZR32HG/humitemp/bin/humitemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;SLWSTK6243A_EZR32HG board.

This example project uses CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the
SLWSTK6243A_EZR32HG board.

Board:  Silicon Labs SLWSTK6243A_EZR32HG Starter Kit
Device: EZR32HG320F64R61
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6243a.demo.rs232" label="SLWSTK6243A rs232">
    <property key="blurb" value="VCOM/USART/LEUART RS232 output example."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <property key="boardCompatibility" value="brd4545a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6243A_EZR32HG/rs232/bin/rs232.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses CMSIS and EMLIB, to demonstrates the
use of LEUART, USART or VCOM  communication on the SLWSTK6243A_EZR32HG
wireless starter kit.

Serial port selection is done by defining any one of compiletime macros:
#define RETARGET_LEUART0
#define RETARGET_USART0
#define RETARGET_VCOM       (default)

If a USART is used set terminal configuration to 115200-8-N-1.
If the LEUART is used set terminal configuration to 9600-8-N-1.
For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.

Board:  Silicon Labs SLWSTK6243A_EZR32HG Starter Kit
Device: EZR32HG320F64R61
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6244a.demo.blink" label="SLWSTK6244A blink">
    <property key="blurb" value="Blink example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <property key="boardCompatibility" value="brd4544a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6244A_EZR32HG/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use CMSIS and the EMLIB peripheral library to
demonstrate the use of the LED's on the starter kit. This example is intended as
a skeleton for new projects.

Board:  Silicon Labs SLWSTK6244A_EZR32HG Starter Kit
Device: EZR32HG320F64R61
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6244a.demo.clock" label="SLWSTK6244A clock">
    <property key="blurb" value="Analog and digital clock example using the Memory LCD on the SLWSTK6244A_EZR32HG."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <property key="boardCompatibility" value="brd4544a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6244A_EZR32HG/clock/bin/clock.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6244A_EZR32HG.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the SLWSTK6244A_EZR32HG kit.

The user can switch between analog and digital clock modes by pushing
the PB0 button.

The user can increment the second count by pushing the PB1 button.
The minute count can be incremented by pushing the PB1 button for more
than 2 seconds.

The analog clock mode demonstrates the use of GLIB to draw hour, minute
and second pointers on the background which is a bitmap in flash memory.

The digital clock demonstrates the 16x20 font (including number characters
only) of the textdisplay driver.

Board:  Silicon Labs SLWSTK6244A_EZR32HG Starter Kit
Device: EZR32HG320F64R61
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6244a.demo.ezradio_direct_rx" label="SLWSTK6244A ezradio_direct_rx">
    <property key="blurb" value="EZRadio Direct Rx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <property key="boardCompatibility" value="brd4544a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_direct_rx/bin/ezradio_direct_rx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use this example together with the Direct Tx example
running on an other node, so the link functionality can be tested.

The user can start direct reception by pressing the PB0 button. 
Ceasing direct reception can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6244A_EZR32HG Development Kit
Device: EZR32HG320F64R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6244a.demo.ezradio_direct_tx" label="SLWSTK6244A ezradio_direct_tx">
    <property key="blurb" value="EZRadio Direct Tx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <property key="boardCompatibility" value="brd4544a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_direct_tx/bin/ezradio_direct_tx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use this example together with the Direct Rx example
running on an other node, so the link functionality can be tested.

The user can start direct transmission by pressing the PB0 button. 
Ceasing direct transmission can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6244A_EZR32HG Development Kit
Device: EZR32HG320F64R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6244a.demo.ezradio_per" label="SLWSTK6244A ezradio_per">
    <property key="blurb" value="EZRadio packet error rate (PER) example using the EZRadio device in the EZR32HG"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <property key="boardCompatibility" value="brd4544a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_per/bin/ezradio_per.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio packet error rate (PER) example using the EZRadio device in the EZR32HG&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt; device.

This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

This example bases on the standard TRx with auto acknowledge example. It is 
advised to study the original application first.
All the original functionalities can be turned on, however, the main purpose
of this example is to show how to implement transmission packet error rate (PER) 
and RSSI measurements in an application. The user can send either one (PB0) 
or multiple packets (PB1) with the transmitter node and study the PER and RSSI
values on the receiver node.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6244A_EZR32HG Development Kit
Device: EZR32HG320F64R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6244a.demo.ezradio_pn9" label="SLWSTK6244A ezradio_pn9">
    <property key="blurb" value="EZRadio PN9 transmission example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <property key="boardCompatibility" value="brd4544a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_pn9/bin/ezradio_pn9.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

The user can start PN9 (pseudorandom binary where N=9) transmission by pressing
the PB0 button. Ceasing the transmission can be issued by pressing the PB0 
button again. 
See the EzRadio documentation for more information on PN9 transmission.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6244A_EZR32HG Development Kit
Device: EZR32HG320F64R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6244a.demo.ezradio_simple_trx" label="SLWSTK6244A ezradio_simple_trx">
    <property key="blurb" value="EZRadio simple TRx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <property key="boardCompatibility" value="brd4544a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_simple_trx/bin/ezradio_simple_trx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

The user can send one packet with the radio by pushing the PB0 button. The
data counter in the packet is incremented and shown on the LCD. If the
packet is received by the other device, the received data is shown on its
LCD. If the packet is received with CRC error this is printed as well.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6244A_EZR32HG Development Kit
Device: EZR32HG320F64R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6244a.demo.ezradio_trx_ack" label="SLWSTK6244A ezradio_trx_ack">
    <property key="blurb" value="EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <property key="boardCompatibility" value="brd4544a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_trx_ack/bin/ezradio_trx_ack.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt; device.

This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

The user can send one packet with the radio by pushing the PB0 button. The
data counter in the packet is incremented and shown on the LCD. If the
packet is received by the other device, the received data is shown on its
LCD. If the packet is received with CRC error this is printed as well. In case
the data is received properly the receiver automatically sends back an
acknowledge packet. The transmitted and received 'ACK' packet is shown on 
the LCD as well.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6244A_EZR32HG Development Kit
Device: EZR32HG320F64R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6244a.demo.ezradio_unmodulated_carrier" label="SLWSTK6244A ezradio_unmodulated_carrier">
    <property key="blurb" value="EZRadio Unmodulated Carrier transmission example using the EZRadio device in"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <property key="boardCompatibility" value="brd4544a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6244A_EZR32HG/ezradio_unmodulated_carrier/bin/ezradio_unmodulated_carrier.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;the EZR32 device.

This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

The user can start CW transmission by pressing the PB0 button. 
Ceasing the transmission can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6244A_EZR32HG Development Kit
Device: EZR32HG320F64R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6244a.demo.humitemp" label="SLWSTK6244A humitemp">
    <property key="blurb" value="Humidity and temperature demo using the on-board si7021 sensor on the"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <property key="boardCompatibility" value="brd4544a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6244A_EZR32HG/humitemp/bin/humitemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;SLWSTK6244A_EZR32HG board.

This example project uses CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the
SLWSTK6244A_EZR32HG board.

Board:  Silicon Labs SLWSTK6244A_EZR32HG Starter Kit
Device: EZR32HG320F64R61
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6244a.demo.rs232" label="SLWSTK6244A rs232">
    <property key="blurb" value="VCOM/USART/LEUART RS232 output example."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*.ezr32hg320f64r63."/>
    <property key="boardCompatibility" value="brd4544a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6244A_EZR32HG/rs232/bin/rs232.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses CMSIS and EMLIB, to demonstrates the
use of LEUART, USART or VCOM  communication on the SLWSTK6244A_EZR32HG
wireless starter kit.

Serial port selection is done by defining any one of compiletime macros:
#define RETARGET_LEUART0
#define RETARGET_USART0
#define RETARGET_VCOM       (default)

If a USART is used set terminal configuration to 115200-8-N-1.
If the LEUART is used set terminal configuration to 9600-8-N-1.
For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.

Board:  Silicon Labs SLWSTK6244A_EZR32HG Starter Kit
Device: EZR32HG320F64R61
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6201a.demo.blink" label="SLWSTK6201A blink">
    <property key="blurb" value="Blink example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <property key="boardCompatibility" value="brd4502b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6201A_EZR32LG/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use CMSIS and the EMLIB peripheral library to
demonstrate the use of the LED's on the starter kit. This example is intended as
a skeleton for new projects.

Board:  Silicon Labs SLWSTK6201A_EZR32LG Starter Kit
Device: EZR32LG330F256R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6201a.demo.clock" label="SLWSTK6201A clock">
    <property key="blurb" value="Analog and digital clock example using the Memory LCD on the SLWSTK6201A_EZR32LG."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <property key="boardCompatibility" value="brd4502b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6201A_EZR32LG/clock/bin/clock.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6201A_EZR32LG.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the SLWSTK6201A_EZR32LG kit.

The user can switch between analog and digital clock modes by pushing
the PB0 button.

The user can increment the minute count by pushing the PB1 button.
The minute count can be incremented by pushing the PB1 button for more
than 0.5 seconds.

The analog clock mode demonstrates the use of GLIB to draw hour, minute
and second pointers on the background which is a bitmap in flash memory.

The digital clock demonstrates the 16x20 font (including number characters
only) of the textdisplay driver.

Board:  Silicon Labs SLWSTK6201A_EZR32LG Development Kit
Device: EZR32LG330F256R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6201a.demo.ezradio_direct_rx" label="SLWSTK6201A ezradio_direct_rx">
    <property key="blurb" value="EZRadio Direct Rx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <property key="boardCompatibility" value="brd4502b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6201A_EZR32LG/ezradio_direct_rx/bin/ezradio_direct_rx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use this example together with the Direct Tx example
running on an other node, so the link functionality can be tested.

The user can start direct reception by pressing the PB0 button. 
Ceasing direct reception can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6201A_EZR32LG Development Kit
Device: EZR32LG330F256R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6201a.demo.ezradio_direct_tx" label="SLWSTK6201A ezradio_direct_tx">
    <property key="blurb" value="EZRadio Direct Tx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <property key="boardCompatibility" value="brd4502b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6201A_EZR32LG/ezradio_direct_tx/bin/ezradio_direct_tx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use this example together with the Direct Rx example
running on an other node, so the link functionality can be tested.

The user can start direct transmission by pressing the PB0 button. 
Ceasing direct transmission can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6201A_EZR32LG Development Kit
Device: EZR32LG330F256R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6201a.demo.ezradio_pn9" label="SLWSTK6201A ezradio_pn9">
    <property key="blurb" value="EZRadio PN9 transmission example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <property key="boardCompatibility" value="brd4502b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6201A_EZR32LG/ezradio_pn9/bin/ezradio_pn9.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

The user can start PN9 (pseudorandom binary where N=9) transmission by pressing
the PB0 button. Ceasing the transmission can be issued by pressing the PB0 
button again. 
See the EzRadio documentation for more information on PN9 transmission.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6201A_EZR32LG Development Kit
Device: EZR32LG330F256R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6201a.demo.ezradio_simple_trx" label="SLWSTK6201A ezradio_simple_trx">
    <property key="blurb" value="EZRadio simple TRx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <property key="boardCompatibility" value="brd4502b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6201A_EZR32LG/ezradio_simple_trx/bin/ezradio_simple_trx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

The user can send one packet with the radio by pushing the PB0 button. The
data counter in the packet is incremented and shown on the LCD. If the
packet is received by the other device, the received data is shown on its
LCD. If the packet is received with CRC error this is printed as well.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6201A_EZR32LG Development Kit
Device: EZR32LG330F256R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6201a.demo.ezradio_trx_ack" label="SLWSTK6201A ezradio_trx_ack">
    <property key="blurb" value="EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <property key="boardCompatibility" value="brd4502b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6201A_EZR32LG/ezradio_trx_ack/bin/ezradio_trx_ack.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt; device.

This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

The user can send one packet with the radio by pushing the PB0 button. The
data counter in the packet is incremented and shown on the LCD. If the
packet is received by the other device, the received data is shown on its
LCD. If the packet is received with CRC error this is printed as well. In case
the data is received properly the receiver automatically sends back an
acknowledge packet. The transmitted and received 'ACK' packet is shown on 
the LCD as well.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6201A_EZR32LG Development Kit
Device: EZR32LG330F256R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6201a.demo.ezradio_unmodulated_carrier" label="SLWSTK6201A ezradio_unmodulated_carrier">
    <property key="blurb" value="EZRadio Unmodulated Carrier transmission example using the EZRadio device in"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <property key="boardCompatibility" value="brd4502b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6201A_EZR32LG/ezradio_unmodulated_carrier/bin/ezradio_unmodulated_carrier.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;the EZR32 device.

This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

The user can start CW transmission by pressing the PB0 button. 
Ceasing the transmission can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6201A_EZR32LG Development Kit
Device: EZR32LG330F256R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6201a.demo.humitemp" label="SLWSTK6201A humitemp">
    <property key="blurb" value="Humidity and temperature demo using the on-board si7021 sensor on the"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <property key="boardCompatibility" value="brd4502b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6201A_EZR32LG/humitemp/bin/humitemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;SLWSTK6201A_EZR32LG board.

This example project uses CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the
SLWSTK6201A_EZR32LG board.

Board:  Silicon Labs SLWSTK6201A_EZR32LG starter kit.
Device: EZR32LG330F256R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6201a.demo.rs232" label="SLWSTK6201A rs232">
    <property key="blurb" value="VCOM/USART/LEUART RS232 output example."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r55."/>
    <property key="boardCompatibility" value="brd4502b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6201A_EZR32LG/rs232/bin/rs232.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses CMSIS and EMLIB, to demonstrates the
use of LEUART, USART or VCOM  communication on the SLWSTK6201A_EZR32LG
development kit.

Serial port selection is done by defining any one of compiletime macros:
#define RETARGET_LEUART0
#define RETARGET_USART1
#define RETARGET_USART2
#define RETARGET_VCOM       (default)

If a USART is used set terminal configuration to 115200-8-N-1.
If the LEUART is used set terminal configuration to 9600-8-N-1.
For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.

Board:  Silicon Labs SLWSTK6201A_EZR32LG Development Kit
Device: EZR32LG330F256R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6202a.demo.blink" label="SLWSTK6202A blink">
    <property key="blurb" value="Blink example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <property key="boardCompatibility" value="brd4503a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6202A_EZR32LG/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use CMSIS and the EMLIB peripheral library to
demonstrate the use of the LED's on the starter kit. This example is intended as
a skeleton for new projects.

Board:  Silicon Labs SLWSTK6202A_EZR32LG Starter Kit
Device: EZR32LG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6202a.demo.clock" label="SLWSTK6202A clock">
    <property key="blurb" value="Analog and digital clock example using the Memory LCD on the SLWSTK6202A_EZR32LG."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <property key="boardCompatibility" value="brd4503a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6202A_EZR32LG/clock/bin/clock.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6202A_EZR32LG.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the SLWSTK6202A_EZR32LG kit.

The user can switch between analog and digital clock modes by pushing
the PB0 button.

The user can increment the minute count by pushing the PB1 button.
The minute count can be incremented by pushing the PB1 button for more
than 0.5 seconds.

The analog clock mode demonstrates the use of GLIB to draw hour, minute
and second pointers on the background which is a bitmap in flash memory.

The digital clock demonstrates the 16x20 font (including number characters
only) of the textdisplay driver.

Board:  Silicon Labs SLWSTK6202A_EZR32LG Development Kit
Device: EZR32LG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6202a.demo.ezradio_direct_rx" label="SLWSTK6202A ezradio_direct_rx">
    <property key="blurb" value="EZRadio Direct Rx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <property key="boardCompatibility" value="brd4503a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6202A_EZR32LG/ezradio_direct_rx/bin/ezradio_direct_rx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use this example together with the Direct Tx example
running on an other node, so the link functionality can be tested.

The user can start direct reception by pressing the PB0 button. 
Ceasing direct reception can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6202A_EZR32LG Development Kit
Device: EZR32LG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6202a.demo.ezradio_direct_tx" label="SLWSTK6202A ezradio_direct_tx">
    <property key="blurb" value="EZRadio Direct Tx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <property key="boardCompatibility" value="brd4503a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6202A_EZR32LG/ezradio_direct_tx/bin/ezradio_direct_tx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use this example together with the Direct Rx example
running on an other node, so the link functionality can be tested.

The user can start direct transmission by pressing the PB0 button. 
Ceasing direct transmission can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6202A_EZR32LG Development Kit
Device: EZR32LG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6202a.demo.ezradio_pn9" label="SLWSTK6202A ezradio_pn9">
    <property key="blurb" value="EZRadio PN9 transmission example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <property key="boardCompatibility" value="brd4503a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6202A_EZR32LG/ezradio_pn9/bin/ezradio_pn9.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

The user can start PN9 (pseudorandom binary where N=9) transmission by pressing
the PB0 button. Ceasing the transmission can be issued by pressing the PB0 
button again. 
See the EzRadio documentation for more information on PN9 transmission.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6202A_EZR32LG Development Kit
Device: EZR32LG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6202a.demo.ezradio_simple_trx" label="SLWSTK6202A ezradio_simple_trx">
    <property key="blurb" value="EZRadio simple TRx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <property key="boardCompatibility" value="brd4503a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6202A_EZR32LG/ezradio_simple_trx/bin/ezradio_simple_trx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

The user can send one packet with the radio by pushing the PB0 button. The
data counter in the packet is incremented and shown on the LCD. If the
packet is received by the other device, the received data is shown on its
LCD. If the packet is received with CRC error this is printed as well.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6202A_EZR32LG Development Kit
Device: EZR32LG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6202a.demo.ezradio_trx_ack" label="SLWSTK6202A ezradio_trx_ack">
    <property key="blurb" value="EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <property key="boardCompatibility" value="brd4503a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6202A_EZR32LG/ezradio_trx_ack/bin/ezradio_trx_ack.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt; device.

This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

The user can send one packet with the radio by pushing the PB0 button. The
data counter in the packet is incremented and shown on the LCD. If the
packet is received by the other device, the received data is shown on its
LCD. If the packet is received with CRC error this is printed as well. In case
the data is received properly the receiver automatically sends back an
acknowledge packet. The transmitted and received 'ACK' packet is shown on 
the LCD as well.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6202A_EZR32LG Development Kit
Device: EZR32LG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6202a.demo.ezradio_unmodulated_carrier" label="SLWSTK6202A ezradio_unmodulated_carrier">
    <property key="blurb" value="EZRadio Unmodulated Carrier transmission example using the EZRadio device in"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <property key="boardCompatibility" value="brd4503a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6202A_EZR32LG/ezradio_unmodulated_carrier/bin/ezradio_unmodulated_carrier.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;the EZR32 device.

This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

The user can start CW transmission by pressing the PB0 button. 
Ceasing the transmission can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6202A_EZR32LG Development Kit
Device: EZR32LG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6202a.demo.humitemp" label="SLWSTK6202A humitemp">
    <property key="blurb" value="Humidity and temperature demo using the on-board si7021 sensor on the"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <property key="boardCompatibility" value="brd4503a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6202A_EZR32LG/humitemp/bin/humitemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;SLWSTK6202A_EZR32LG board.

This example project uses CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the
SLWSTK6202A_EZR32LG board.

Board:  Silicon Labs SLWSTK6202A_EZR32LG starter kit.
Device: EZR32LG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6202a.demo.rangeTest" label="SLWSTK6202A rangeTest">
    <property key="blurb" value="Range Test example."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <property key="boardCompatibility" value="brd4503a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6202A_EZR32LG/rangeTest/bin/rangeTest.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Range Test example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
The Range Test application can be used to evaluate Silicon Laboratories radio
chips including performace, sensitivity or blocking measurements.

Range Test creates a radio link between two evaluation kits and sends 
predefined amount of packets from the transmitter side to the receiver.
The receiver calculates Packet Error Rate (PER) and Moving-Average (MA) of PER
based on the packets received. It also displays the current RSSI level in dBm
units and draws a chart of the RSSI historical data.
For long tests the transmitter can be set up to transmit continuously. It is not
necessary to start both sides synchronously.

*PLEASE NOTE* This example uses the radio extensively and could transmit at high
RF power levels that may result in higher peak current consumption. Due to the
peak current demand this example is not suited to run on a coin cell battery.
If standalone operation is required please consider the use of an external USB
connected battery or other power source.


Board:  Silicon Labs SLWSTK6202A_EZR32LG Starter Kit
Device: EZR32LG330F256R63&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6202a.demo.rs232" label="SLWSTK6202A rs232">
    <property key="blurb" value="VCOM/USART/LEUART RS232 output example."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*.ezr32lg330f256r63."/>
    <property key="boardCompatibility" value="brd4503a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6202A_EZR32LG/rs232/bin/rs232.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses CMSIS and EMLIB, to demonstrates the
use of LEUART, USART or VCOM  communication on the SLWSTK6202A_EZR32LG
development kit.

Serial port selection is done by defining any one of compiletime macros:
#define RETARGET_LEUART0
#define RETARGET_USART1
#define RETARGET_USART2
#define RETARGET_VCOM       (default)

If a USART is used set terminal configuration to 115200-8-N-1.
If the LEUART is used set terminal configuration to 9600-8-N-1.
For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.

Board:  Silicon Labs SLWSTK6202A_EZR32LG Development Kit
Device: EZR32LG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6220a.demo.blink" label="SLWSTK6220A blink">
    <property key="blurb" value="Blink example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <property key="boardCompatibility" value="brd4502c"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6220A_EZR32WG/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use CMSIS and the EMLIB peripheral library to
demonstrate the use of the LED's on the starter kit. This example is intended as
a skeleton for new projects.

Board:  Silicon Labs SLWSTK6220A_EZR32WG Starter Kit
Device: EZR32WG330F256R60
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6220a.demo.clock" label="SLWSTK6220A clock">
    <property key="blurb" value="Analog and digital clock example using the Memory LCD on the SLWSTK6220A_EZR32WG."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <property key="boardCompatibility" value="brd4502c"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6220A_EZR32WG/clock/bin/clock.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6220A_EZR32WG.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the SLWSTK6220A_EZR32WG kit.

The user can switch between analog and digital clock modes by pushing
the PB0 button.

The user can increment the minute count by pushing the PB1 button.
The minute count can be incremented by pushing the PB1 button for more
than 0.5 seconds.

The analog clock mode demonstrates the use of GLIB to draw hour, minute
and second pointers on the background which is a bitmap in flash memory.

The digital clock demonstrates the 16x20 font (including number characters
only) of the textdisplay driver.

Board:  Silicon Labs SLWSTK6220A_EZR32WG Development Kit
Device: EZR32WG330F256R60
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6220a.demo.ezradio_direct_rx" label="SLWSTK6220A ezradio_direct_rx">
    <property key="blurb" value="EZRadio Direct Rx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <property key="boardCompatibility" value="brd4502c"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6220A_EZR32WG/ezradio_direct_rx/bin/ezradio_direct_rx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use this example together with the Direct Tx example
running on an other node, so the link functionality can be tested.

The user can start direct reception by pressing the PB0 button. 
Ceasing direct reception can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6220A_EZR32WG Development Kit
Device: EZR32WG330F256R60
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6220a.demo.ezradio_direct_tx" label="SLWSTK6220A ezradio_direct_tx">
    <property key="blurb" value="EZRadio Direct Tx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <property key="boardCompatibility" value="brd4502c"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6220A_EZR32WG/ezradio_direct_tx/bin/ezradio_direct_tx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use this example together with the Direct Rx example
running on an other node, so the link functionality can be tested.

The user can start direct transmission by pressing the PB0 button. 
Ceasing direct transmission can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6220A_EZR32WG Development Kit
Device: EZR32WG330F256R60
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6220a.demo.ezradio_pn9" label="SLWSTK6220A ezradio_pn9">
    <property key="blurb" value="EZRadio PN9 transmission example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <property key="boardCompatibility" value="brd4502c"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6220A_EZR32WG/ezradio_pn9/bin/ezradio_pn9.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

The user can start PN9 (pseudorandom binary where N=9) transmission by pressing
the PB0 button. Ceasing the transmission can be issued by pressing the PB0 
button again. 
See the EzRadio documentation for more information on PN9 transmission.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6220A_EZR32WG Development Kit
Device: EZR32WG330F256R60
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6220a.demo.ezradio_simple_trx" label="SLWSTK6220A ezradio_simple_trx">
    <property key="blurb" value="EZRadio simple TRx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <property key="boardCompatibility" value="brd4502c"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6220A_EZR32WG/ezradio_simple_trx/bin/ezradio_simple_trx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

The user can send one packet with the radio by pushing the PB0 button. The
data counter in the packet is incremented and shown on the LCD. If the
packet is received by the other device, the received data is shown on its
LCD. If the packet is received with CRC error this is printed as well.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6220A_EZR32WG Development Kit
Device: EZR32WG330F256R60
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6220a.demo.ezradio_trx_ack" label="SLWSTK6220A ezradio_trx_ack">
    <property key="blurb" value="EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <property key="boardCompatibility" value="brd4502c"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6220A_EZR32WG/ezradio_trx_ack/bin/ezradio_trx_ack.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt; device.

This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

The user can send one packet with the radio by pushing the PB0 button. The
data counter in the packet is incremented and shown on the LCD. If the
packet is received by the other device, the received data is shown on its
LCD. If the packet is received with CRC error this is printed as well. In case
the data is received properly the receiver automatically sends back an
acknowledge packet. The transmitted and received 'ACK' packet is shown on 
the LCD as well.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6220A_EZR32WG Development Kit
Device: EZR32WG330F256R60
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6220a.demo.ezradio_unmodulated_carrier" label="SLWSTK6220A ezradio_unmodulated_carrier">
    <property key="blurb" value="EZRadio Unmodulated Carrier transmission example using the EZRadio device in"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <property key="boardCompatibility" value="brd4502c"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6220A_EZR32WG/ezradio_unmodulated_carrier/bin/ezradio_unmodulated_carrier.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;the EZR32 device.

This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

The user can start CW transmission by pressing the PB0 button. 
Ceasing the transmission can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6220A_EZR32WG Development Kit
Device: EZR32WG330F256R60
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6220a.demo.humitemp" label="SLWSTK6220A humitemp">
    <property key="blurb" value="Humidity and temperature demo using the on-board si7021 sensor on the"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <property key="boardCompatibility" value="brd4502c"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6220A_EZR32WG/humitemp/bin/humitemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;SLWSTK6220A_EZR32WG board.

This example project uses CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the
SLWSTK6220A_EZR32WG board.

Board:  Silicon Labs SLWSTK6220A_EZR32WG starter kit.
Device: EZR32WG330F256R60
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6220a.demo.rangeTest" label="SLWSTK6220A rangeTest">
    <property key="blurb" value="Range Test example."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <property key="boardCompatibility" value="brd4502c"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6220A_EZR32WG/rangeTest/bin/rangeTest.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Range Test example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
The Range Test application can be used to evaluate Silicon Laboratories radio
chips including performace, sensitivity or blocking measurements.

Range Test creates a radio link between two evaluation kits and sends 
predefined amount of packets from the transmitter side to the receiver.
The receiver calculates Packet Error Rate (PER) and Moving-Average (MA) of PER
based on the packets received. It also displays the current RSSI level in dBm
units and draws a chart of the RSSI historical data.
For long tests the transmitter can be set up to transmit continuously. It is not
necessary to start both sides synchronously.

*PLEASE NOTE* This example uses the radio extensively and could transmit at high
RF power levels that may result in higher peak current consumption. Due to the
peak current demand this example is not suited to run on a coin cell battery.
If standalone operation is required please consider the use of an external USB
connected battery or other power source.


Board:  Silicon Labs SLWSTK6220A_EZR32WG Starter Kit
Device: EZR32WG330F256R60&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6220a.demo.rs232" label="SLWSTK6220A rs232">
    <property key="blurb" value="VCOM/USART/LEUART RS232 output example."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*"/>
    <property key="boardCompatibility" value="brd4502c"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6220A_EZR32WG/rs232/bin/rs232.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses CMSIS and EMLIB, to demonstrates the
use of LEUART, USART or VCOM  communication on the SLWSTK6220A_EZR32WG
development kit.

Serial port selection is done by defining any one of compiletime macros:
#define RETARGET_LEUART0
#define RETARGET_USART1
#define RETARGET_USART2
#define RETARGET_VCOM       (default)

If a USART is used set terminal configuration to 115200-8-N-1.
If the LEUART is used set terminal configuration to 9600-8-N-1.
For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.

Board:  Silicon Labs SLWSTK6220A_EZR32WG Development Kit
Device: EZR32WG330F256R60
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6221a.demo.blink" label="SLWSTK6221A blink">
    <property key="blurb" value="Blink example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <property key="boardCompatibility" value="brd4502d"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6221A_EZR32WG/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use CMSIS and the EMLIB peripheral library to
demonstrate the use of the LED's on the starter kit. This example is intended as
a skeleton for new projects.

Board:  Silicon Labs SLWSTK6221A_EZR32WG Starter Kit
Device: EZR32WG330F256R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6221a.demo.clock" label="SLWSTK6221A clock">
    <property key="blurb" value="Analog and digital clock example using the Memory LCD on the SLWSTK6221A_EZR32WG."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <property key="boardCompatibility" value="brd4502d"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6221A_EZR32WG/clock/bin/clock.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6221A_EZR32WG.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the SLWSTK6221A_EZR32WG kit.

The user can switch between analog and digital clock modes by pushing
the PB0 button.

The user can increment the minute count by pushing the PB1 button.
The minute count can be incremented by pushing the PB1 button for more
than 0.5 seconds.

The analog clock mode demonstrates the use of GLIB to draw hour, minute
and second pointers on the background which is a bitmap in flash memory.

The digital clock demonstrates the 16x20 font (including number characters
only) of the textdisplay driver.

Board:  Silicon Labs SLWSTK6221A_EZR32WG Development Kit
Device: EZR32WG330F256R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6221a.demo.ezradio_direct_rx" label="SLWSTK6221A ezradio_direct_rx">
    <property key="blurb" value="EZRadio Direct Rx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <property key="boardCompatibility" value="brd4502d"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6221A_EZR32WG/ezradio_direct_rx/bin/ezradio_direct_rx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use this example together with the Direct Tx example
running on an other node, so the link functionality can be tested.

The user can start direct reception by pressing the PB0 button. 
Ceasing direct reception can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6221A_EZR32WG Development Kit
Device: EZR32WG330F256R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6221a.demo.ezradio_direct_tx" label="SLWSTK6221A ezradio_direct_tx">
    <property key="blurb" value="EZRadio Direct Tx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <property key="boardCompatibility" value="brd4502d"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6221A_EZR32WG/ezradio_direct_tx/bin/ezradio_direct_tx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use this example together with the Direct Rx example
running on an other node, so the link functionality can be tested.

The user can start direct transmission by pressing the PB0 button. 
Ceasing direct transmission can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6221A_EZR32WG Development Kit
Device: EZR32WG330F256R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6221a.demo.ezradio_pn9" label="SLWSTK6221A ezradio_pn9">
    <property key="blurb" value="EZRadio PN9 transmission example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <property key="boardCompatibility" value="brd4502d"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6221A_EZR32WG/ezradio_pn9/bin/ezradio_pn9.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

The user can start PN9 (pseudorandom binary where N=9) transmission by pressing
the PB0 button. Ceasing the transmission can be issued by pressing the PB0 
button again. 
See the EzRadio documentation for more information on PN9 transmission.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6221A_EZR32WG Development Kit
Device: EZR32WG330F256R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6221a.demo.ezradio_simple_trx" label="SLWSTK6221A ezradio_simple_trx">
    <property key="blurb" value="EZRadio simple TRx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <property key="boardCompatibility" value="brd4502d"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6221A_EZR32WG/ezradio_simple_trx/bin/ezradio_simple_trx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

The user can send one packet with the radio by pushing the PB0 button. The
data counter in the packet is incremented and shown on the LCD. If the
packet is received by the other device, the received data is shown on its
LCD. If the packet is received with CRC error this is printed as well.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6221A_EZR32WG Development Kit
Device: EZR32WG330F256R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6221a.demo.ezradio_trx_ack" label="SLWSTK6221A ezradio_trx_ack">
    <property key="blurb" value="EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <property key="boardCompatibility" value="brd4502d"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6221A_EZR32WG/ezradio_trx_ack/bin/ezradio_trx_ack.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt; device.

This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

The user can send one packet with the radio by pushing the PB0 button. The
data counter in the packet is incremented and shown on the LCD. If the
packet is received by the other device, the received data is shown on its
LCD. If the packet is received with CRC error this is printed as well. In case
the data is received properly the receiver automatically sends back an
acknowledge packet. The transmitted and received 'ACK' packet is shown on 
the LCD as well.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6221A_EZR32WG Development Kit
Device: EZR32WG330F256R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6221a.demo.ezradio_unmodulated_carrier" label="SLWSTK6221A ezradio_unmodulated_carrier">
    <property key="blurb" value="EZRadio Unmodulated Carrier transmission example using the EZRadio device in"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <property key="boardCompatibility" value="brd4502d"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6221A_EZR32WG/ezradio_unmodulated_carrier/bin/ezradio_unmodulated_carrier.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;the EZR32 device.

This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

The user can start CW transmission by pressing the PB0 button. 
Ceasing the transmission can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6221A_EZR32WG Development Kit
Device: EZR32WG330F256R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6221a.demo.humitemp" label="SLWSTK6221A humitemp">
    <property key="blurb" value="Humidity and temperature demo using the on-board si7021 sensor on the"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <property key="boardCompatibility" value="brd4502d"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6221A_EZR32WG/humitemp/bin/humitemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;SLWSTK6221A_EZR32WG board.

This example project uses CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the
SLWSTK6221A_EZR32WG board.

Board:  Silicon Labs SLWSTK6221A_EZR32WG starter kit.
Device: EZR32WG330F256R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6221a.demo.rs232" label="SLWSTK6221A rs232">
    <property key="blurb" value="VCOM/USART/LEUART RS232 output example."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r55."/>
    <property key="boardCompatibility" value="brd4502d"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6221A_EZR32WG/rs232/bin/rs232.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses CMSIS and EMLIB, to demonstrates the
use of LEUART, USART or VCOM  communication on the SLWSTK6221A_EZR32WG
development kit.

Serial port selection is done by defining any one of compiletime macros:
#define RETARGET_LEUART0
#define RETARGET_USART1
#define RETARGET_USART2
#define RETARGET_VCOM       (default)

If a USART is used set terminal configuration to 115200-8-N-1.
If the LEUART is used set terminal configuration to 9600-8-N-1.
For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.

Board:  Silicon Labs SLWSTK6221A_EZR32WG Development Kit
Device: EZR32WG330F256R55
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6222a.demo.blink" label="SLWSTK6222A blink">
    <property key="blurb" value="Blink example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4503b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6222A_EZR32WG/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use CMSIS and the EMLIB peripheral library to
demonstrate the use of the LED's on the starter kit. This example is intended as
a skeleton for new projects.

Board:  Silicon Labs SLWSTK6222A_EZR32WG Starter Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6222a.demo.clock" label="SLWSTK6222A clock">
    <property key="blurb" value="Analog and digital clock example using the Memory LCD on the SLWSTK6222A_EZR32WG."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4503b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6222A_EZR32WG/clock/bin/clock.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6222A_EZR32WG.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the SLWSTK6222A_EZR32WG kit.

The user can switch between analog and digital clock modes by pushing
the PB0 button.

The user can increment the minute count by pushing the PB1 button.
The minute count can be incremented by pushing the PB1 button for more
than 0.5 seconds.

The analog clock mode demonstrates the use of GLIB to draw hour, minute
and second pointers on the background which is a bitmap in flash memory.

The digital clock demonstrates the 16x20 font (including number characters
only) of the textdisplay driver.

Board:  Silicon Labs SLWSTK6222A_EZR32WG Development Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6222a.demo.ezradio_direct_rx" label="SLWSTK6222A ezradio_direct_rx">
    <property key="blurb" value="EZRadio Direct Rx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4503b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6222A_EZR32WG/ezradio_direct_rx/bin/ezradio_direct_rx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use this example together with the Direct Tx example
running on an other node, so the link functionality can be tested.

The user can start direct reception by pressing the PB0 button. 
Ceasing direct reception can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6222A_EZR32WG Development Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6222a.demo.ezradio_direct_tx" label="SLWSTK6222A ezradio_direct_tx">
    <property key="blurb" value="EZRadio Direct Tx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4503b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6222A_EZR32WG/ezradio_direct_tx/bin/ezradio_direct_tx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use this example together with the Direct Rx example
running on an other node, so the link functionality can be tested.

The user can start direct transmission by pressing the PB0 button. 
Ceasing direct transmission can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6222A_EZR32WG Development Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6222a.demo.ezradio_pn9" label="SLWSTK6222A ezradio_pn9">
    <property key="blurb" value="EZRadio PN9 transmission example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4503b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6222A_EZR32WG/ezradio_pn9/bin/ezradio_pn9.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

The user can start PN9 (pseudorandom binary where N=9) transmission by pressing
the PB0 button. Ceasing the transmission can be issued by pressing the PB0 
button again. 
See the EzRadio documentation for more information on PN9 transmission.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6222A_EZR32WG Development Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6222a.demo.ezradio_simple_trx" label="SLWSTK6222A ezradio_simple_trx">
    <property key="blurb" value="EZRadio simple TRx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4503b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6222A_EZR32WG/ezradio_simple_trx/bin/ezradio_simple_trx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

The user can send one packet with the radio by pushing the PB0 button. The
data counter in the packet is incremented and shown on the LCD. If the
packet is received by the other device, the received data is shown on its
LCD. If the packet is received with CRC error this is printed as well.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6222A_EZR32WG Development Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6222a.demo.ezradio_trx_ack" label="SLWSTK6222A ezradio_trx_ack">
    <property key="blurb" value="EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4503b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6222A_EZR32WG/ezradio_trx_ack/bin/ezradio_trx_ack.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt; device.

This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

The user can send one packet with the radio by pushing the PB0 button. The
data counter in the packet is incremented and shown on the LCD. If the
packet is received by the other device, the received data is shown on its
LCD. If the packet is received with CRC error this is printed as well. In case
the data is received properly the receiver automatically sends back an
acknowledge packet. The transmitted and received 'ACK' packet is shown on 
the LCD as well.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6222A_EZR32WG Development Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6222a.demo.ezradio_unmodulated_carrier" label="SLWSTK6222A ezradio_unmodulated_carrier">
    <property key="blurb" value="EZRadio Unmodulated Carrier transmission example using the EZRadio device in"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4503b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6222A_EZR32WG/ezradio_unmodulated_carrier/bin/ezradio_unmodulated_carrier.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;the EZR32 device.

This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

The user can start CW transmission by pressing the PB0 button. 
Ceasing the transmission can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6222A_EZR32WG Development Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6222a.demo.humitemp" label="SLWSTK6222A humitemp">
    <property key="blurb" value="Humidity and temperature demo using the on-board si7021 sensor on the"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4503b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6222A_EZR32WG/humitemp/bin/humitemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;SLWSTK6222A_EZR32WG board.

This example project uses CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the
SLWSTK6222A_EZR32WG board.

Board:  Silicon Labs SLWSTK6222A_EZR32WG starter kit.
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6222a.demo.rangeTest" label="SLWSTK6222A rangeTest">
    <property key="blurb" value="Range Test example."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4503b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6222A_EZR32WG/rangeTest/bin/rangeTest.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Range Test example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
The Range Test application can be used to evaluate Silicon Laboratories radio
chips including performace, sensitivity or blocking measurements.

Range Test creates a radio link between two evaluation kits and sends 
predefined amount of packets from the transmitter side to the receiver.
The receiver calculates Packet Error Rate (PER) and Moving-Average (MA) of PER
based on the packets received. It also displays the current RSSI level in dBm
units and draws a chart of the RSSI historical data.
For long tests the transmitter can be set up to transmit continuously. It is not
necessary to start both sides synchronously.

*PLEASE NOTE* This example uses the radio extensively and could transmit at high
RF power levels that may result in higher peak current consumption. Due to the
peak current demand this example is not suited to run on a coin cell battery.
If standalone operation is required please consider the use of an external USB
connected battery or other power source.


Board:  Silicon Labs SLWSTK6222A_EZR32WG Starter Kit
Device: EZR32WG330F256R63&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6222a.demo.rs232" label="SLWSTK6222A rs232">
    <property key="blurb" value="VCOM/USART/LEUART RS232 output example."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4503b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6222A_EZR32WG/rs232/bin/rs232.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses CMSIS and EMLIB, to demonstrates the
use of LEUART, USART or VCOM  communication on the SLWSTK6222A_EZR32WG
development kit.

Serial port selection is done by defining any one of compiletime macros:
#define RETARGET_LEUART0
#define RETARGET_USART1
#define RETARGET_USART2
#define RETARGET_VCOM       (default)

If a USART is used set terminal configuration to 115200-8-N-1.
If the LEUART is used set terminal configuration to 9600-8-N-1.
For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.

Board:  Silicon Labs SLWSTK6222A_EZR32WG Development Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6223a.demo.blink" label="SLWSTK6223A blink">
    <property key="blurb" value="Blink example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4505b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6223A_EZR32WG/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use CMSIS and the EMLIB peripheral library to
demonstrate the use of the LED's on the starter kit. This example is intended as
a skeleton for new projects.

Board:  Silicon Labs SLWSTK6223A_EZR32WG Starter Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6223a.demo.clock" label="SLWSTK6223A clock">
    <property key="blurb" value="Analog and digital clock example using the Memory LCD on the SLWSTK6223A_EZR32WG."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4505b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6223A_EZR32WG/clock/bin/clock.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6223A_EZR32WG.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the SLWSTK6223A_EZR32WG kit.

The user can switch between analog and digital clock modes by pushing
the PB0 button.

The user can increment the minute count by pushing the PB1 button.
The minute count can be incremented by pushing the PB1 button for more
than 0.5 seconds.

The analog clock mode demonstrates the use of GLIB to draw hour, minute
and second pointers on the background which is a bitmap in flash memory.

The digital clock demonstrates the 16x20 font (including number characters
only) of the textdisplay driver.

Board:  Silicon Labs SLWSTK6223A_EZR32WG Development Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6223a.demo.ezradio_direct_rx" label="SLWSTK6223A ezradio_direct_rx">
    <property key="blurb" value="EZRadio Direct Rx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4505b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6223A_EZR32WG/ezradio_direct_rx/bin/ezradio_direct_rx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use this example together with the Direct Tx example
running on an other node, so the link functionality can be tested.

The user can start direct reception by pressing the PB0 button. 
Ceasing direct reception can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6223A_EZR32WG Development Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6223a.demo.ezradio_direct_tx" label="SLWSTK6223A ezradio_direct_tx">
    <property key="blurb" value="EZRadio Direct Tx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4505b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6223A_EZR32WG/ezradio_direct_tx/bin/ezradio_direct_tx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use this example together with the Direct Rx example
running on an other node, so the link functionality can be tested.

The user can start direct transmission by pressing the PB0 button. 
Ceasing direct transmission can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6223A_EZR32WG Development Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6223a.demo.ezradio_pn9" label="SLWSTK6223A ezradio_pn9">
    <property key="blurb" value="EZRadio PN9 transmission example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4505b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6223A_EZR32WG/ezradio_pn9/bin/ezradio_pn9.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

The user can start PN9 (pseudorandom binary where N=9) transmission by pressing
the PB0 button. Ceasing the transmission can be issued by pressing the PB0 
button again. 
See the EzRadio documentation for more information on PN9 transmission.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6223A_EZR32WG Development Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6223a.demo.ezradio_simple_trx" label="SLWSTK6223A ezradio_simple_trx">
    <property key="blurb" value="EZRadio simple TRx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4505b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6223A_EZR32WG/ezradio_simple_trx/bin/ezradio_simple_trx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

The user can send one packet with the radio by pushing the PB0 button. The
data counter in the packet is incremented and shown on the LCD. If the
packet is received by the other device, the received data is shown on its
LCD. If the packet is received with CRC error this is printed as well.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6223A_EZR32WG Development Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6223a.demo.ezradio_trx_ack" label="SLWSTK6223A ezradio_trx_ack">
    <property key="blurb" value="EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4505b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6223A_EZR32WG/ezradio_trx_ack/bin/ezradio_trx_ack.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt; device.

This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

The user can send one packet with the radio by pushing the PB0 button. The
data counter in the packet is incremented and shown on the LCD. If the
packet is received by the other device, the received data is shown on its
LCD. If the packet is received with CRC error this is printed as well. In case
the data is received properly the receiver automatically sends back an
acknowledge packet. The transmitted and received 'ACK' packet is shown on 
the LCD as well.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6223A_EZR32WG Development Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6223a.demo.ezradio_unmodulated_carrier" label="SLWSTK6223A ezradio_unmodulated_carrier">
    <property key="blurb" value="EZRadio Unmodulated Carrier transmission example using the EZRadio device in"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4505b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6223A_EZR32WG/ezradio_unmodulated_carrier/bin/ezradio_unmodulated_carrier.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;the EZR32 device.

This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

The user can start CW transmission by pressing the PB0 button. 
Ceasing the transmission can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6223A_EZR32WG Development Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6223a.demo.humitemp" label="SLWSTK6223A humitemp">
    <property key="blurb" value="Humidity and temperature demo using the on-board si7021 sensor on the"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4505b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6223A_EZR32WG/humitemp/bin/humitemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;SLWSTK6223A_EZR32WG board.

This example project uses CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the
SLWSTK6223A_EZR32WG board.

Board:  Silicon Labs SLWSTK6223A_EZR32WG starter kit.
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6223a.demo.rangeTest" label="SLWSTK6223A rangeTest">
    <property key="blurb" value="Range Test example."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4505b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6223A_EZR32WG/rangeTest/bin/rangeTest.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Range Test example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
The Range Test application can be used to evaluate Silicon Laboratories radio
chips including performace, sensitivity or blocking measurements.

Range Test creates a radio link between two evaluation kits and sends 
predefined amount of packets from the transmitter side to the receiver.
The receiver calculates Packet Error Rate (PER) and Moving-Average (MA) of PER
based on the packets received. It also displays the current RSSI level in dBm
units and draws a chart of the RSSI historical data.
For long tests the transmitter can be set up to transmit continuously. It is not
necessary to start both sides synchronously.

*PLEASE NOTE* This example uses the radio extensively and could transmit at high
RF power levels that may result in higher peak current consumption. Due to the
peak current demand this example is not suited to run on a coin cell battery.
If standalone operation is required please consider the use of an external USB
connected battery or other power source.


Board:  Silicon Labs SLWSTK6223A_EZR32WG Starter Kit
Device: EZR32WG330F256R63&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6223a.demo.rs232" label="SLWSTK6223A rs232">
    <property key="blurb" value="VCOM/USART/LEUART RS232 output example."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4505b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6223A_EZR32WG/rs232/bin/rs232.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses CMSIS and EMLIB, to demonstrates the
use of LEUART, USART or VCOM  communication on the SLWSTK6223A_EZR32WG
development kit.

Serial port selection is done by defining any one of compiletime macros:
#define RETARGET_LEUART0
#define RETARGET_USART1
#define RETARGET_USART2
#define RETARGET_VCOM       (default)

If a USART is used set terminal configuration to 115200-8-N-1.
If the LEUART is used set terminal configuration to 9600-8-N-1.
For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.

Board:  Silicon Labs SLWSTK6223A_EZR32WG Development Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6224a.demo.blink" label="SLWSTK6224A blink">
    <property key="blurb" value="Blink example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4504b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6224A_EZR32WG/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use CMSIS and the EMLIB peripheral library to
demonstrate the use of the LED's on the starter kit. This example is intended as
a skeleton for new projects.

Board:  Silicon Labs SLWSTK6224A_EZR32WG Starter Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6224a.demo.clock" label="SLWSTK6224A clock">
    <property key="blurb" value="Analog and digital clock example using the Memory LCD on the SLWSTK6224A_EZR32WG."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4504b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6224A_EZR32WG/clock/bin/clock.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6224A_EZR32WG.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the SLWSTK6224A_EZR32WG kit.

The user can switch between analog and digital clock modes by pushing
the PB0 button.

The user can increment the minute count by pushing the PB1 button.
The minute count can be incremented by pushing the PB1 button for more
than 0.5 seconds.

The analog clock mode demonstrates the use of GLIB to draw hour, minute
and second pointers on the background which is a bitmap in flash memory.

The digital clock demonstrates the 16x20 font (including number characters
only) of the textdisplay driver.

Board:  Silicon Labs SLWSTK6224A_EZR32WG Development Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6224a.demo.ezradio_direct_rx" label="SLWSTK6224A ezradio_direct_rx">
    <property key="blurb" value="EZRadio Direct Rx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4504b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6224A_EZR32WG/ezradio_direct_rx/bin/ezradio_direct_rx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use this example together with the Direct Tx example
running on an other node, so the link functionality can be tested.

The user can start direct reception by pressing the PB0 button. 
Ceasing direct reception can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6224A_EZR32WG Development Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6224a.demo.ezradio_direct_tx" label="SLWSTK6224A ezradio_direct_tx">
    <property key="blurb" value="EZRadio Direct Tx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4504b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6224A_EZR32WG/ezradio_direct_tx/bin/ezradio_direct_tx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use this example together with the Direct Rx example
running on an other node, so the link functionality can be tested.

The user can start direct transmission by pressing the PB0 button. 
Ceasing direct transmission can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6224A_EZR32WG Development Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6224a.demo.ezradio_pn9" label="SLWSTK6224A ezradio_pn9">
    <property key="blurb" value="EZRadio PN9 transmission example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4504b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6224A_EZR32WG/ezradio_pn9/bin/ezradio_pn9.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

The user can start PN9 (pseudorandom binary where N=9) transmission by pressing
the PB0 button. Ceasing the transmission can be issued by pressing the PB0 
button again. 
See the EzRadio documentation for more information on PN9 transmission.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6224A_EZR32WG Development Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6224a.demo.ezradio_simple_trx" label="SLWSTK6224A ezradio_simple_trx">
    <property key="blurb" value="EZRadio simple TRx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4504b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6224A_EZR32WG/ezradio_simple_trx/bin/ezradio_simple_trx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

The user can send one packet with the radio by pushing the PB0 button. The
data counter in the packet is incremented and shown on the LCD. If the
packet is received by the other device, the received data is shown on its
LCD. If the packet is received with CRC error this is printed as well.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6224A_EZR32WG Development Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6224a.demo.ezradio_trx_ack" label="SLWSTK6224A ezradio_trx_ack">
    <property key="blurb" value="EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4504b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6224A_EZR32WG/ezradio_trx_ack/bin/ezradio_trx_ack.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt; device.

This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

The user can send one packet with the radio by pushing the PB0 button. The
data counter in the packet is incremented and shown on the LCD. If the
packet is received by the other device, the received data is shown on its
LCD. If the packet is received with CRC error this is printed as well. In case
the data is received properly the receiver automatically sends back an
acknowledge packet. The transmitted and received 'ACK' packet is shown on 
the LCD as well.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6224A_EZR32WG Development Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6224a.demo.ezradio_unmodulated_carrier" label="SLWSTK6224A ezradio_unmodulated_carrier">
    <property key="blurb" value="EZRadio Unmodulated Carrier transmission example using the EZRadio device in"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4504b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6224A_EZR32WG/ezradio_unmodulated_carrier/bin/ezradio_unmodulated_carrier.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;the EZR32 device.

This example project uses the EZR32WG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

The user can start CW transmission by pressing the PB0 button. 
Ceasing the transmission can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6224A_EZR32WG Development Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6224a.demo.humitemp" label="SLWSTK6224A humitemp">
    <property key="blurb" value="Humidity and temperature demo using the on-board si7021 sensor on the"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4504b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6224A_EZR32WG/humitemp/bin/humitemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;SLWSTK6224A_EZR32WG board.

This example project uses CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the
SLWSTK6224A_EZR32WG board.

Board:  Silicon Labs SLWSTK6224A_EZR32WG starter kit.
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6224a.demo.rangeTest" label="SLWSTK6224A rangeTest">
    <property key="blurb" value="Range Test example."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4504b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6224A_EZR32WG/rangeTest/bin/rangeTest.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Range Test example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
The Range Test application can be used to evaluate Silicon Laboratories radio
chips including performace, sensitivity or blocking measurements.

Range Test creates a radio link between two evaluation kits and sends 
predefined amount of packets from the transmitter side to the receiver.
The receiver calculates Packet Error Rate (PER) and Moving-Average (MA) of PER
based on the packets received. It also displays the current RSSI level in dBm
units and draws a chart of the RSSI historical data.
For long tests the transmitter can be set up to transmit continuously. It is not
necessary to start both sides synchronously.

*PLEASE NOTE* This example uses the radio extensively and could transmit at high
RF power levels that may result in higher peak current consumption. Due to the
peak current demand this example is not suited to run on a coin cell battery.
If standalone operation is required please consider the use of an external USB
connected battery or other power source.


Board:  Silicon Labs SLWSTK6224A_EZR32WG Starter Kit
Device: EZR32WG330F256R63&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32wg.slwstk6224a.demo.rs232" label="SLWSTK6224A rs232">
    <property key="blurb" value="VCOM/USART/LEUART RS232 output example."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.wg.*.ezr32wg330f256r63."/>
    <property key="boardCompatibility" value="brd4504b"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6224A_EZR32WG/rs232/bin/rs232.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses CMSIS and EMLIB, to demonstrates the
use of LEUART, USART or VCOM  communication on the SLWSTK6224A_EZR32WG
development kit.

Serial port selection is done by defining any one of compiletime macros:
#define RETARGET_LEUART0
#define RETARGET_USART1
#define RETARGET_USART2
#define RETARGET_VCOM       (default)

If a USART is used set terminal configuration to 115200-8-N-1.
If the LEUART is used set terminal configuration to 9600-8-N-1.
For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.

Board:  Silicon Labs SLWSTK6224A_EZR32WG Development Kit
Device: EZR32WG330F256R63
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.blink" label="DK3750 blink">
    <property key="blurb" value="Blink example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library
to demonstrate the use of the LED on the EFM32GG-DK3750 development kit.
This example is intended as a skeleton for new projects.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.eeprom" label="DK3750 eeprom">
    <property key="blurb" value="I2C eeprom example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/eeprom/bin/eeprom.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;I2C eeprom example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB including DK BSP
(board support package) and demonstrates the use of the I2C bus
accessing the EEPROM on the DK.

The first 3 bytes of the EEPROM is displayed on the TFT screen (this
will normally be FFFFFF first time.) Since stored in EEPROM, the data
survives resets and power cycles.

The following usage is possible:

- Joystick up/down will increment/decrement the first byte (Byte0) in
  the EEPROM. Byte1 is then set to Byte0+1, and Byte2 is set to Byte1+1.
- Press SW4 button to reset 3 first bytes to 0xFF.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.emode" label="DK3750 emode">
    <property key="blurb" value="Energy Mode 0-4 example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/emode/bin/emode.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Energy Mode 0-4 example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project for the EFM32GG-DK3750 development kit, illustrates the
various energy saving modes of the EFM32GG990F1024.

Use joystick Up and Down to select the demo, after pressing the kit AEM 
button to enable the display to be driven from the Giant Gecko.

When the correct demo has been selected, press PB1 to activate it. 
After this, you need to use the kit's AEM button again to go back to the
energy mesaurement display. A new press on the AEM button will not bring
back the original screen, as the Giant Gecko will be in a sleep mode. You
need to restart to test another demo.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.fatcon" label="DK3750 fatcon">
    <property key="blurb" value="FAT File System console example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/fatcon/bin/fatcon.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;FAT File System console example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library
to demonstrate SPI-access to the Micro-SD card on the EFM32GG-DK3750
development kit. The application gives a small &quot;console&quot; on the serial
port which can be used to view and list contents of the file system.
Serial configuration 115200-8-N-1 is used.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.freertos_blink" label="DK3750 freertos_blink">
    <property key="blurb" value="FreeRTOS - Blink example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/freertos_blink/bin/freertos_blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;FreeRTOS - Blink example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board. 
It also shows how to use idle with different energy saving modes with or without ticless mode( from EM1 to EM3 - configured in FreeRTOSConfig.h file).
This example is intended as a skeleton for new projects using FreeRTOS.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.graphxy" label="DK3750 graphxy">
    <property key="blurb" value="emWin example - XY Graph demonstration."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/graphxy/bin/graphxy.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;emWin example - XY Graph demonstration.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the emWin library.

Control using touch panel or joystick.
On application startup there is possibility to
perform touch panel calibration.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.graphxy_mm" label="DK3750 graphxy_mm">
    <property key="blurb" value="emWin example - XY Graph demonstration - energy efficient."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/graphxy_mm/bin/graphxy_mm.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;emWin example - XY Graph demonstration - energy efficient.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the emWin library maintaining
low power consumption.

TFT driver is controlled in so called &quot;Memory Map&quot;
configuration, where internal RAM of TFT controller 
is used. There is no additional framebuffer needed
so this example could be run in small RAM footprint 
systems. The code fits 128kB flash and uses less 
than 32kB RAM.

In idle mode (where no user interaction is required)
EM2 mode is enabled, allowing reducing power consuption
down to ~4uA.

Control using touch panel or joystick.
On application startup there is possibility to
perform touch panel calibration.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.guidemo" label="DK3750 guidemo">
    <property key="blurb" value="emWin example - show gui functionality"/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/guidemo/bin/guidemo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;emWin example - show gui functionality&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the emWin library.

Simple application showing different visual effects
which could be achieved by means of emWin

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.guidemo_mm" label="DK3750 guidemo_mm">
    <property key="blurb" value="emWin example - show gui functionality - energy efficient."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/guidemo_mm/bin/guidemo_mm.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;emWin example - show gui functionality - energy efficient.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the emWin library maintaining
low power consumption.

TFT driver is controlled in so called &quot;Memory Map&quot;
configuration, where internal RAM of TFT controller 
is used. There is no additional framebuffer needed 
so this example could be run in small RAM footprint 
systems.

Simple application showing different visual effects
which could be achieved by means of emWin.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.hardfault" label="DK3750 hardfault">
    <property key="blurb" value="Hardfault handler example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/hardfault/bin/hardfault.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Hardfault handler example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project demonstrates the use of the hard fault handler, and
how to install and use another HardFault exception handler to provide
useful information when these types of errors occurs.
The information is transmitted on the kit UART port, serial configuration
115200-8-N-1 is used.

Three function calls for triggering software errors to be trapped is
provided, comment them in and out to select between them.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.inttemp" label="DK3750 inttemp">
    <property key="blurb" value="Internal temperature sensor example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/inttemp/bin/inttemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB including DK BSP
(board support package) and demonstrates the use of the internal
temperature sensor and ADC on the EFM32.

Note: EFM32 devices with production ID lower than 18 may measure inaccurate
temperatures due to a sensor calibration bug.

The following configuration is possible:

- Joystick push toggles between Fahrenheit and Celsius display mode.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.joystick" label="DK3750 joystick">
    <property key="blurb" value="Kit joystick control example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/joystick/bin/joystick.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Kit joystick control example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library to
demonstrate the joystick control API of the development kit. Please note that
you need to configure the AEM-state to &quot;EFM&quot; to be able to operate this
example. The example also shows how to enable and use a GPIO interrupt.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.leuart" label="DK3750 leuart">
    <property key="blurb" value="LEUART/DMA in Energy mode2 output example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/leuart/bin/leuart.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project reads and sends the data back to terminal using LEUART
while staying in EM2.

It uses the EFM32 CMSIS and EMLIB, to demonstrate the
use of LEUART communication using DMA under the EM2 on the 
EFM32GG_DK3750 development kit.

The LEUART is configured to be used with DMA under EM2.
The terminal configuration is 9600-8-N-1.
The DMA is configured to handle read and write data bytes from LEUART under EM2.

Testing:
1. Use the LEUART serial port header to connect the LEUART to your PC.
2. Configure terminal to 9600-8-N-1.
3. Enter characters from your keyboard and see if you receive the echo on the terminal.
4. Check the average current consumption is equal to EM2 on Energy Profiler.

Board:  Silicon Labs EFM32GG_DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.life" label="DK3750 life">
    <property key="blurb" value="Conway's game of life, TFT direct drive example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/life/bin/life.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Conway's game of life, TFT direct drive example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrate driving the EFM32GG_DK37850 kit's TFT-display 
from the EFM32 Giant Gecko.

This example is driving the display in &quot;direct drive&quot; (or mode generic in 
SSD2119 terms). Using this mode, the framebuffer resides in the external
PSRAM memory of the development kit. This can be accessed directly to 
modify the screen contents.

This demo demonstrates the use of frame buffer control, and implements
Conway's Game of Life, with triple buffering support. Triple buffering
works the following way
  
 We have 3 frame buffers, A, B and C.

 Buffer A, is currently being displayed on the screen
 Buffer B, is being updated with graphics

 When B is finished - B is set to be displayed on the next frame update
                      C is set to be updated with new graphics

 When C is finished - C is set to be displayed on the next frame update 
                      A is set to be updated with new graphics

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.lines" label="DK3750 lines">
    <property key="blurb" value="Lines TFT Direct Drive example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/lines/bin/lines.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Lines TFT Direct Drive example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrate driving the EFM32GG_DK37850 kit's TFT-display
from the EFM32 Giant Gecko in &quot;direct drive&quot; (or mode generic in
SSD2119 terms). Using this mode, the framebuffer resides in the external
PSRAM memory of the development kit. This can be accessed directly to
modify the screen contents.

In this mode, the display is configured for having 16-bits per pixel,
RGB with 5-6-5 bits color components of each. The framebuffer is located
at EBI bank 2, offset address 0x88000000. This demo simply draws some
alternating, coloured lines over the entire display.

WARNING:
SD2119 driver and GLIB graphics library are not intended for production 
purposes, and are included here to illustrate TFT display driving only.

These components are subject to changes in API/usage and there will be 
no effort to keep compatibility, or to support this software in any way.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.mandel" label="DK3750 mandel">
    <property key="blurb" value="Mandelbrot image zoom example, using TFT direct drive."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/mandel/bin/mandel.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Mandelbrot image zoom example, using TFT direct drive.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrate driving the EFM32GG_DK37850 kit's TFT-display 
from the EFM32 Giant Gecko.

The example is driving the display in &quot;direct drive&quot; (or mode generic in 
SSD2119 terms). Using this mode, the framebuffer resides in the external
PSRAM memory of the development kit. This can be accessed directly to 
modify the screen contents.

This example makes a simple mandelbrot fractal zoomer, using up most 
of the external 4MB PSRAM to store the various images, where the screens
are being flipped around in the interrupt routine.

WARNING:
SD2119 driver and GLIB graphics library are not intended for production 
purposes, and are included here to illustrate TFT display driving only.
These components are subject to changes in API/usage and there will be 
no effort to keep compatibility, or to support this software in any way.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.norflash" label="DK3750 norflash">
    <property key="blurb" value="Norflash example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/norflash/bin/norflash.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Norflash example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrates use of the NORFLASH driver.

Connect a terminal to the serialport of the DK (115200-N-8-1).
Operations on the flash are initiated by issuing commands on the terminal.
Command &quot;h&quot; will print a help screen on the terminal :

    Available commands:
        fi        : Show flash information
        h         : Show this help
        dump n    : Show first 16 bytes of sector n
        dumps n   : Show entire sector n content
        blc n     : Blankcheck sector n
        bld       : Blankcheck entire device
        erase n   : Erase sector n
        eraseall  : Erase entire device
        prog n    : Program first 16 bytes of sector n with byte pattern
        exec n    : Execute &quot;blink&quot; from sector n
        misc      : Test misc. NORFLASH API functions
        rspeed    : Measure flash read speed

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.peripherals" label="DK3750 peripherals">
    <property key="blurb" value="Peripheral control example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/peripherals/bin/peripherals.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Peripheral control example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library to
demonstrate how to enable the access to various on-board peripherals. To
reduce leakage current, the EFM32GG-DK3750 board has several analog switches, and to
enable extended functionality there are multiplexers which need to be
configured correctly for most of the kit peripherals.

The on-board LEDs will light up according to the configured state of the
peripherals.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.powertest" label="DK3750 powertest">
    <property key="blurb" value="Power test example, running demonstration of energy modes."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/powertest/bin/powertest.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library
to demonstrate the use of the various Energy Modes available on the
EFM32GG990F1024. When running this example, the Energy Profiler tool
in Simplicity Studio can be used to show the power consumption of each
energy mode.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.preamp" label="DK3750 preamp">
    <property key="blurb" value="Pre-amplifier example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/preamp/bin/preamp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Pre-amplifier example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including DK BSP (board 
support package) and demonstrates the use of the ADC/DAC/DMA/PRS/TIMER
to implement a very simple pre-amplifier.

- Connect an audio source to the audio in connector
  on the DVK, for instance an MP3 player.
- Connect an active loudspeaker with built-in amplifier
  to the audio out connector on the DVK.

WARNING:
--------
Do not attach or use headphones with this example. Use small
loadspeakers with built in amplification, ensuring volume is at an
acceptable level. Exposure to loud noises from any source for extended
periods of time may temporarily or permanently affect your hearing. The
louder the volume sound level, the less time is required before your
hearing could be affected. Hearing damage from loud noise is sometimes
undetectable at first and can have a cumulative effect.


The input signal is converted to digital and level
adjusted by the EFM32 core before being converted back
to analog.

The output volume level is adjusted with kit pushbuttons PB1 and PB2.
Output level is indicated by the 14 leftmost user LEDs.

The example will clip the output signal if exceeding predefined
level. This may occur due to too high input signal and/or to high
volume setting. Clipping is indicated by the rightmost user LED.

Push the AEM button on the kit until &quot;EFM&quot; shows in the upper right
corner of the TFT display to activate PB1 and PB2 pushbuttons.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.radialmenu" label="DK3750 radialmenu">
    <property key="blurb" value="emWin example - radial menu demonstartion."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/radialmenu/bin/radialmenu.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;emWin example - radial menu demonstartion.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the emWin library.

Control using touch panel or joystick.
If touch panel misaligned, there is possibility to
perform touch panel calibration, just press PB4.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.realtime" label="DK3750 realtime">
    <property key="blurb" value="Segger emWin example - dynamic graph update."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/realtime/bin/realtime.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Segger emWin example - dynamic graph update.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the emWin library from Segger. emWin 
is an efficient, modular, processor- and LCD controller-independent graphical 
user interface (GUI) library.

In this example, the user can perform touch panel calibration and then
perform touch panel operations to configure the GUI while graphs are 
continuously updated.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.reversi" label="DK3750 reversi">
    <property key="blurb" value="emWin example - reversi game."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/reversi/bin/reversi.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;emWin example - reversi game.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the emWin library.

Control using touch pad or joystick. If there
is misalignment when using touch pad please
do calibration select from menu:
Options-&gt;Touch Panel calibration.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.reversi_mm" label="DK3750 reversi_mm">
    <property key="blurb" value="emWin example - reversi game - energy efficient."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/reversi_mm/bin/reversi_mm.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;emWin example - reversi game - energy efficient.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the emWin library maintaining
low power consumption.

TFT driver is controlled in so called &quot;Memory Map&quot;
configuration, where internal RAM of TFT controller 
is used. There is no additional framebuffer needed
so this example could be run in small RAM footprint 
systems. The code fits 128kB flash and uses less 
than 32kB RAM.

In idle mode (where no user interaction is required)
EM2 mode is enabled, allowing reducing power consumption
down to 4uA.

The game is controlled using touch pad or joystick. 
If there is misalignment when using touch pad please
do calibration - from menu select:
Options-&gt;Touch Panel calibration.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.rs232" label="DK3750 rs232">
    <property key="blurb" value="RS232/UART output example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/rs232/bin/rs232.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;RS232/UART output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB, to demonstrates the
use of UART and LEUART communication on the EFM32GG-DK3750 development kit.

For the default UART communication, serial configuration 115200-8-N-1 is used.
If LEUART mode is configured by defining &quot;RETARGET_LEUART1&quot; as a build option,
terminal configuration is 9600-8-N-1.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.scroller" label="DK3750 scroller">
    <property key="blurb" value="Horizontal single pixel text scroller example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/scroller/bin/scroller.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Horizontal single pixel text scroller example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrate driving the EFM32GG_DK3750 kit's TFT-display
from the EFM32 Giant Gecko.

This example is driving the display in &quot;direct drive&quot; (or mode generic in
SSD2119 terms). Using this mode, the framebuffer resides in the external
PSRAM memory of the development kit. This can be accessed directly to
modify the screen contents.

This demo demonstrates the use of frame buffer control, and implements
a horizontal scroller and shows the hardware assisted masking and
blending capabilities.

The horizontal scroller is implemented by using a large framebuffer,
which is shifted right one pixel for each horizontal scan line, using
the horizontal sync interrupt, and frame base sync trigger  capability
of the Giant Gecko devices.

The masking and blending is hardware assisted. The geckos being drawn
on screen are using the same software procedure, only adding mask and
enable configurations.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.slideshow" label="DK3750 slideshow">
    <property key="blurb" value="Slideshow example using microSD."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/slideshow/bin/slideshow.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Slideshow example using microSD.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example uses the FatFS library for accssing a filesystem on a 
microSD card. It will loop through the files present on the card. 
BMP files with a resolution less than the resolution of the screen
(320x240) will be displayed on the TFT.

The demo has two modes of operation. If a file called &quot;files.txt&quot; is 
present on the root of the microSD card, this file will be read. The
BMP files will then be displayed in the order they are listed in the
file.

If this file is not present, all files on the root of tile SD card is 
looped through and displayed. If the BMP decoder cannot display a 
certain file, an error message is displayed.


WARNING:
SD2119 driver and GLIB graphics library are not intended for production 
purposes, and are included here to illustrate TFT display driving only.
This components are subject to changes in API/usage and there will be 
no effort to keep compatibility, or to support this software in any way.

NOTE:
This example is too large to be built with IDEs with 32KB size limits.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.temperature" label="DK3750 temperature">
    <property key="blurb" value="I2C temperature sensor example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/temperature/bin/temperature.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;I2C temperature sensor example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB including DK BSP
(board support package) to demonstrate the use of the I2C bus and 
the temperature sensor on the DK.

Note: On some DK boards the temperature sensor is placed too close 
to components that generate significant heat. The sensor may therefore
read a temperature 2-4 degrees Celsius higher than the ambient temperature.

The following configuration is possible:

- Joystick push toggles between Fahrenheit and Celsius display mode.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.tft" label="DK3750 tft">
    <property key="blurb" value="TFT Addressed map coloured blocks example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/tft/bin/tft.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;TFT Addressed map coloured blocks example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the kit's TFT-display from the EFM32 Giant Gecko.

This example is driving the display in what is called &quot;address mapped
mode&quot; (or mode 8080). Using this mode, the framebuffer resides in the
memory of the SSD2119 controller chip.

WARNING:
SD2119 driver and GLIB graphics library are not intended for production
purposes, and are included here to illustrate TFT display driving only.

These components are subject to changes in API/usage and there will be
no effort to keep compatibility, or to support this software in any way.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.tftprintf" label="DK3750 tftprintf">
    <property key="blurb" value="Printf output on TFT-LCD."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/tftprintf/bin/tftprintf.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Printf output on TFT-LCD.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the kit's TFT-display from the EFM32 Giant Gecko. In this case the
display is used as output from a regular printf in the application, as
an alternative to the RS232 port.

This example is driving the display in what is called &quot;address mapped
mode&quot; (or mode 8080). Using this mode, the framebuffer resides in the
memory of the SSD2119 controller chip of the URT TFT-LCD display.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.touch" label="DK3750 touch">
    <property key="blurb" value="Touchscreen example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/touch/bin/touch.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Touchscreen example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrate use of the resistive touchscreen on the
EFM32GG_DK3750 kit's TFT-display.

Touchscreen X and Y positions are obtained using the ADC. Two ADC readouts
are performed, one for X position and one for Y position.

The example allows freehand drawing and calibration. After starting the example
make sure that the EFM32 control the display (use AEM button to toggle).

The calibrations algorithm used is from an article in EETimes 5/31/2002 by
Carlos E. Vidales.

Initial touchscreen calibration is &quot;off&quot; on purpose to demonstrate that
calibration takes effect.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.ucos2_port" label="DK3750 ucos2">
    <property key="blurb" value="uC/OS-II RTOS on EFM32 using example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/ucos2_port/bin/ucos2.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;uC/OS-II RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This is a port of the uC/OS-II RTOS from Micrium Inc, http://www.micrium.com

The port has been adapted by Silicon Labs for use with our Development
Kit. It requires the standard EFM32 CMSIS package (including EMLIB).

The example has three tasks:
 - Task1: LED blink task
 - Task2: Receives characters from serial port and posts message to Task3
 - Task3: Receives message from Task2 and writes it on TFT display

Standard output is redirected to TFT display and standard input is UART1.

uC/OS-II is provided in source form for FREE evaluation, for educational use
or for peaceful research.

If you plan on using uC/OS-II in a commercial product you need to contact
Micrium to properly license its use in your product. We provide ALL the
source code for your convenience and to help you experience uC/OS-II.
The fact that the source is provided does NOT mean that you can use it without
paying a licensing fee.

For commercial use, contact Micrium, http://www.micrium.com for details.

Board:  Silicon Labs EFM32GG_DK3750 Starter Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.usbdcdc" label="DK3750 usbdcdc">
    <property key="blurb" value="USB CDC virtual COM port example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/usbdcdc/bin/usbdcdc.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB CDC virtual COM port example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
and implements an USB CDC based virtual COM port.

UART1 on the DK is used as the physical COM port.
Any data sent to the virtual CDC COM port is transmitted on UART1.
Any data received on UART1 is transmitted to the virtual port.

When connecting the mcu plugin boards USB port to a Windows host PC,
the new hardware &quot;Wizard&quot; may or may not prompt you to provide a driver
installation file (.inf file) depending on your Windows version.

Manually direct Windows to look for drivers in the directory where you have
unpacked your copy of the Silabs-CDC_Install.zip driver file.
This can be done with the new device &quot;Wizard&quot; which might pop up after device
insertion, or you can open &quot;Device Manager&quot;, left click on the new device and
select &quot;Update Driver Software...&quot;.

Some versions of Windows wont allow you to install unsigned drivers. If you
suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.
Win7:
Repeatedly push F8 during boot until the boot menu appears.
Select the &quot;Disable Driver Signature Enforcement&quot; option.
Win10:
Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.
When computer has restarted into the options menu, select:
Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement
You should now be able to install an unsigned driver.

When a driver is succesfully installed, the device will be listed as a &quot;Ports&quot;
device in Device Manager, double-click it, select the &quot;Port Settings&quot; tab and
maybe the &quot;Advanced...&quot; button to set serial port properties.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.usbdcomposite" label="DK3750 usbdcomposite">
    <property key="blurb" value="USB Composite Device example, MSD + CDC + Vendor unique functions."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/usbdcomposite/bin/usbdcomposite.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Composite Device example, MSD + CDC + Vendor unique functions.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
to implement a composite USB device with tree functions:

 - Mass storage class device (MSD) implementing a 4MB disk
 - Communication device class (CDC) implementing a USB to UART bridge
 - Vendor Unique Device similar to the usbdvud example (control DK leds).

As the CDC function has two interface, the CDC function use an Interface
Association Descriptor (IAD). A composite device which use IAD's must be
implemented using bDeviceClass=0xEF, bDeviceSubClass=2 and bDeviceProtocol=1.


The vendor unique function (VUD).
=================================
Toggles user LED's 0-4 when receiving vendor unique class setup commands.
Intended to be used together with the &quot;libusb&quot; device driver, and host
application EFM32-LedApp.exe (a Windows application).
You will find libusb and EFM32-LedApp.exe in the &quot;host&quot; folder of the usbdvud
example. Check EFM32_Vendor_Unique_Device.inf to see how both the usbdvud
example VID_10C4&amp;PID_0001 and this composite example VID_10C4&amp;PID_0008&amp;MI_00
are specified.

The CDC COM port function.
==========================
Implements an USB CDC based virtual COM port. UART1 on the DK is used as the
physical COM port. Any data sent to the virtual CDC COM port is transmitted on
UART1. Any data received on UART1 is transmitted to the virtual port.

USB Mass Storage Device function.
=================================
Implements a Mass Storage Class device (MSD) with 4MByte in external PSRAM.


Windows driver installation.
============================
The first time the composite USB device is connected to the host, Windows must
install drivers for the VUD and CDC functions.

To control the VUD function with EFM32-LedApp.exe you need to install &quot;libusb&quot;
device driver. Manually direct Windows to look for this driver in the &quot;host&quot;
folder of the usbdvud example.
This can be done with the new device &quot;Wizard&quot; which might pop up after device
insertion, or you can open &quot;Device Manager&quot;, left click on one of functions
of the new composite device (marked with yellow exclamation mark) and
select &quot;Update Driver Software...&quot;.
After libusb is installed you can start EFM32-LedApp.exe to control leds on
the DK.

Similarly for the CDC function, direct Windows to look for a driver in the
folder where you have unpacked your copy of the Silabs-CDC_Install.zip driver
file.
This can be done with the new device &quot;Wizard&quot; which might pop up after device
insertion, or you can open &quot;Device Manager&quot;, left click on the new device and
select &quot;Update Driver Software...&quot;. Note how the .inf file specifies interface
number 2, VID_10C4&amp;PID_0008&amp;MI_02.
When the serial port driver is succesfully installed, the device will be listed
as a &quot;Ports&quot; device in Device Manager, double-click it, select the
&quot;Port Settings&quot; tab and maybe the &quot;Advanced...&quot; button to set serial port
properties.

Some versions of Windows wont allow you to install unsigned drivers. If you
suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.
Win7:
Repeatedly push F8 during boot until the boot menu appears.
Select the &quot;Disable Driver Signature Enforcement&quot; option.
Win10:
Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.
When computer has restarted into the options menu, select:
Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement
You should now be able to install an unsigned driver.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.usbdheadphone" label="DK3750 usbdheadphone">
    <property key="blurb" value="USB audio headphone device example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/usbdheadphone/bin/usbdheadphone.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB audio headphone device example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example implements a USB connected headphone device. The device enumerates
as a device supporting stereo 16bit PCM encoded audio at a samplerate of
44.1 kHz (the standard audio CD rate). The samples are sent directly to the I2S
DAC on the mainboard and audio is available on the &quot;AUDIO OUT&quot; jack.

The USB device is modelled as the HT1 (Headphone Topology 1) described in
USB-IF document &quot;Universal Serial Bus Audio Device Class Specification for
Basic Audio Devices&quot;, Release 1.0, November 24th, 2009.

The I2S DAC is fed at a samplerate of 44.118 kHz, so additional audio samples
are occasionally inserted to ensure that the data streams (USB and DAC) stay
synchronized.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.usbdhidkbd" label="DK3750 usbdhidkbd">
    <property key="blurb" value="USB HID keyboard example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/usbdhidkbd/bin/usbdhidkbd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB HID keyboard example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
and implements an USB HID class keyboard device (one button !).

SW1 is the keyboard button. Pressing this button will succesively write
&quot;Silicon Labs - &quot;.

User LED's 0-3 is used as a &quot;heart-beat&quot; counting pattern. The count rate
reflects the scan rate of the onebutton keypad.

User LED 8 reflects hosts NumLock status.
User LED 9 reflects hosts CapsLock status.
User LED 10 reflects hosts ScrollLock status.
User LED 15 reflects the status of the keyboard pushbutton.

It is also possible to make a buspowered device:
 - Enable #define BUSPOWERED in usbconfig.h
 - Program the MCU plugin module, remove it fron the DK.
 - Connect a pushbutton from PORTE bit 0 to GND (optional keyboard button).
 - Connect &quot;USB VREGO&quot; and &quot;VMCU&quot; together.
 - Optionally connect &quot;USB VREGO&quot; and &quot;3.3V&quot; together to enable an activity LED
   (the blue LED labeled &quot;STATUS).
   Note: This will cause the device suspend current to exceed 2.5 mA.

 - NOTE !!! Do NOT insert the plugin module back on the DK with &quot;USB VREGO&quot;,
   &quot;3.3V&quot; and &quot;VMCU&quot; connected together !!!.

This example will output useful info on the DK serial port (115.200 8N1).

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.usbdmicrophone" label="DK3750 usbdmicrophone">
    <property key="blurb" value="USB audio microphone device example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/usbdmicrophone/bin/usbdmicrophone.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB audio microphone device example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example implements a USB connected microphone device. The device enumerates
as a device supporting stereo 16bit PCM encoded audio at a samplerate of
44.1 kHz (the standard audio CD rate). The samples are aquired using the ADC
which is routed to the &quot;AUDIO IN&quot; jack on the mainboard. The example can be
compiled in &quot;tone generator&quot; mode, where the device produce a 1kHz sine.

The USB device is modelled as the MT (Microphone Topology) described in
USB-IF document &quot;Universal Serial Bus Audio Device Class Specification for
Basic Audio Devices&quot;, Release 1.0, November 24th, 2009.

The ADC is sampling at a rate of 44.118 kHz, so additional audio samples
are occasionally inserted or removed from the data sent to host to ensure that
the data streams (USB and ADC) stay synchronized. This gives reasonable audio
quality when listening to music, but produce noticeable artifacts when
listening to a pure sinewave or when the example is compiled in &quot;tone generator&quot;
mode.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.usbdmsd" label="DK3750 usbdmsd">
    <property key="blurb" value="USB Mass Storage Device example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/usbdmsd/bin/usbdmsd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Mass Storage Device example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
to implement a device Mass Storage Class device (MSD).

The example provides five different MSD types.

 - A 96KByte &quot;disk&quot; in internal SRAM
 - A 4MByte &quot;disk&quot; in external PSRAM
 - A disk implemented with a micro SD-Card
 - An internal FLASH &quot;disk&quot; (disksize is internal FLASH size minus 64K)
 - A 16MB external NORFLASH &quot;disk&quot;

Select mediatype in msddmedia.h (#define MSD_MEDIA)

It is also possible to make a buspowered device:
 - Enable #define BUSPOWERED in usbconfig.h (only valid for SRAM and FLASH media)
 - Program the MCU plugin module, remove it from the DK.
 - Connect &quot;USB VREGO&quot; and &quot;VMCU&quot; together.
 - Optionally connect &quot;USB VREGO&quot; and &quot;3.3V&quot; together to enable an activity LED
   (the blue LED labeled &quot;STATUS&quot;).
   Note: This will cause the device suspend current to exceed 2.5 mA.

 - NOTE !!! Do NOT insert the plugin module back on the DK with &quot;USB VREGO&quot;,
   &quot;3.3V&quot; and &quot;VMCU&quot; connected together !!!.

The example will output some info on the DK serial port (115.200 8N1).

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.usbdtouch" label="DK3750 usbdtouch">
    <property key="blurb" value="USB Bitmap transfer using USB drive functionality."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/usbdtouch/bin/usbdtouch.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Bitmap transfer using USB drive functionality.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrate use several functionalities:
1. Creation of virtual drive in system with FAT FS,
2. Mounting the drive on PC and file transfer,
3. Bitmap file creation based on TFT frame buffer content,
4. Resistive touch panel interaction.

On system startup initial drive is created and 
formatted using FAT FS then simple readme.txt file 
is put on file system. Every time user press PB4 key
new file, containing TFT frame buffer in bitmap format
is added. All files could be retrieved after connecting
board to PC by means of USB. For this connection use
small USB socket located on Giant Gecko CPU board, not
the big one on development kit.

If new files doesn't appear on drive after pressing PB4,
try to reconnect the board to PC.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.usbdvud" label="DK3750 usbdvud">
    <property key="blurb" value="USB Vendor Unique Device example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/usbdvud/bin/usbdvud.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Vendor Unique Device example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
and implements an USB Vendor Unique Device.

The example will toggle User LED's 0-4 when receiving vendor unique class
setup commands.

This example is intended to be used together with the &quot;libusb&quot; device driver,
and host application EFM32-LedApp.exe (a Windows application).

The first time the USB device is connected to the host, you must tell the host
OS to install the &quot;libusb&quot; device driver.

On Windows, you can follow this procedure:
Insert the device, and manually direct Windows to look for drivers in the
directory where you have your copy of the &quot;EFM32_Vendor_Unique_Device.inf&quot; file.
This can be done with the new device &quot;Wizard&quot; which might pop up after device
insertion, or you can open &quot;Device Manager&quot;, left click on the new device and
select &quot;Update Driver Software...&quot;.

Some versions of Windows wont allow you to install unsigned drivers. If you
suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.
Win7:
Repeatedly push F8 during boot until the boot menu appears.
Select the &quot;Disable Driver Signature Enforcement&quot; option.
Win10:
Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.
When computer has restarted into the options menu, select:
Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement
You should now be able to install an unsigned driver.

After libusb is installed, start EFM32-LedApp.exe.

This example will output some info on the DK serial port (115.200 8N1).

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.usbhenum" label="DK3750 usbhenum">
    <property key="blurb" value="USB device enumerator example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/usbhenum/bin/usbhenum.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB device enumerator example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the USB host stack to implement
a simple device enumerator.

Connect a terminal to the DK UART port (115.200, N, 8, 1) and
then connect any USB device to the USB port of the MCU plug-in module.

Info about the VID/PID and some string descriptors will be output on
the serial port. The connected USB device will not be configured.

Note that USB disk drives may fail, as some of them draw too much current
when attached.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.usbhhidkbd" label="DK3750 usbhhidkbd">
    <property key="blurb" value="USB Host HID keyboard example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/usbhhidkbd/bin/usbhhidkbd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Host HID keyboard example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the USB host stack to implement
support for USB HID Keyboards.

Connect a terminal to the DK UART port (115.200, N, 8, 1) and
then connect a USB keyboard to the USB port of the MCU plug-in module.

The example will flash keyboard leds (numlock, scrollock and capslock)
with a binary counting pattern.

Keyboard entry will be echoed on the UART serial port.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.usbhmsdfatcon" label="DK3750 usbhmsdfatcon">
    <property key="blurb" value="USB Host mass storage device example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/usbhmsdfatcon/bin/usbhmsdfatcon.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Host mass storage device example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the USB host and the MSD modules in the
drivers directory to implement support for Mass Storage Device's (MSD).

Connect a terminal to the DK UART port (115.200, N, 8, 1) and
then connect a memory stick the USB port of the MCU plug-in module.

Info about the MSD device will be output on the serial port. When a MSD
device is connected and detected as a valid, you can issue commands at the
serial port console to list all files on the device (ls), type the content
of a file (cat) and append test to a file (echo).

Note that USB disk drives may fail, as some of them draw too much current
when attached.

NOTE:
This example is too large to be built with IDEs with 32KB size limits.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.wavplayer" label="DK3750 wavplayer">
    <property key="blurb" value="Audio .WAV format player."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/wavplayer/bin/wavplayer.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Audio .WAV format player.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including DK BSP (board support
package) and demonstrates how to play a wav file from the SD-card.

The wav file must be named &quot;sweet1.wav&quot; and must be encoded with 16-bit
PCM audio sampling.

The output volume level is adjusted with kit pushbuttons PB1 and PB2.
Output level is indicated by the 14 leftmost user LEDs.
Push the AEM button on the kit until &quot;EFM&quot; shows in the upper right
corner of the TFT display to activate PB1 and PB2 pushbuttons.

The example can be build for using the I2S dac or onchip DAC0.
Look for #define USE_I2S near top of file wavplayer.c

It sets up access to DVK registers, and supports fat-filesystem on the
sd-card.

Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.dk3750.demo.webserver" label="DK3750 webserver">
    <property key="blurb" value="Webserver example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd3600a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_DK3750/webserver/bin/webserver.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Webserver example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;==================

This example shows how to use the EFM32GG-DK3750 to run a http server with a
static web page. This example is using the lwip network stack to provide the
necessary protocol implementations and it's using the ksz8851snl ethernet
controller on the development kit to send and receive packets.

Web page
=========

To view the static web page open your browser to http://dk-ip/ where the 
dk-ip is the ip address assigned to your development kit.

You can find the source code for the static web page under the html directory.
These source files are converted into the fsdata_custom.c file that the lwip
http module knows how to read. This conversion is done by the makefsdata tool.

To customize your own web pages, you can use the makefsdata tool to generate
your own fsdata_custom.c file. The makefsdata tool is provided as part of lwip,
and you can find the C source file for it in the lwip-
contrib/apps/httpserver_raw/makefsdata folder (Don't use the makefsdata perl
script, it is outdated). This is an example of how you can generate the
fsdata_custom.c file using makefsdata.exe.

makefsdata.exe html -l1 -f:fsdata_custom.c

Output
=======

When a network interface is up and running the IP address of the server is
displayed on the LCD display together with rx/tx packet statistics. If you want
to view the lwip trace output you can open a serial connection to the
development kit using baud rate 115200.

IP Configuration
=================

By default this example is configured to use DHCP to fetch an ip address. If you
want to use static ip address instead then follow these steps.

1. open lwipopts.h
2. edit the LWIP_DHCP option to be

#define LWIP_DHCP                       0

3. edit the STATIC_* options to match your desired ip address, subnet mask,
default gateway. This is an example of how to configure these static ip
addresses.

ip: 192.168.0.12
sn: 255.255.255.0
gw: 192.168.0.1

#define STATIC_IPADDR0                  192
#define STATIC_IPADDR1                  168
#define STATIC_IPADDR2                  0
#define STATIC_IPADDR3                  12

#define STATIC_NET_MASK0                255
#define STATIC_NET_MASK1                255
#define STATIC_NET_MASK2                255
#define STATIC_NET_MASK3                0

#define STATIC_GW_IPADDR0               192
#define STATIC_GW_IPADDR1               168
#define STATIC_GW_IPADDR2               0
#define STATIC_GW_IPADDR3               1


ksz8851snl interface
=====================

The ksz8851snl ethernet controller is using an spi interface, and this is
connected to one of the EFM32 USARTs. See the kit user-manual for the actual
pins. This example also shows how to use the provided ksz8851snl drivers to
operate the ethernet controller. These are the main files that are used when
interfacing with the ksz8851snl.

drivers/ksz8851snl.c

This is the hardware abstraction layer for the ksz8851snl. This file contains
functionality like enable and initialize the chip.

drivers/ksz8851snl_spi.c

This contains the spi communication functions for the ksz8851snl. We provide the
low level operations like read/write register as well as read/write fifo in this
file.

lwip-contrib/ports/efm32/ksz8851snl_driver.c

This is the lwip driver that interfaces between the lwip stack and our
ksz8851snl.c hardware abstraction layer.

Interrupt Handling
===================

The ksz8851snl has an interrupt pin that is routed through the board controller
and into a GPIO pin on the EFM32. When the ethernet interrupt is enabled. This
interrupt pin is active low. The ksz8851snl will trigger an interrupt if the
link status has changed or if an ethernet frame has been received or
transmitted. In this example the GPIO is configured to trigger an interrupt on a
falling edge of the ethernet interrupt pin.

The interrupts of the ksz8851snl are not serviced directly from the GPIO
interrupt handler. What we do instead is to signal to the application that an
interrupt is pending and let the main application eventually call the interrupt
service routine within the ksz8851snl driver. The reason for doing this is
because we want to minimize the amount of time inside the interrupt handler.
When a received frame interrupt is triggered the ksz8851snl driver will have to
allocate buffer and transfer a large amount of data from the controller to ram,
and then pass this buffer into the lwip stack.


Board:  Silicon Labs EFM32GG-DK3750 Development Kit
Device: EFM32GG990F1024

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.biometric" label="STK3700 biometric">
    <property key="blurb" value="Biometric Demo using the Biometric Sensor add-on board on the EFM32GG-STK3700."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/biometric/bin/biometric.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Biometric Demo using the Biometric Sensor add-on board on the EFM32GG-STK3700.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the LCD display on the EFM32GG_STK3700 kit. In addition, it
demonstrates the use of Silicon Labs I2C based sensors on the expansion board
header.

You must have a Silicon Labs Biometric Sensor add-on board to make use of this demo.
Once the demo is started, push button PB0 to change what is displayed. While
on the heart rate monitor display hold your finger on the proximity sensor to 
measure heart rate.

Board:  Silicon Labs EFM32GG-STK3700 Starter Kit and Sensor Add-on board
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.blink" label="STK3700 blink">
    <property key="blurb" value="Blink example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library to
demonstrate the use of the LED's on the starter kit. This example is intended as
a skeleton for new projects.

Board:  Silicon Labs EFM32GG_STK3700 Starter Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.burtc" label="STK3700 burtc">
    <property key="blurb" value="Backup power domain RTC example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/burtc/bin/burtc.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Backup power domain RTC example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrate use of the backup power domain and the
backup real time clock (BURTC).

Start the example with the Power Source Selector switch in the &quot;DBG&quot; position.
When the clock is running you can adjust time by pressing pushbuttons
PB0 and PB1.
When you move the Power Source Selector switch to the &quot;USB&quot; position, the
EFM is turned off and the BURTC peripheral runs on power from the BU capacitor.
(See User manual for EFM32GG-STK3700 starter kit for details on the hardware).
When you move the Power Source Selector switch back to the &quot;DBG&quot; position, you
can verify that time has been recorded correctly.

Board:  Silicon Labs EFM32GG-STK3700 Starter Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.clock" label="STK3700 clock">
    <property key="blurb" value="Wall Clock example using the segment LCD."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/clock/bin/clock.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Wall Clock example using the segment LCD.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS  and demonstrates  the use of
the LCD controller, RTC (real time counter), VCMP, GPIO and various
Energy Modes (EM).

The RTC is set up to wake the EFM32 from EM2 every minute. During this
interval, the LCD is updated to reflect the current time. The animation
feature is used to show the seconds. This is done by using the frame
event counter to drive the animation feature every second.

Time is set with pushbuttons PB0 and PB1.
 - Pushing PB0 increments minute count.
 - Pushing PB1 increments hour count.

The VCMP is used to measure the input voltage on every wakeup. If the
voltage drops too low, voltage boost is enabled on the LCD. This makes
the LCD clear and readable even when running on low batteries.

Board:  Silicon Labs EFM32GG_STK3700 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.cpt007b" label="STK3700 cpt007b_demo">
    <property key="blurb" value="CPT007B Demo"/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/cpt007b/bin/cpt007b_demo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;CPT007B Demo&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This demo demonstrates the capacitive button function of CPT007B fixed function
board. This demo runs on the EFM32 STK, and communicates with CPT007B through
the GPIO pins on the EXP header. Virtual buttons on STK's LCD screen indicate
whether the capacitive sensing buttons on CPT007B are pressed or released.
This demo supports up to 7 capacitive buttons on CPT007B
 
Board:  Silicon Labs EFM32GG_STK3700 Starter Kit and CPT007B Evaluation Board
Device: EFM32GG990F1024&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.cslib" label="STK3700 cslib">
    <property key="blurb" value="CSLIB example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/cslib/bin/cslib.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;CSLIB example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the capacitive sensing firmware library to sample
capacitive sensing buttons on the STK.  Real-time sample information, touch
qualification status, and other state variables can be displayed and examined
in the Capacitive Sensing Profiler tool.

Board:  Silicon Labs EFM32GG_STK3700 Starter Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.emlcd" label="STK3700 emlcd">
    <property key="blurb" value="Energy Modes with segment LCD example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/emlcd/bin/emlcd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Energy Modes with segment LCD example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library to
demonstrate the use of the LCD controller, RTC (real time counter), GPIO and
various Energy Modes (EM) on the starter kit.

EM2 is used for delays in between refreshing the LCD display, and a lot of
&quot;eye candy&quot; are present to show off the MCU module's LCD display.

The LCD controller drives the display down to EM2. In the demo, EM2 is used
for &quot;most&quot; delays to show off this feature. The user can press PB0 or PB1 to
activate EM3 and EM4. EM4 requires a system reset, while PB0 again will wake
up the system  from Energy Mode 3.

Board:  Silicon Labs EFM32STG_STK3700 Starter Kit
Device: EFM32GG990F1024

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.emode" label="STK3700 emode">
    <property key="blurb" value="Select a single energy mode, and stay there."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/emode/bin/emode.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 EMLIB and demonstrates the use of
the LCD controller, RTC (real time counter), GPIO and various Energy
Modes (EM).

The user can press the push buttons PB0 and PB1 to select which energy
mode to demonstrate.

This demo application has been made to give a quick demo of the
Energy Profiler from Silicon Labs and to reproduce the different 
energy modes seen in the EFM32 datasheet current consumption table. 

Board:  Silicon Labs EFM32GG_STK3700 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.freertos_blink" label="STK3700 freertos_blink">
    <property key="blurb" value="FreeRTOS - Blink example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/freertos_blink/bin/freertos_blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;FreeRTOS - Blink example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board. 
It also shows how to use idle with different energy saving modes ( from EM1 to EM3 - configured in FreeRTOSConfig.h file).
This example is intended as a skeleton for new projects using FreeRTOS.

Board:  Silicon Labs EFM32GG_STK3700 Starter Kit
Device: EFM32GG990F1024&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.freertos_demo" label="STK3700 freertos_demo">
    <property key="blurb" value="FreeRTOS - Demo"/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/freertos_demo/bin/freertos_demo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;FreeRTOS - Demo&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This is the demo application which is also provided in the official FreeRTOS 
distribution. The demo can operate in 3 modes showing different functionality 
of the FreeRTOS system. The mode can be configured by changing the value of 
configCREATE_LOW_POWER_DEMO in the FreeRTOSConfig.h file. 

0 =&gt; Full Demo

This is the default mode of this example. The &quot;Full Demo&quot; is a comprehensive 
test and demo application that shows how to use various FreeRTOS API's. When 
running the demo there is a check task which toggles a LED on the board every
3 seconds when the demo is running as expected.

1 =&gt; Low Power using RTC

This mode is using the low power tickless idle functionality of FreeRTOS to 
show how to use low power while using FreeRTOS. In this mode the MCU will 
sleep in EM2 whenever FreeRTOS enter idle mode and it will be using the RTC to 
trigger wakeup.

2 =&gt; Low Power using BURTC

This mode is using the low power tickless idle functionality of FreeRTOS to 
show how to use low power while using FreeRTOS. In this mode the MCU will 
sleep in EM3 whenever FreeRTOS enter idle mode and it will be using the BURTC 
to trigger wakeup.

Further information on the example can be found at this location:
http://www.freertos.org/EFM32-Giant-Gecko-Pearl-Gecko-tickless-RTOS-demo.html

Board:  Silicon Labs EFM32GG_STK3700 Starter Kit
Device: EFM32GG990F1024&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.freertos_tickless" label="STK3700 freertos_tickless">
    <property key="blurb" value="FreeRTOS - Tickless example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/freertos_tickless/bin/freertos_tickless.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;FreeRTOS - Tickless example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks,
one sender generating number and one receiver that displays the number on the LCD. The FreeRTOS is 
configured in tickless mode, going into EM2 when no tasks are active.

EM3 mode cannot be used in this example because the LCD driver and timer are not available in EM3.
For more details, see the configuraiton in FreeRTOSConfig.h file.

Board:  Silicon Labs EFM32GG_STK3700 Starter Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.gpiointerrupt" label="STK3700 gpiointerrupt">
    <property key="blurb" value="Gpio interrupt example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/gpiointerrupt/bin/gpiointerrupt.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Gpio interrupt example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and gpio interrupt dispatcher driver to show
how to handle multiple GPIO interrupts. Buttons pressing toggles LEDs.

Board:  Silicon Labs EFM32GG_STK3700 Starter Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.inttemp" label="STK3700 inttemp">
    <property key="blurb" value="Internal temperature sensor example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/inttemp/bin/inttemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB to demonstrate
the usage of the internal temperature sensor on EFM32 Giant Gecko
devices.

Note: EFM32 devices with production ID lower than 18 may measure inaccurate
temperatures due to a sensor calibration bug.

Board:  Silicon Labs EFM32GG_STK3700 Starter Kit
Device: EFM32GG990F1024

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.lcd" label="STK3700 lcd">
    <property key="blurb" value="Segment LCD controller example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/lcd/bin/lcd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Segment LCD controller example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB peripheral library and
demonstrates the use of the segment LCD controller.

Board:  Silicon Labs EFM32GG_STK3700 Starter Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.lcsense" label="STK3700 lcsense">
    <property key="blurb" value="LC sense example using LESENSE."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/lcsense/bin/lcsense.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;LC sense example using LESENSE.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and demonstrates the use of 
the LESENSE peripheral on the board.

This demo has two different modes.
To change between them, press PB1. In Mode0 (default). The LESENSE
module will wake up whenever a metal object is passed above the LC
sensor in the bottom right of the STK. In Mode 1, the EFM32 will only
wake up every fifth time the metal object is passed over the sensor.

Board: Silicon Labs EFM32GG_STK3700 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.leuart" label="STK3700 leuart">
    <property key="blurb" value="LEUART/DMA in Energy mode2 output example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/leuart/bin/leuart.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project reads and sends the data back to terminal using LEUART
while staying in EM2.

It uses the EFM32 CMSIS and EMLIB, to demonstrate the
use of LEUART communication using DMA under the EM2 on the 
EFM32GG_STK3700 Starter Kit.

The LEUART is configured to be used with DMA under EM2.
The terminal configuration is 9600-8-N-1.
The DMA is configured to handle read and write data bytes from LEUART under EM2.

Testing:
1. Use the expansion header to connect the LEUART to your PC.
2. Pin Configuration:
	2.1. Pin-12 (PD4) LEUART0_TX
	2.2. Pin-14 (PD5) LEUART0_RX
	2.3. Pin-1 Gnd

3. Configure terminal to 9600-8-N-1.
4. Enter characters from your keyboard and see if you receive the echo on the terminal.
5. Check the average current consumption is equal to EM2 on Energy Profiler.

Board:  Silicon Labs EFM32GG_STK3700 Starter Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.lightsense" label="STK3700 lightsense">
    <property key="blurb" value="Lightsensor example using LESENSE."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/lightsense/bin/lightsense.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Lightsensor example using LESENSE.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS
and demonstrates the use of the LESENSE peripheral on the board.

This demo has two different modes.
To change between them, press PB0. In Mode0 (default). The LESENSE
module will wake up whenever a &quot;dark&quot; event is detected by the light sensor
below the &quot;EFM32&quot; sign on the right from the LCD on the STK. In Mode 1,
EFM32 will only wake up on every fifth &quot;dark&quot; event.

Board: Silicon Labs EFM32GG_STK3700 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.mpu" label="STK3700 mpu">
    <property key="blurb" value="Memory Protection Unit example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/mpu/bin/mpu.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Memory Protection Unit example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including STK BSP (board
support package).

It sets up the MPU to demonstrate usage of MPU to catch memory access
violations. STK pushbuttons are used generate MPU faults.

Board:  Silicon Labs EFM32GG_STK3700 Development Kit
Device: EFM32GG990F1024

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.micriumos_blink" label="STK3700 micriumos_blink">
    <property key="blurb" value="MicriumOS Blink example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/micriumos_blink/bin/micriumos_blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;MicriumOS Blink example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example shows how to initialize and run MicriumOS on the kit. The 
application will start a single task which is blinking LED 0 at a regular 
interval. This examples is a good starting point for applications that want 
to use MicriumOS.

Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.
SystemView Trace is enabled by default and can be disabled by changing the 
OS_CFG_TRACE_EN configuration inside the os_cfg.h file. SystemView can be used
to inspect the runtime behaviour of this example, it will give a nice overview
of the tasks and interrupts in the application. SystemView can be downloaded 
from https://www.segger.com/systemview.html

Board:  Silicon Labs EFM32GG_STK3700 Starter Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.micriumos_usbdhidmouse" label="STK3700 micriumos_usbdhidmouse">
    <property key="blurb" value="Micrium OS USB device HID mouse example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/micriumos_usbdhidmouse/bin/micriumos_usbdhidmouse.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Micrium OS USB device HID mouse example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example shows how to use the Micrium OS USB device stack with the
USB peripheral on the EFM32GG starter kit. This example will emulate
the behavior of a USB mouse and move the mouse pointer up-left and
down-right periodically when connected to a PC.

The output from the example application can be found by connecting a 
terminal to the VCOM port.

Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.
SystemView Trace is enabled by default and can be disabled by changing the 
OS_CFG_TRACE_EN configuration inside the os_cfg.h file. SystemView can be used
to inspect the runtime behavior of this example, it will give a nice overview
of the tasks and interrupts in the application. SystemView can be downloaded 
from https://www.segger.com/systemview.html

Board:  Silicon Labs EFM32GG_STK3700 Starter Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.micriumos_usbhmsc" label="STK3700 micriumos_usbhmsc">
    <property key="blurb" value="MicriumOS USB host MSC example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/micriumos_usbhmsc/bin/micriumos_usbhmsc.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;MicriumOS USB host MSC example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example shows how to use the MicriumOS USB host stack with the
USB controller on the EFM32GG starter kit. This example will detect
a connected USB memory and print some information about the decive.

The output from the example application can be found by connecting a 
terminal to the VCOM port.

Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.
SystemView Trace is enabled by default and can be disabled by changing the 
OS_CFG_TRACE_EN configuration inside the os_cfg.h file. SystemView can be used
to inspect the runtime behaviour of this example, it will give a nice overview
of the tasks and interrupts in the application. SystemView can be downloaded 
from https://www.segger.com/systemview.html

Board:  Silicon Labs EFM32GG_STK3700 Starter Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.nandflash" label="STK3700 nandflash">
    <property key="blurb" value="Nandflash example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/nandflash/bin/nandflash.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Nandflash example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrates use of the NANDFLASH driver.

Connect a terminal to the TTL-level serialport (115200-N-8-1) on EXP port pins
4 and 6.
Operations on the flash are initiated by issuing commands on the terminal.
Command &quot;h&quot; will print a help screen on the terminal :

    Available commands:
        fi         : Show NAND flash device information
        h          : Show this help
        rp n       : Read page n
        bp n       : Blankcheck page n
        bd         : Blankcheck entire device
        bb         : Check bad-block info
        mb n       : Mark block n as bad
        wp n       : Write page n
        eb n       : Erase block n
        ecc n      : Check ECC algorithm, uses page n and n+1
        cp m n     : Copy page m to page n

Note that the nandflash device used on this kit has 32 pages per block, so
pages 0-31 belongs to block 0.

Board:  Silicon Labs EFM32GG-STK3700 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.nvm_simple" label="STK3700 nvm_simple">
    <property key="blurb" value="nvm_simple - non-volatile memory driver usage simple example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/nvm_simple/bin/nvm_simple.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;nvm_simple - non-volatile memory driver usage simple example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example shows simple usage of NVM module.

It stores object (32bit word in this case) into flash region declared 
as non-volatile memory area. It uses wear leveling and demonstrates 
simple use of the NVM driver. There are two types of pages: &quot;normal&quot; 
dedicated for storing multiple objects which doesn't change often 
and &quot;wear&quot; which can store single object (but this could be structure
containing many fields) that can often change. In this example on two pages 
same object is stored but NVM could handle multiple pages with different objects.

PB0 - short press recalls data from &quot;normal&quot; page
PB0 - long press store data to &quot;normal&quot; page
PB1 - counts up, and after releasing stores data to &quot;wear&quot; page

RESET - resets CPU and if there were valid data in NVM recovers last data value.

Board:  Silicon Labs EFM32GG-STK3700 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.powertest" label="STK3700 powertest">
    <property key="blurb" value="Power test example, running demonstration of energy modes."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/powertest/bin/powertest.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library
to demonstrate the use of the various Energy Modes available on the
EFM32GG990F1024. When running this example, the Energy Profiler tool
in Simplicity Studio can be used to show the power consumption of each
energy mode.

Board:  Silicon Labs EFM32GG-STK3700 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.rtx_blink" label="STK3700 rtx_blink">
    <property key="blurb" value="Keil RTX RTOS - Blink example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/rtx_blink/bin/rtx_blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - Blink example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the Keil RTX RTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board.
This example is intended as a skeleton for new projects using Keil RTX.

Board:  Silicon Labs EFM32GG-STK3700
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.rtx_tickless" label="STK3700 rtx_tickless">
    <property key="blurb" value="Keil RTX RTOS - tick-less example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/rtx_tickless/bin/rtx_tickless.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - tick-less example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the Keil RTX RTOS, and gives a basic demonstration
of using two tasks; one sender generating number and one receiver that displays
the number on LCD. The RTX is configured in tick-less mode, going into EM2 when
no tasks are active. This example is intended as a skeleton for new projects
using Keil RTX for energy aware applications.

Board:  Silicon Labs EFM32GG-STK3700
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.rtx_tickless_nolcd" label="STK3700 rtx_tickless_nolcd">
    <property key="blurb" value="Keil RTX RTOS - tick-less example with LCD off."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/rtx_tickless_nolcd/bin/rtx_tickless_nolcd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - tick-less example with LCD off.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example is modification of rtx_tickless to demonstrate ultra low power consumption 
of Gecko processors in connection with RTX RTOS. Comparing to previous example it has LCD
turned off. There is also possible to disable part of RAM to lower power even further.
Low frequency crystal oscillator was disabled and low frequency RC oscillator used instead
to lower energy consumption even more.

project uses the Keil RTX RTOS, and gives a basic demonstration
of using two tasks; one sender generating number and one receiver.
The RTX is configured in tick-less mode, going into EM2 when
no tasks are active. This example is intended as a skeleton for new projects
using Keil RTX for energy aware applications.

Board:  Silicon Labs EFM32GG-STK3700
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.touch" label="STK3700 touch">
    <property key="blurb" value="Capactive touch example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/touch/bin/touch.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Capactive touch example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrates the capacitive touch capability of the EFM32 and the
Tiny Gecko STK. This is a port of the EFM32_G8xx_STK capacitive touch demo.

It demonstrates the use of LESENSE, ACMP, VCMP, LCD, and EMU.

Board:  Silicon Labs EFM32GG_STK3700
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.ucos2_port" label="STK3700 ucos2">
    <property key="blurb" value="uC/OS-II RTOS on EFM32 using example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/ucos2_port/bin/ucos2.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;uC/OS-II RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This is a port of the uC/OS-II RTOS from Micrium Inc, http://www.micrium.com

The port has been adapted by Silicon Labs for use with our Development
Kit. It requires the standard EFM32 CMSIS package (including EMLIB).

The example has three tasks:
 - Task1: LED blink task
 - Task2: Receives characters from serial port and posts message to Task3
 - Task3: Receives message from Task2 and writes it on LCD and serial port

Serial port can be chosen between:
USART1 - location 1 is used, GPIO port D pins 0 and 1, baudrate 115200-8-N-1.
LEUART0 - location 0 is used, GPIO port D pins 4 and 5, baudrate 9600-8-N-1.

These USARTs are by default not connected to any serial port, so this needs
to be connected to external RS232 ports to be usable.

uC/OS-II is provided in source form for FREE evaluation, for educational use
or for peaceful research.

If you plan on using uC/OS-II in a commercial product you need to contact
Micrium to properly license its use in your product. We provide ALL the
source code for your convenience and to help you experience uC/OS-II.
The fact that the source is provided does NOT mean that you can use it without
paying a licensing fee.

For commercial use, contact Micrium, http://www.micrium.com for details.

Board:  Silicon Labs EFM32GG_STK3700 Starter Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.usbdcomposite" label="STK3700 usbdcomposite">
    <property key="blurb" value="USB Composite Device example, MSD + CDC + Vendor unique functions."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/usbdcomposite/bin/usbdcomposite.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Composite Device example, MSD + CDC + Vendor unique functions.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
to implement a composite USB device with tree functions:

 - Mass storage class device (MSD) implementing a disk in internal flash memory.
 - Communication device class (CDC) implementing a USB to UART bridge
 - Vendor Unique Device similar to the usbdvud example (control STK leds).

As the CDC function has two interface, the CDC function use an Interface
Association Descriptor (IAD). A composite device which use IAD's must be
implemented using bDeviceClass=0xEF, bDeviceSubClass=2 and bDeviceProtocol=1.


The vendor unique function (VUD).
=================================
Toggles user LED's 0 and 1 when receiving vendor unique class setup commands.
Intended to be used together with the &quot;libusb&quot; device driver, and host
application EFM32-LedApp.exe (a Windows application).
You will find libusb and EFM32-LedApp.exe in the &quot;host&quot; folder of the usbdvud
example. Check EFM32_Vendor_Unique_Device.inf to see how both the usbdvud
example VID_10C4&amp;PID_0001 and this composite example VID_10C4&amp;PID_0008&amp;MI_00
are specified.

The CDC COM port function.
==========================
Implements an USB CDC based virtual COM port. USART1 on the STK is used as the
physical COM port. Any data sent to the virtual CDC COM port is transmitted on
USART1. Any data received on USART1 is transmitted to the virtual port.
USART1 is available on the STK EXT port. EXT pin 4 is Tx, pin 6 is Rx.
NOTE: This is a TTL level USART, DO NOT CONNECT DIRECTLY TO RS232 PORTS !

USB Mass Storage Device function.
=================================
Implements a Mass Storage Class device (MSD) with 4MByte in external PSRAM.


Windows driver installation.
============================
The first time the composite USB device is connected to the host, Windows must
install drivers for the VUD and CDC functions.

To control the VUD function with EFM32-LedApp.exe you need to install &quot;libusb&quot;
device driver. Manually direct Windows to look for this driver in the &quot;host&quot;
folder of the usbdvud example.
This can be done with the new device &quot;Wizard&quot; which might pop up after device
insertion, or you can open &quot;Device Manager&quot;, left click on one of functions
of the new composite device (marked with yellow exclamation mark) and
select &quot;Update Driver Software...&quot;.
After libusb is installed you can start EFM32-LedApp.exe to control leds on
the STK.

Similarly for the CDC function, direct Windows to look for a driver in the
folder where you have your copy of the &quot;EFM32-Cdc.inf&quot; file (same folder as
this readme file, unzip the Silabs-CDC_Install.zip).
Note how the .inf file specifies interface number 2, VID_10C4&amp;PID_0008&amp;MI_02.
When the serial port driver is succesfully installed, the device will be listed
as a &quot;Ports&quot; device in Device Manager, double-click it, select the
&quot;Port Settings&quot; tab and maybe the &quot;Advanced...&quot; button to set serial port
properties.

Some versions of Windows wont allow you to install unsigned drivers. If you
suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.
Win7:
Repeatedly push F8 during boot until the boot menu appears.
Select the &quot;Disable Driver Signature Enforcement&quot; option.
Win10:
Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.
When computer has restarted into the options menu, select:
Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement
You should now be able to install an unsigned driver.

Board:  Silicon Labs EFM32GG-STK3700 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.usbdhidkbd" label="STK3700 usbdhidkbd">
    <property key="blurb" value="USB HID keyboard example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/usbdhidkbd/bin/usbdhidkbd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB HID keyboard example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
and implements an USB HID class keyboard device (one button !).

PB0 is the keyboard button. Pressing this button will succesively write
&quot;Silicon Labs - &quot;.

Board:  Silicon Labs EFM32GG-STK3700 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.usbdmsd" label="STK3700 usbdmsd">
    <property key="blurb" value="USB Mass Storage Device example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/usbdmsd/bin/usbdmsd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Mass Storage Device example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
to implement a device Mass Storage Class device (MSD).

The example provides two different MSD types.

 - A 96KByte &quot;disk&quot; in internal SRAM (on devices with 128 kByte or larger SRAM)
 - An internal FLASH &quot;disk&quot; (disksize is internal FLASH size minus 64K)

Select mediatype in msddmedia.h (#define MSD_MEDIA)

Board:  Silicon Labs EFM32GG_STK3700 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.usbdvud" label="STK3700 usbdvud">
    <property key="blurb" value="USB Vendor Unique Device example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/usbdvud/bin/usbdvud.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Vendor Unique Device example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
and implements an USB Vendor Unique Device.

The example will toggle LED's 0 and 1 when receiving vendor unique class
setup commands.

This example is intended to be used together with the &quot;libusb&quot; device driver,
and host application EFM32-LedApp.exe (a Windows application).

The first time the USB device is connected to the host, you must tell the host
OS to install the &quot;libusb&quot; device driver.

On Windows, you can follow this procedure:
Insert the device, and manually direct Windows to look for drivers in the
directory where you have your copy of the &quot;EFM32_Vendor_Unique_Device.inf&quot; file.
This can be done with the new device &quot;Wizard&quot; which might pop up after device
insertion, or you can open &quot;Device Manager&quot;, left click on the new device and
select &quot;Update Driver Software...&quot;.

Some versions of Windows wont allow you to install unsigned drivers. If you
suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.
Win7:
Repeatedly push F8 during boot until the boot menu appears.
Select the &quot;Disable Driver Signature Enforcement&quot; option.
Win10:
Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.
When computer has restarted into the options menu, select:
Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement
You should now be able to install an unsigned driver.

After libusb is installed, start EFM32-LedApp.exe.

Board:  Silicon Labs EFM32GG-STK3700 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.usbhenum" label="STK3700 usbhenum">
    <property key="blurb" value="USB device enumerator example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/usbhenum/bin/usbhenum.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB device enumerator example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the USB host stack to implement
a simple device enumerator. When a device is attached its descriptors are read
and the vendor and product id's (VID/PID) are displayed on the LCD.
The device attached will not be configured.

Note that USB disk drives may fail, as some of them draw too much current
when attached.

Board:  Silicon Labs EFM32GG-STK3700 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.usbxpress_echo" label="STK3700 usbxpress_echo">
    <property key="blurb" value="USBXpress Echo example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/usbxpress_echo/bin/usbxpress_echo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USBXpress Echo example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project demonstrates the EFM32 USBXpress firmware library.
It echoes all received data back to the host that sent it.

The host-side application is the usbxpress_echo.py Python script found in the
USBXpress SDK at Examples/Echo/Host. The USBXpress SDK is available for download
at www.silabs.com/products/mcu/Pages/USBXpress.aspx.

Board:  Silicon Labs EFM32GG_STK3700 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.usbxpress_test_panel" label="STK3700 usbxpress_test_panel">
    <property key="blurb" value="USBXpress Test Panel example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/usbxpress_test_panel/bin/usbxpress_test_panel.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USBXpress Test Panel example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project demonstrates the EFM32 USBXpress firmware library.
It communicates with the TestPanel host application to send and receive data.
TestPanel is included in the USBXpress SDK, available for download at:

https://www.silabs.com/products/mcu/Pages/USBXpress.aspx

Board:  Silicon Labs EFM32GG_STK3700 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg.stk3700.demo.userpage" label="STK3700 userpage">
    <property key="blurb" value="Progamming and use of user flash page for data."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg.*"/>
    <property key="boardCompatibility" value="brd2200a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32GG_STK3700/userpage/bin/userpage.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Progamming and use of user flash page for data.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS  and demonstrates the programming of
the user page in flash. The page can be used for data such as keys, serial
numbers and other information that should not be deleted by a device erase.

PB0 increases the main counter.
PB1 saves the main counter value to the user page and displays how many Flash writes
have been issued.

Board:  Silicon Labs EFM32GG_STK3700 Development Kit
Device: EFM32GG990F1024
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.dk3550.demo.blink" label="DK3550 blink">
    <property key="blurb" value="Blink example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd3302a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32G_DK3550/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library to
demonstrate the use of the LED on the EFM32G-DK3550 development kit. This
example is intended as a skeleton for new projects.

Board:  Silicon Labs EFM32G-DK3550 Development Kit
Device: EFM32G890F128

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.dk3550.demo.eeprom" label="DK3550 eeprom">
    <property key="blurb" value="I2C eeprom example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd3302a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32G_DK3550/eeprom/bin/eeprom.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;I2C eeprom example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB
including DK BSP (board support package) and demonstrates
the use of the I2C bus accessing the EEPROM on the DK.

The first 3 bytes of the EEPROM is displayed on the TFT screen.
(This will normally be FFFFFF first time.) Since stored in EEPROM,
the data survives resets and power cycles.

The following usage is possible:

- Joystick up/down will increment/decrement the first byte (Byte0) in the
  EEPROM. Byte1 is then set to Byte0+1, and Byte2 is set to Byte1+1.
- Press SW4 button to reset 3 first bytes to 0xFF.

Board:  Silicon Labs EFM32G-DK3550 Development Kit
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.dk3550.demo.emlcd" label="DK3550 emlcd">
    <property key="blurb" value="Cycle through Energy Modes while updating Segment-LCD."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd3302a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32G_DK3550/emlcd/bin/emlcd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Cycle through Energy Modes while updating Segment-LCD.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and demonstrates the use of
the LCD controller, RTC (real time counter), GPIO and various Energy 
Modes (EM).

EM2 is used for delays in between refreshing the LCD display, and a lot
of &quot;eye candy&quot; are present to show off the MCU module's LCD display.

The LCD controller drives the display down to EM2. In the demo, EM2 is 
used for &quot;most&quot; delays to show off this feature. The user can press 
joystick up or down to activate EM3 and EM4. EM4 requires a system 
reset, while pushing joystick again will wake up the system from Energy
Mode 3. Note that the upper right corner of the kit must show 
&quot;Keys: EFM&quot; for the joystick presses to work. Pressing joystick up and
down will not go into EM3 or EM4 immediately, but after going through 
EM0-EM2 first.

Board:  Silicon Labs EFM32G_DK3550
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.dk3550.demo.emode" label="DK3550 emode">
    <property key="blurb" value="Static Energy Mode example, select a single EM level."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd3302a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32G_DK3550/emode/bin/emode.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Static Energy Mode example, select a single EM level.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 to demonstrate the use of the
LCD controller, RTC (real time counter), GPIO and various Energy Modes.

A counter ticks down from 4 seconds, and the user can press the joystick
up and down to select the various energy modes, EM0 (busy loop from 
flash), EM1, EM2, EM3, EM4, EM2+RTC, EM2+RTC+LCD. Remember to press the AEM key
to give the EFM32 access to the joystick.

Board:  Silicon Labs EFM32G_DK3550 Development Kit
Device: EFM32G890F128

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.dk3550.demo.fatcon" label="DK3550 fatcon">
    <property key="blurb" value="FAT File System console example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd3302a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32G_DK3550/fatcon/bin/fatcon.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;FAT File System console example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library
to demonstrate SPI-access to the Micro-SD card on the EFM32G-DK3550
development kit. The application gives a small &quot;console&quot; on the serial
port which can be used to view and list contents of the file system.
Serial port configuration is 115200-8-N-1 is used.


Board:  Silicon Labs EFM32G-DK3550 Development Kit
Device: EFM32G890F128

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.dk3550.demo.freertos_blink" label="DK3550 freertos_blink">
    <property key="blurb" value="FreeRTOS - Blink example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd3302a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32G_DK3550/freertos_blink/bin/freertos_blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;FreeRTOS - Blink example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board. 
It also shows how to use idle mode with different energy saving modes ( from EM1 to EM2 - configured in FreeRTOSConfig.h file).
This example is intended as a skeleton for new projects using FreeRTOS.

Board:  Silicon Labs EFM32G-DK3550 Development Kit
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.dk3550.demo.freertos_tickless" label="DK3550 freertos_tickless">
    <property key="blurb" value="FreeRTOS - Tickless example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd3302a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32G_DK3550/freertos_tickless/bin/freertos_tickless.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;FreeRTOS - Tickless example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks,
one sender generating number and one receiver that displays the number on the LCD. The FreeRTOS is 
configured in tickless mode, going into EM2 when no tasks are active.

EM3 mode cannot be used in this example because the LCD driver and timer are not available in EM3.
For more details, see the configuraiton in FreeRTOSConfig.h file.

Board:  Silicon Labs EFM32G-DK3550 Development Kit
Device: EFM32G890F128&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.dk3550.demo.guidemo_mm" label="DK3550 guidemo_mm">
    <property key="blurb" value="emWin example - show gui functionality"/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd3302a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32G_DK3550/guidemo_mm/bin/guidemo_mm.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;emWin example - show gui functionality&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the emWin library.

TFT driver is controlled in so called &quot;Memory Map&quot;
configuration, where internal RAM of TFT controller
is used. There is additional framebuffer needed so
this example could be run in small RAM footprint
systems. The code fits 128kB flash and uses less
than 32kB RAM.

In idle mode (where no user interaction is required)
EM2 mode is enabled, allowing reduced power consumption.

Simple application showing different visual effects
which could be achieved by means of emWin

Board:  Silicon Labs EFM32G-DK3550 Development Kit
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.dk3550.demo.hardfault" label="DK3550 hardfault">
    <property key="blurb" value="Hardfault handler example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd3302a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32G_DK3550/hardfault/bin/hardfault.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Hardfault handler example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project demonstrates the use of the hard fault handler, and
how to install and use another HardFault exception handler to provide
useful information when these types of errors occurs.
The information is transmitted on the kit UART port, serial configuration
115200-8-N-1 is used.

Three function calls for triggering software errors to be trapped is
provided, comment them in and out to select between them.

Board:  Silicon Labs EFM32G-DK3550 Development Kit
Device: EFM32G890F128

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.dk3550.demo.inttemp" label="DK3550 inttemp">
    <property key="blurb" value="Internal temperature sensor example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd3302a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32G_DK3550/inttemp/bin/inttemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB including DVK
BSP (board support package) and demonstrates the use of the internal
temperature sensor and ADC on the EFM32.

Note: EFM32 devices with production ID lower than 18 may measure inaccurate
temperatures due to a sensor calibration bug.

The following configuration is possible:

- Joystick push toggles between Fahrenheit and Celsius display mode.

Board:  Silicon Labs EFM32G_DK3550 Development Kit
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.dk3550.demo.joystick" label="DK3550 joystick">
    <property key="blurb" value="Kit joystick control example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd3302a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32G_DK3550/joystick/bin/joystick.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Kit joystick control example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library to
demonstrate the joystick control API of the development kit. Please note that
you need to configure the AEM-state to &quot;EFM&quot; to be able to operate this
example. The example also shows how to enable and use a GPIO interrupt.

Board:  Silicon Labs EFM32G-DK3550 Development Kit
Device: EFM32G890F128

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.dk3550.demo.leuart" label="DK3550 leuart">
    <property key="blurb" value="LEUART/DMA in Energy mode2 output example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd3302a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32G_DK3550/leuart/bin/leuart.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project reads and sends the data back to terminal using LEUART
while staying in EM2.

It uses the EFM32 CMSIS and EMLIB, to demonstrate the
use of LEUART communication using DMA under the EM2 on the 
EFM32G_DK3550 development kit.

The LEUART is configured to be used with DMA under EM2.
The terminal configuration is 9600-8-N-1.
The DMA is configured to handle read and write data bytes from LEUART under EM2.

Testing:
1. Use the LEUART serial port header to connect the LEUART to your PC.
2. Configure terminal to 9600-8-N-1.
3. Enter characters from your keyboard and see if you receive the echo on the terminal.
4. Check the average current consumption is equal to EM2 on Energy Profiler.

Board:  Silicon Labs EFM32G_DK3550 Development Kit
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.dk3550.demo.mpu" label="DK3550 mpu">
    <property key="blurb" value="Cortex-M3 Memory Protection Unit example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd3302a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32G_DK3550/mpu/bin/mpu.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Cortex-M3 Memory Protection Unit example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example configures the MPU to demonstrate usage of this peripheral
to catch memory access violations. The serial port is used to create and
report on access violations, on LEUART1.

Connect a terminal on RS232 port with baudrate 9600-8-N-1. This demo
requires the use of the RS232 port in LEUART mode, UART mode will not
work.

The example will also use Energy Mode 2 (EM2).

Board:  Silicon Labs EFM32G_DK3550 Development Kit
Device: EFM32G890F128

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.dk3550.demo.peripherals" label="DK3550 peripherals">
    <property key="blurb" value="Peripheral control example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd3302a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32G_DK3550/peripherals/bin/peripherals.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Peripheral control example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library
to demonstrate how to enable the access to various on-board peripherals.
To reduce leakage current, the EFM32G-DK3550 board has several analog
switches, and to enable extended functionality there are multiplexers
which need to be configured correctly for most of the kit peripherals.

The on-board LEDs will light up according to the configured state of the
peripherals.

Board:  Silicon Labs EFM32G-DK3550 Development Kit
Device: EFM32G890F128

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.dk3550.demo.powertest" label="DK3550 powertest">
    <property key="blurb" value="Power test example, running demonstration of energy modes."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd3302a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32G_DK3550/powertest/bin/powertest.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library 
to demonstrate the use of the various Energy Modes available on the
EFM32G890F128. When running this example, the Energy Profiler tool
in Simplicity Studio can be used to show the power consumption of each 
energy mode.

Board:  Silicon Labs EFM32G-DK3550 Development Kit
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.dk3550.demo.preamp" label="DK3550 preamp">
    <property key="blurb" value="Pre-amplifier example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd3302a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32G_DK3550/preamp/bin/preamp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Pre-amplifier example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including DK BSP (board 
support package) and demonstrates the use of the ADC/DAC/DMA/PRS/TIMER
to implement a very simple pre-amplifier.

- Connect an audio source to the audio in connector
  on the DVK, for instance an MP3 player.
- Connect an active loudspeaker with built-in amplifier
  to the audio out connector on the DVK.

The input signal is converted to digital and level adjusted by the EFM32
core before being converted back to analog.

The output volume level is adjusted with kit pushbuttons PB1 and PB2.
Output level is indicated by the 14 leftmost user LEDs.

The example will clip the output signal if exceeding predefined level.
This may occur due to too high input signal and/or to high volume 
setting. Clipping is indicated by the rightmost user LED.

Push the AEM button on the kit until &quot;EFM&quot; shows in the upper right
corner of the TFT display to activate PB1 and PB2 pushbuttons.

WARNING:
--------
Do not attach or use headphones with this example. Use small
loadspeakers with built in amplification, ensuring volume is at an
acceptable level. Exposure to loud noises from any source for extended
periods of time may temporarily or permanently affect your hearing. The
louder the volume sound level, the less time is required before your
hearing could be affected. Hearing damage from loud noise is sometimes
undetectable at first and can have a cumulative effect.

Board:  Silicon Labs EFM32G-DK3550 Development Kit
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.dk3550.demo.reversi_mm" label="DK3550 reversi_mm">
    <property key="blurb" value="emWin example - reversi game."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd3302a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32G_DK3550/reversi_mm/bin/reversi_mm.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;emWin example - reversi game.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the emWin library.

TFT driver is controlled in so called &quot;Memory Map&quot;
configuration, where internal RAM of TFT controller 
is used. There is additional framebuffer needed so 
this example could be run in small RAM footprint 
systems. The code fits 128kB flash and uses less 
than 32kB RAM.

In idle mode (where no user interaction is required)
EM2 mode is enabled, allowing reducing power consuption
down to 20uA.

The game is controlled using touch pad or joystick. 
If there is misalignment when using touch pad please
do calibration - from menu select:
Options-&gt;Touch Panel calibration.

Board:  Silicon Labs EFM32G-DK3550 Development Kit
Device: EFM32G890F128

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.dk3550.demo.rs232" label="DK3550 rs232">
    <property key="blurb" value="RS232/UART output example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd3302a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32G_DK3550/rs232/bin/rs232.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;RS232/UART output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB, to demonstrates the
use of UART and LEUART communication on the EFM32G-DK3550 development kit.

For the default UART communication, serial configuration 115200-8-N-1 is used.
If LEUART mode is configured by defining &quot;RETARGET_LEUART1&quot; as a build option,
terminal configuration is 9600-8-N-1.

Board:  Silicon Labs EFM32G-DK3550 Development Kit
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.dk3550.demo.slideshow" label="DK3550 slideshow">
    <property key="blurb" value="Slideshow example using microSD."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd3302a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32G_DK3550/slideshow/bin/slideshow.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Slideshow example using microSD.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example uses the FatFS library for accssing a filesystem on a 
microSD card. It will loop through the files present on the card. 
BMP files with a resolution less than the resolution of the screen
(320x240) will be displayed on the TFT.

The demo has two modes of operation. If a file called &quot;files.txt&quot; is
present on the root of the microSD card, this file will be read. The
BMP files will then be displayed in the order they are listed in the
file.

If this file is not present, all files on the root of tile SD card is 
looped through and displayed. If the BMP decoder cannot display a 
certain file, an error message is displayed.

WARNING:
SD2119 driver and GLIB graphics library are not intended for production 
purposes, and are included here to illustrate TFT display driving only.
This components are subject to changes in API/usage and there will be 
no effort to keep compatibility, or to support this software in any way.

NOTE:
This example is too large to be built with IDEs with 32KB size limits.

Board:  Silicon Labs EFM32G-DK3550 Development Kit
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.dk3550.demo.temperature" label="DK3550 temperature">
    <property key="blurb" value="I2C temperature sensor example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd3302a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32G_DK3550/temperature/bin/temperature.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;I2C temperature sensor example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB including DK BSP
(board support package) and demonstrates the use of the I2C bus
accessing the temperature sensor on the DK.

The following configuration is possible:

- Joystick push toggles between Fahrenheit and Celsius display mode.

The result is displayed on the TFT-LCD. Press the AEM button to show
Keys:EFM to enable on-screen results.

Board:  Silicon Labs EFM32G-DK3550 Development Kit
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.dk3550.demo.tft" label="DK3550 tft">
    <property key="blurb" value="TFT Addressed map coloured blocks example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd3302a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32G_DK3550/tft/bin/tft.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;TFT Addressed map coloured blocks example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the board
support package support functions/drivers to demonstrate driving the
kit's TFT-display from the EFM32 Gecko.

This example is driving the display in what is called &quot;address mapped mode&quot;
(or mode 8080). Using this mode, the framebuffer resides in the memory of
the SSD2119 controller chip.

WARNING:
SD2119 driver and GLIB graphics library are not intended for production
purposes, and are included here to illustrate TFT display driving only.

These components are subject to changes in API/usage and there will be
no effort to keep compatibility, or to support this software in any way.

Board:  Silicon Labs EFM32G-DK3550 Development Kit
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.dk3550.demo.tftprintf" label="DK3550 tftprintf">
    <property key="blurb" value="Printf output on TFT-LCD."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd3302a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32G_DK3550/tftprintf/bin/tftprintf.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Printf output on TFT-LCD.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the kit's TFT-display from the EFM32 Gecko. In this case the display is
used as output from a regular printf in the application, as an
alternative to the RS232 port.

This example is driving the display in what is called &quot;address mapped
mode&quot; (or mode 8080). Using this mode, the framebuffer resides in the
memory of the SSD2119 controller chip of the URT TFT-LCD display.

Board:  Silicon Labs EFM32G-DK3550 Development Kit
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.dk3550.demo.ucos2_port" label="DK3550 ucos2">
    <property key="blurb" value="uC/OS-II RTOS on EFM32 using example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd3302a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32G_DK3550/ucos2_port/bin/ucos2.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;uC/OS-II RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This is a port of the uC/OS-II RTOS from Micrium Inc, http://www.micrium.com

The port has been adapted by Silicon Labs for use with our Development
Kit. It requires the standard EFM32 CMSIS package (including EMLIB).

The example has three tasks:
 - Task1: LED blink task
 - Task2: Receives characters from serial port and posts message to Task3
 - Task3: Receives message from Task2 and writes it on LCD and serial port

Serial port can be chosen between:
USART1 - location 1 is used, GPIO port D pins 0 and 1, baudrate 115200-8-N-1.
LEUART0 - location 0 is used, GPIO port D pins 4 and 5, baudrate 9600-8-N-1.

uC/OS-II is provided in source form for FREE evaluation, for educational use
or for peaceful research.

If you plan on using uC/OS-II in a commercial product you need to contact
Micrium to properly license its use in your product. We provide ALL the
source code for your convenience and to help you experience uC/OS-II.
The fact that the source is provided does NOT mean that you can use it without
paying a licensing fee.

For commercial use, contact Micrium, http://www.micrium.com for details.

Board:  Silicon Labs EFM32G_DK3550 Development Kit
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.dk3550.demo.wavplayer" label="DK3550 wavplayer">
    <property key="blurb" value="Audio .WAV format player from microSD card."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd3302a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32G_DK3550/wavplayer/bin/wavplayer.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Audio .WAV format player from microSD card.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including DK BSP (board 
support package) and demonstrates how to play a wav file from the 
microSD-card.

The wav file must be named &quot;sweet1.wav&quot; and must be encoded with 16-bit
PCM audio sampling.

The output volume level is adjusted with kit pushbuttons PB1 and PB2.
Output level is indicated by the 14 leftmost user LEDs.
Push the AEM button on the kit until &quot;EFM&quot; shows in the upper right
corner of the TFT display to activate PB1 and PB2 pushbuttons.

It sets up access to DVK registers, and supports fat-filesystem on the
sd-card.

Board:  Silicon Labs EFM32G-DK3550 Development Kit
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg.stk3300.demo.blink" label="STK3300 blink">
    <property key="blurb" value="Blink example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <property key="boardCompatibility" value="brd2100a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32TG_STK3300/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library to
demonstrate the use of the LED on the starter kit. This example is intended as
a skeleton for new projects.

Board:  Silicon Labs EFM32TG_STK3300 Starter Kit
Device: EFM32TG840F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg.stk3300.demo.clock" label="STK3300 clock">
    <property key="blurb" value="Wall Clock example using the segment LCD."/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <property key="boardCompatibility" value="brd2100a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32TG_STK3300/clock/bin/clock.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Wall Clock example using the segment LCD.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS  and demonstrates  the use of 
the LCD controller, RTC (real time counter), VCMP, GPIO and various 
Energy Modes (EM).

The RTC is set up to wake the EFM32 from EM2 every minute. During this 
interval, the LCD is updated to reflect the current time. The animation 
feature is used to show the seconds. This is done by using the frame 
event counter to drive the animation feature every second.

The VCMP is used to measure the input voltage on every wakeup. If the 
voltage drops too low, voltage boost is enabled on the LCD. This makes 
the LCD clear and readable even when running on low batteries.

Board:  Silicon Labs EFM32TG_STK2100 Development Kit
Device: EFM32TG840F32 with LCD 
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg.stk3300.demo.cpt007b" label="STK3300 cpt007b_demo">
    <property key="blurb" value="CPT007B Demo"/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <property key="boardCompatibility" value="brd2100a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32TG_STK3300/cpt007b/bin/cpt007b_demo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;CPT007B Demo&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This demo demonstrates the capacitive button function of CPT007B fixed function
board. This demo runs on the EFM32 STK, and communicates with CPT007B through
the GPIO pins on the EXP header. Virtual buttons on STK's LCD screen indicate
whether the capacitive sensing buttons on CPT007B are pressed or released.
This demo supports up to 7 capacitive buttons on CPT007B
 
Board:  Silicon Labs EFM32TG_STK3300 Starter Kit and CPT007B Evaluation Board
Device: EFM32TG840F32&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg.stk3300.demo.emlcd" label="STK3300 emlcd">
    <property key="blurb" value="Energy Mode rolling demo, with segment LCD."/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <property key="boardCompatibility" value="brd2100a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32TG_STK3300/emlcd/bin/emlcd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Energy Mode rolling demo, with segment LCD.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library to
demonstrate the use of the LCD controller, RTC (real time counter), GPIO and
various Energy Modes (EM) on the starter kit.

EM2 is used for delays in between refreshing the LCD display, and a lot of
&quot;eye candy&quot; are present to show off the MCU module's LCD display.

The LCD controller drives the display down to EM2. In the demo, EM2 is used
for &quot;most&quot; delays to show off this feature. The user can press PB0 or PB1 to
activate EM3 and EM4. EM4 requires a system reset, while PB0 again will wake
up the system  from Energy Mode 3.

Board:  Silicon Labs EFM32TG_STK3300 Starter Kit
Device: EFM32TG840F32

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg.stk3300.demo.emode" label="STK3300 emode">
    <property key="blurb" value="Select a single energy mode, and stay there."/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <property key="boardCompatibility" value="brd2100a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32TG_STK3300/emode/bin/emode.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 EMLIB and demonstrates the use of the LCD 
controller, RTC (real time counter), GPIO and various Energy Modes (EM).

The user can press the pushbuttons PB0 and PB1 to select which energy mode to 
demonstrate.

This demo application has been made to give a quick demo of the
Energy Profiler from Silicon Labs and to reproduce the different 
energy modes seen in the EFM32 datasheet current consumption table. 

Board:  Silicon Labs EFM32TG_STK3300 Development Kit
Device: EFM32TG840F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg.stk3300.demo.freertos_blink" label="STK3300 freertos_blink">
    <property key="blurb" value="FreeRTOS - Blink example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <property key="boardCompatibility" value="brd2100a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32TG_STK3300/freertos_blink/bin/freertos_blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;FreeRTOS - Blink example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board. 
It also shows how to use idle mode with different energy saving modes ( from EM1 to EM2 - configured in FreeRTOSConfig.h file).
This example is intended as a skeleton for new projects using FreeRTOS.

Board:  Silicon Labs EFM32TG_STK3300 Starter Kit
Device: EFM32TG840F32&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg.stk3300.demo.freertos_tickless" label="STK3300 freertos_tickless">
    <property key="blurb" value="FreeRTOS - Tickless example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <property key="boardCompatibility" value="brd2100a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32TG_STK3300/freertos_tickless/bin/freertos_tickless.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;FreeRTOS - Tickless example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks,
one sender generating number and one receiver that displays the number on the LCD. The FreeRTOS is 
configured in tickless mode, going into EM2 when no tasks are active.

EM3 mode cannot be used in this example because the LCD driver and timer are not available in EM3.
For more details, see the configuraiton in FreeRTOSConfig.h file.

Board:  Silicon Labs EFM32TG_STK3300 Starter Kit
Device: EFM32TG840F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg.stk3300.demo.gpiointerrupt" label="STK3300 gpiointerrupt">
    <property key="blurb" value="Gpio interrupt example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <property key="boardCompatibility" value="brd2100a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32TG_STK3300/gpiointerrupt/bin/gpiointerrupt.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Gpio interrupt example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and gpio interrupt dispatcher driver to show
how to handle multiple GPIO interrupts. Button PB1 sets LED on and PB0 unsets it.

Board:  Silicon Labs EFM32TG_STK3300 Starter Kit
Device: EFM32TG840F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg.stk3300.demo.inttemp" label="STK3300 inttemp">
    <property key="blurb" value="Internal temperature sensor example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <property key="boardCompatibility" value="brd2100a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32TG_STK3300/inttemp/bin/inttemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB to demonstrate
the usage of the internal temperature sensor on Tiny Gecko devices.

Note: EFM32 devices with production ID lower than 18 may measure inaccurate
temperatures due to a sensor calibration bug.

Board:  Silicon Labs EFM32TG_STK3300 Starter Kit
Device: EFM32TG840F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg.stk3300.demo.lcsense" label="STK3300 lcsense">
    <property key="blurb" value="LC sense example using LESENSE."/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <property key="boardCompatibility" value="brd2100a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32TG_STK3300/lcsense/bin/lcsense.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;LC sense example using LESENSE.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and demonstrates the use of 
the LESENSE peripheral on the board.

This demo has two different modes.
To change between them, press PB0. In Mode0 (default). The LESENSE
module will wake up whenever a metal object is passed above the LC
sensor in the bottom right of the STK. In Mode 1, the EFM32 will only
wake up every fifth time the metal object is passed over the sensor.

Board: Silicon Labs EFM32TG_STK3300 Development Kit
Device: EFM32TG840F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg.stk3300.demo.leuart" label="STK3300 leuart">
    <property key="blurb" value="LEUART/DMA in Energy mode2 output example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <property key="boardCompatibility" value="brd2100a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32TG_STK3300/leuart/bin/leuart.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project reads and sends the data back to terminal using LEUART
while staying in EM2.

It uses the EFM32 CMSIS and EMLIB, to demonstrate the
use of LEUART communication using DMA under the EM2 on the 
EFM32TG_STK3300 Starter Kit.

The LEUART is configured to be used with DMA under EM2.
The terminal configuration is 9600-8-N-1.
The DMA is configured to handle read and write data bytes from LEUART under EM2.

Testing:
1. Use the expansion header to connect the LEUART to your PC.
2. Pin Configuration:
	2.1. Pin-12 (PD4) LEUART0_TX
	2.2. Pin-14 (PD5) LEUART0_RX
	2.3. Pin-1 Gnd

3. Configure terminal to 9600-8-N-1.
4. Enter characters from your keyboard and see if you receive the echo on the terminal.
5. Check the average current consumption is equal to EM2 on Energy Profiler.

Board:  Silicon Labs EFM32TG_STK3300 Starter Kit
Device: EFM32TG840F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg.stk3300.demo.lightsense" label="STK3300 lightsense">
    <property key="blurb" value="Lightsensor example using LESENSE."/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <property key="boardCompatibility" value="brd2100a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32TG_STK3300/lightsense/bin/lightsense.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Lightsensor example using LESENSE.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and demonstrates the use of 
the LESENSE peripheral on the board.

This demo has two different modes.
To change between them, press PB0. In Mode0 (default). The LESENSE
module will wake up whenever a &quot;dark&quot; event is detected by the light sensor
below the &quot;EFM32&quot; sign on the right from the LCD on the STK. In Mode 1, 
EFM32 will only wake up on every fifth &quot;dark&quot; event.

Board: Silicon Labs EFM32TG_STK3300 Development Kit
Device: EFM32TG840F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg.stk3300.demo.nvm_simple" label="STK3300 nvm_simple">
    <property key="blurb" value="nvm_simple - non-volatile memory driver usage simple example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <property key="boardCompatibility" value="brd2100a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32TG_STK3300/nvm_simple/bin/nvm_simple.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;nvm_simple - non-volatile memory driver usage simple example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example shows simple usage of NVM module.

It stores object (32bit word in this case) into flash region declared 
as non-volatile memory area. It uses wear leveling and demonstrates 
simple use of the NVM driver. There are two types of pages: &quot;normal&quot; 
dedicated for storing multiple objects which doesn't change often 
and &quot;wear&quot; which can store single object (but this could be structure
containing many fields) that can often change. In this example on two pages 
same object is stored but NVM could handle multiple pages with different objects.

PB0 - short press recalls data from &quot;normal&quot; page
PB0 - long press store data to &quot;normal&quot; page
PB1 - counts up, and after releasing stores data to &quot;wear&quot; page

RESET - resets CPU and if there were valid data in NVM recovers last data value.

Board:  Silicon Labs EFM32GG-STK3300 Development Kit
Device: EFM32TG840F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg.stk3300.demo.powertest" label="STK3300 powertest">
    <property key="blurb" value="Power test example, running demonstration of energy modes."/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <property key="boardCompatibility" value="brd2100a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32TG_STK3300/powertest/bin/powertest.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library
to demonstrate the use of the various Energy Modes available on the
EFM32TG840F32. When running this example, the Energy Profiler tool
in Simplicity Studio can be used to show the power consumption of each 
energy mode.

Board:  Silicon Labs EFM32TG-STK3300 Development Kit
Device: EFM32TG840F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg.stk3300.demo.rtx_blink" label="STK3300 rtx_blink">
    <property key="blurb" value="Keil RTX RTOS - Blink example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <property key="boardCompatibility" value="brd2100a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32TG_STK3300/rtx_blink/bin/rtx_blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - Blink example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the Keil RTX RTOS, and gives a basic demonstration
of using two tasks to blink the LEDs on the board.
This example is intended as a skeleton for new projects using Keil RTX.

Board:  Silicon Labs EFM32TG-STK3300 Development Kit
Device: EFM32TG840F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg.stk3300.demo.rtx_tickless" label="STK3300 rtx_tickless">
    <property key="blurb" value="Keil RTX RTOS - tick-less example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <property key="boardCompatibility" value="brd2100a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32TG_STK3300/rtx_tickless/bin/rtx_tickless.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - tick-less example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the Keil RTX RTOS, and gives a basic demonstration
of using two tasks; one sender generating number and one receiver that displays
the number on LCD. The RTX is configured in tick-less mode, going into EM2 when
no tasks are active. This example is intended as a skeleton for new projects
using Keil RTX for energy aware applications.

Board:  Silicon Labs EFM32TG-STK3300
Device: EFM32TG840F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg.stk3300.demo.rtx_tickless_nolcd" label="STK3300 rtx_tickless_nolcd">
    <property key="blurb" value="Keil RTX RTOS - tick-less example with LCD off"/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <property key="boardCompatibility" value="brd2100a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32TG_STK3300/rtx_tickless_nolcd/bin/rtx_tickless_nolcd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - tick-less example with LCD off&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example is modification of rtx_tickless to demonstrate ultra low power consumption 
of Gecko processors in connection with RTX RTOS. Comparing to previous example it has LCD
turned off. Low frequency crystal oscillator was disabled and low frequency RC oscillator
used instead to lower energy consumption even more.


This example project uses the Keil RTX RTOS, and gives a basic demonstration
of using two tasks; one sender generating number and one receiver.
The RTX is configured in tick-less mode, going into EM2 when
no tasks are active. This example is intended as a skeleton for new projects
using Keil RTX for energy aware applications.

Board:  Silicon Labs EFM32TG-STK3300
Device: EFM32TG840F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg.stk3300.demo.touch" label="STK3300 touch">
    <property key="blurb" value="Capactive touch example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <property key="boardCompatibility" value="brd2100a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32TG_STK3300/touch/bin/touch.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Capactive touch example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrates the capacitive touch capability of the EFM32 and the
Tiny Gecko STK. This is a port of the EFM32_G8xx_STK capacitive touch demo.

It demonstrates the use of LESENSE, ACMP, VCMP, LCD, and EMU.

Board:  Silicon Labs EFM32TG_STK3300
Device: EFM32G840F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg.stk3300.demo.ucos2_port" label="STK3300 ucos2">
    <property key="blurb" value="uC/OS-II RTOS on EFM32 using example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <property key="boardCompatibility" value="brd2100a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32TG_STK3300/ucos2_port/bin/ucos2.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;uC/OS-II RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This is a port of the uC/OS-II RTOS from Micrium Inc, http://www.micrium.com

The port has been adapted by Silicon Labs for use with our Development
Kit. It requires the standard EFM32 CMSIS package (including EMLIB).

The example has three tasks:
 - Task1: LED blink task
 - Task2: Receives characters from serial port and posts message to Task3
 - Task3: Receives message from Task2 and writes it on LCD and serial port

Serial port can be chosen between:
USART1 - location 1 is used, GPIO port D pins 0 and 1, baudrate 115200-8-N-1.
LEUART0 - location 0 is used, GPIO port D pins 4 and 5, baudrate 9600-8-N-1.

These USARTs are by default not connected to any serial port, so this needs
to be connected to external RS232 ports to be usable.

uC/OS-II is provided in source form for FREE evaluation, for educational use
or for peaceful research.

If you plan on using uC/OS-II in a commercial product you need to contact
Micrium to properly license its use in your product. We provide ALL the
source code for your convenience and to help you experience uC/OS-II.
The fact that the source is provided does NOT mean that you can use it without
paying a licensing fee.

For commercial use, contact Micrium, http://www.micrium.com for details.

Board:  Silicon Labs EFM32TG_STK3300 Starter Kit
Device: EFM32TG840F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg.stk3300.demo.userpage" label="STK3300 userpage">
    <property key="blurb" value="Progamming and use of user flash page for data."/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <property key="boardCompatibility" value="brd2100a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32TG_STK3300/userpage/bin/userpage.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Progamming and use of user flash page for data.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS  and demonstrates the programming of
the user page in flash. The page can be used for data such as keys, serial
numbers and other information that should not be deleted by a device erase.

PB0 increases the main counter.
PB1 saves the main counter value to the user page and displays how many Flash writes
have been issued.

Board:  Silicon Labs EFM32-TG-STK3300 Development Kit
Device: EFM32TG840QF32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg.stk3300.demo.weatherstation" label="STK3300 weatherstation">
    <property key="blurb" value="Weatherstation using the Sensor add-on board on the EFM32TG-STK3300."/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg.*"/>
    <property key="boardCompatibility" value="brd2100a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32TG_STK3300/weatherstation/bin/weatherstation.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Weatherstation using the Sensor add-on board on the EFM32TG-STK3300.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the LCD display on the EFM32TG_STK3300 kit. In addition, it
demonstrates the use of Silabs I2C based sensors on the expansion board
header.

You must have a Silabs Sensor add-on board to make use of this demo.
Once the demo is started, hold your hand over the gesture sensor. Once
the sensor detects your hand the display will become active.

Swipe left and right over the sensor to scroll through temperature, humidity
and UV index. On the temperature screen, you can swipe up or down to change
between Fahrenheit or Celcius.

Note: Due to the size of this example, you might need to enable compiler 
optimizations to be able to fit the entire binary in the 32k of flash!

Board:  Silicon Labs EFM32TG-STK3300 Development Kit and Sensor Add-on board
Device: EFM32TG840F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.blink" label="DK3850 blink">
    <property key="blurb" value="Blink example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library
to demonstrate the use of the LED on the EFM32WG-DK3850 development kit.
This example is intended as a skeleton for new projects.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.eeprom" label="DK3850 eeprom">
    <property key="blurb" value="I2C eeprom example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/eeprom/bin/eeprom.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;I2C eeprom example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB including DK BSP
(board support package) and demonstrates the use of the I2C bus
accessing the EEPROM on the DK.

The first 3 bytes of the EEPROM is displayed on the TFT screen (this
will normally be FFFFFF first time.) Since stored in EEPROM, the data
survives resets and power cycles.

The following usage is possible:

- Joystick up/down will increment/decrement the first byte (Byte0) in
  the EEPROM. Byte1 is then set to Byte0+1, and Byte2 is set to Byte1+1.
- Press SW4 button to reset 3 first bytes to 0xFF.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.emode" label="DK3850 emode">
    <property key="blurb" value="Energy Mode 0-4 example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/emode/bin/emode.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Energy Mode 0-4 example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project for the EFM32WG-DK3850 development kit, illustrates the
various energy saving modes of the EFM32WG990F256.

Use joystick Up and Down to select the demo, after pressing the kit AEM 
button to enable the display to be driven from the Wonder Gecko.

When the correct demo has been selected, press PB1 to activate it. 
After this, you need to use the kit's AEM button again to go back to the
energy mesaurement display. A new press on the AEM button will not bring
back the original screen, as the Wonder Gecko will be in a sleep mode. You
need to restart to test another demo.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.fatcon" label="DK3850 fatcon">
    <property key="blurb" value="FAT File System console example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/fatcon/bin/fatcon.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;FAT File System console example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library
to demonstrate SPI-access to the Micro-SD card on the EFM32WG-DK3850
development kit. The application gives a small &quot;console&quot; on the serial
port which can be used to view and list contents of the file system.
Serial configuration 115200-8-N-1 is used.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.freertos_blink" label="DK3850 freertos_blink">
    <property key="blurb" value="FreeRTOS - Blink example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/freertos_blink/bin/freertos_blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;FreeRTOS - Blink example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board. 
It also shows how to use idle with different energy saving modes with or without ticless mode( from EM1 to EM3 - configured in FreeRTOSConfig.h file).
This example is intended as a skeleton for new projects using FreeRTOS.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.graphxy" label="DK3850 graphxy">
    <property key="blurb" value="emWin example - XY Graph demonstration."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/graphxy/bin/graphxy.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;emWin example - XY Graph demonstration.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the emWin library.

Control using touch panel or joystick.
On application startup there is possibility to
perform touch panel calibration.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.graphxy_mm" label="DK3850 graphxy_mm">
    <property key="blurb" value="emWin example - XY Graph demonstration - energy efficient."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/graphxy_mm/bin/graphxy_mm.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;emWin example - XY Graph demonstration - energy efficient.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the emWin library maintaining
low power consumption.

TFT driver is controlled in so called &quot;Memory Map&quot;
configuration, where internal RAM of TFT controller 
is used. There is no additional framebuffer needed
so this example could be run in small RAM footprint 
systems. The code fits 128kB flash and uses less 
than 32kB RAM.

In idle mode (where no user interaction is required)
EM2 mode is enabled, allowing reducing power consuption
down to ~4uA.

Control using touch panel or joystick.
On application startup there is possibility to
perform touch panel calibration.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.guidemo" label="DK3850 guidemo">
    <property key="blurb" value="emWin example - show gui functionality"/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/guidemo/bin/guidemo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;emWin example - show gui functionality&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the emWin library.

Simple application showing different visual effects
which could be achieved by means of emWin

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.guidemo_mm" label="DK3850 guidemo_mm">
    <property key="blurb" value="emWin example - show gui functionality - energy efficient."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/guidemo_mm/bin/guidemo_mm.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;emWin example - show gui functionality - energy efficient.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the emWin library maintaining
low power consumption.

TFT driver is controlled in so called &quot;Memory Map&quot;
configuration, where internal RAM of TFT controller 
is used. There is no additional framebuffer needed 
so this example could be run in small RAM footprint 
systems.

Simple application showing different visual effects
which could be achieved by means of emWin.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.hardfault" label="DK3850 hardfault">
    <property key="blurb" value="Hardfault handler example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/hardfault/bin/hardfault.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Hardfault handler example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project demonstrates the use of the hard fault handler, and
how to install and use another HardFault exception handler to provide
useful information when these types of errors occurs.
The information is transmitted on the kit UART port, serial configuration
115200-8-N-1 is used.

Three function calls for triggering software errors to be trapped is
provided, comment them in and out to select between them.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.inttemp" label="DK3850 inttemp">
    <property key="blurb" value="Internal temperature sensor example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/inttemp/bin/inttemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB including DK BSP
(board support package) and demonstrates the use of the internal
temperature sensor and ADC on the EFM32.

Note: EFM32 devices with production ID lower than 18 may measure inaccurate
temperatures due to a sensor calibration bug.

The following configuration is possible:

- Joystick push toggles between Fahrenheit and Celsius display mode.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.joystick" label="DK3850 joystick">
    <property key="blurb" value="Kit joystick control example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/joystick/bin/joystick.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Kit joystick control example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library to
demonstrate the joystick control API of the development kit. Please note that
you need to configure the AEM-state to &quot;EFM&quot; to be able to operate this
example. The example also shows how to enable and use a GPIO interrupt.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.leuart" label="DK3850 leuart">
    <property key="blurb" value="LEUART/DMA in Energy mode2 output example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/leuart/bin/leuart.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project reads and sends the data back to terminal using LEUART
while staying in EM2.

It uses the EFM32 CMSIS and EMLIB, to demonstrate the
use of LEUART communication using DMA under the EM2 on the 
EFM32WG_DK3850 development kit.

The LEUART is configured to be used with DMA under EM2.
The terminal configuration is 9600-8-N-1.
The DMA is configured to handle read and write data bytes from LEUART under EM2.

Testing:
1. Use the LEUART serial port header to connect the LEUART to your PC.
2. Configure terminal to 9600-8-N-1.
3. Enter characters from your keyboard and see if you receive the echo on the terminal.
4. Check the average current consumption is equal to EM2 on Energy Profiler.

Board:  Silicon Labs EFM32WG_DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.life" label="DK3850 life">
    <property key="blurb" value="Conway's game of life, TFT direct drive example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/life/bin/life.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Conway's game of life, TFT direct drive example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrate driving the EFM32GG_DK37850 kit's TFT-display 
from the EFM32 Wonder Gecko.

This example is driving the display in &quot;direct drive&quot; (or mode generic in 
SSD2119 terms). Using this mode, the framebuffer resides in the external
PSRAM memory of the development kit. This can be accessed directly to 
modify the screen contents.

This demo demonstrates the use of frame buffer control, and implements
Conway's Game of Life, with triple buffering support. Triple buffering
works the following way
  
 We have 3 frame buffers, A, B and C.

 Buffer A, is currently being displayed on the screen
 Buffer B, is being updated with graphics

 When B is finished - B is set to be displayed on the next frame update
                      C is set to be updated with new graphics

 When C is finished - C is set to be displayed on the next frame update 
                      A is set to be updated with new graphics

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.lines" label="DK3850 lines">
    <property key="blurb" value="Lines TFT Direct Drive example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/lines/bin/lines.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Lines TFT Direct Drive example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrate driving the EFM32GG_DK37850 kit's TFT-display
from the EFM32 Wonder Gecko in &quot;direct drive&quot; (or mode generic in
SSD2119 terms). Using this mode, the framebuffer resides in the external
PSRAM memory of the development kit. This can be accessed directly to
modify the screen contents.

In this mode, the display is configured for having 16-bits per pixel,
RGB with 5-6-5 bits color components of each. The framebuffer is located
at EBI bank 2, offset address 0x88000000. This demo simply draws some
alternating, coloured lines over the entire display.

WARNING:
SD2119 driver and GLIB graphics library are not intended for production 
purposes, and are included here to illustrate TFT display driving only.

These components are subject to changes in API/usage and there will be 
no effort to keep compatibility, or to support this software in any way.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.mandel" label="DK3850 mandel">
    <property key="blurb" value="Mandelbrot image zoom example, using TFT direct drive."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/mandel/bin/mandel.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Mandelbrot image zoom example, using TFT direct drive.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrate driving the EFM32GG_DK37850 kit's TFT-display 
from the EFM32 Wonder Gecko.

The example is driving the display in &quot;direct drive&quot; (or mode generic in 
SSD2119 terms). Using this mode, the framebuffer resides in the external
PSRAM memory of the development kit. This can be accessed directly to 
modify the screen contents.

This example makes a simple mandelbrot fractal zoomer, using up most 
of the external 4MB PSRAM to store the various images, where the screens
are being flipped around in the interrupt routine.

WARNING:
SD2119 driver and GLIB graphics library are not intended for production 
purposes, and are included here to illustrate TFT display driving only.
These components are subject to changes in API/usage and there will be 
no effort to keep compatibility, or to support this software in any way.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.norflash" label="DK3850 norflash">
    <property key="blurb" value="Norflash example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/norflash/bin/norflash.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Norflash example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrates use of the NORFLASH driver.

Connect a terminal to the serialport of the DK (115200-N-8-1).
Operations on the flash are initiated by issuing commands on the terminal.
Command &quot;h&quot; will print a help screen on the terminal :

    Available commands:
        fi        : Show flash information
        h         : Show this help
        dump n    : Show first 16 bytes of sector n
        dumps n   : Show entire sector n content
        blc n     : Blankcheck sector n
        bld       : Blankcheck entire device
        erase n   : Erase sector n
        eraseall  : Erase entire device
        prog n    : Program first 16 bytes of sector n with byte pattern
        exec n    : Execute &quot;blink&quot; from sector n
        misc      : Test misc. NORFLASH API functions
        rspeed    : Measure flash read speed

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.peripherals" label="DK3850 peripherals">
    <property key="blurb" value="Peripheral control example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/peripherals/bin/peripherals.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Peripheral control example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library to
demonstrate how to enable the access to various on-board peripherals. To
reduce leakage current, the EFM32WG-DK3850 board has several analog switches, and to
enable extended functionality there are multiplexers which need to be
configured correctly for most of the kit peripherals.

The on-board LEDs will light up according to the configured state of the
peripherals.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.powertest" label="DK3850 powertest">
    <property key="blurb" value="Power test example, running demonstration of energy modes."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/powertest/bin/powertest.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library
to demonstrate the use of the various Energy Modes available on the
EFM32WG990F256. When running this example, the Energy Profiler tool
in Simplicity Studio can be used to show the power consumption of each
energy mode.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.radialmenu" label="DK3850 radialmenu">
    <property key="blurb" value="emWin example - radial menu demonstartion."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/radialmenu/bin/radialmenu.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;emWin example - radial menu demonstartion.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the emWin library.

Control using touch panel or joystick.
If touch panel misaligned, there is possibility to
perform touch panel calibration, just press PB4.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.realtime" label="DK3850 realtime">
    <property key="blurb" value="Segger emWin example - dynamic graph update."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/realtime/bin/realtime.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Segger emWin example - dynamic graph update.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the emWin library from Segger. emWin 
is an efficient, modular, processor- and LCD controller-independent graphical 
user interface (GUI) library.

In this example, the user can perform touch panel calibration and then
perform touch panel operations to configure the GUI while graphs are 
continuously updated.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.reversi" label="DK3850 reversi">
    <property key="blurb" value="emWin example - reversi game."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/reversi/bin/reversi.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;emWin example - reversi game.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the emWin library.

Control using touch pad or joystick. If there
is misalignment when using touch pad please
do calibration select from menu:
Options-&gt;Touch Panel calibration.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.reversi_mm" label="DK3850 reversi_mm">
    <property key="blurb" value="emWin example - reversi game - energy efficient."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/reversi_mm/bin/reversi_mm.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;emWin example - reversi game - energy efficient.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the emWin library maintaining
low power consumption.

TFT driver is controlled in so called &quot;Memory Map&quot;
configuration, where internal RAM of TFT controller 
is used. There is no additional framebuffer needed
so this example could be run in small RAM footprint 
systems. The code fits 128kB flash and uses less 
than 32kB RAM.

In idle mode (where no user interaction is required)
EM2 mode is enabled, allowing reducing power consumption
down to 4uA.

The game is controlled using touch pad or joystick. 
If there is misalignment when using touch pad please
do calibration - from menu select:
Options-&gt;Touch Panel calibration.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.rs232" label="DK3850 rs232">
    <property key="blurb" value="RS232/UART output example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/rs232/bin/rs232.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;RS232/UART output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB, to demonstrates the
use of UART and LEUART communication on the EFM32WG-DK3850 development kit.

For the default UART communication, serial configuration 115200-8-N-1 is used.
If LEUART mode is configured by defining &quot;RETARGET_LEUART1&quot; as a build option,
terminal configuration is 9600-8-N-1.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.scroller" label="DK3850 scroller">
    <property key="blurb" value="Horizontal single pixel text scroller example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/scroller/bin/scroller.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Horizontal single pixel text scroller example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrate driving the EFM32WG_DK3850 kit's TFT-display
from the EFM32 Wonder Gecko.

This example is driving the display in &quot;direct drive&quot; (or mode generic in
SSD2119 terms). Using this mode, the framebuffer resides in the external
PSRAM memory of the development kit. This can be accessed directly to
modify the screen contents.

This demo demonstrates the use of frame buffer control, and implements
a horizontal scroller and shows the hardware assisted masking and
blending capabilities.

The horizontal scroller is implemented by using a large framebuffer,
which is shifted right one pixel for each horizontal scan line, using
the horizontal sync interrupt, and frame base sync trigger  capability
of the Wonder Gecko devices.

The masking and blending is hardware assisted. The geckos being drawn
on screen are using the same software procedure, only adding mask and
enable configurations.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.slideshow" label="DK3850 slideshow">
    <property key="blurb" value="Slideshow example using microSD."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/slideshow/bin/slideshow.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Slideshow example using microSD.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example uses the FatFS library for accssing a filesystem on a 
microSD card. It will loop through the files present on the card. 
BMP files with a resolution less than the resolution of the screen
(320x240) will be displayed on the TFT.

The demo has two modes of operation. If a file called &quot;files.txt&quot; is 
present on the root of the microSD card, this file will be read. The
BMP files will then be displayed in the order they are listed in the
file.

If this file is not present, all files on the root of tile SD card is 
looped through and displayed. If the BMP decoder cannot display a 
certain file, an error message is displayed.


WARNING:
SD2119 driver and GLIB graphics library are not intended for production 
purposes, and are included here to illustrate TFT display driving only.
This components are subject to changes in API/usage and there will be 
no effort to keep compatibility, or to support this software in any way.

NOTE:
This example is too large to be built with IDEs with 32KB size limits.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.temperature" label="DK3850 temperature">
    <property key="blurb" value="I2C temperature sensor example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/temperature/bin/temperature.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;I2C temperature sensor example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB including DK BSP
(board support package) to demonstrate the use of the I2C bus and 
the temperature sensor on the DK.

Note: On some DK boards the temperature sensor is placed too close 
to components that generate significant heat. The sensor may therefore
read a temperature 2-4 degrees Celsius higher than the ambient temperature.

The following configuration is possible:

- Joystick push toggles between Fahrenheit and Celsius display mode.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.tft" label="DK3850 tft">
    <property key="blurb" value="TFT Addressed map coloured blocks example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/tft/bin/tft.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;TFT Addressed map coloured blocks example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the kit's TFT-display from the EFM32 Wonder Gecko.

This example is driving the display in what is called &quot;address mapped
mode&quot; (or mode 8080). Using this mode, the framebuffer resides in the
memory of the SSD2119 controller chip.

WARNING:
SD2119 driver and GLIB graphics library are not intended for production
purposes, and are included here to illustrate TFT display driving only.

These components are subject to changes in API/usage and there will be
no effort to keep compatibility, or to support this software in any way.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.tftprintf" label="DK3850 tftprintf">
    <property key="blurb" value="Printf output on TFT-LCD."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/tftprintf/bin/tftprintf.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Printf output on TFT-LCD.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the kit's TFT-display from the EFM32 Wonder Gecko. In this case the
display is used as output from a regular printf in the application, as
an alternative to the RS232 port.

This example is driving the display in what is called &quot;address mapped
mode&quot; (or mode 8080). Using this mode, the framebuffer resides in the
memory of the SSD2119 controller chip of the URT TFT-LCD display.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.touch" label="DK3850 touch">
    <property key="blurb" value="Touchscreen example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/touch/bin/touch.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Touchscreen example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrate use of the resistive touchscreen on the
EFM32WG_DK3850 kit's TFT-display.

Touchscreen X and Y positions are obtained using the ADC. Two ADC readouts
are performed, one for X position and one for Y position.

The example allows freehand drawing and calibration. After starting the example
make sure that the EFM32 control the display (use AEM button to toggle).

The calibrations algorithm used is from an article in EETimes 5/31/2002 by
Carlos E. Vidales.

Initial touchscreen calibration is &quot;off&quot; on purpose to demonstrate that
calibration takes effect.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.usbdcdc" label="DK3850 usbdcdc">
    <property key="blurb" value="USB CDC virtual COM port example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/usbdcdc/bin/usbdcdc.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB CDC virtual COM port example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
and implements an USB CDC based virtual COM port.

UART1 on the DK is used as the physical COM port.
Any data sent to the virtual CDC COM port is transmitted on UART1.
Any data received on UART1 is transmitted to the virtual port.

When connecting the mcu plugin boards USB port to a Windows host PC,
the new hardware &quot;Wizard&quot; may or may not prompt you to provide a driver
installation file (.inf file) depending on your Windows version.

Manually direct Windows to look for drivers in the directory where you have
unpacked your copy of the Silabs-CDC_Install.zip driver file.
This can be done with the new device &quot;Wizard&quot; which might pop up after device
insertion, or you can open &quot;Device Manager&quot;, left click on the new device and
select &quot;Update Driver Software...&quot;.

Some versions of Windows wont allow you to install unsigned drivers. If you
suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.
Win7:
Repeatedly push F8 during boot until the boot menu appears.
Select the &quot;Disable Driver Signature Enforcement&quot; option.
Win10:
Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.
When computer has restarted into the options menu, select:
Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement
You should now be able to install an unsigned driver.

When a driver is succesfully installed, the device will be listed as a &quot;Ports&quot;
device in Device Manager, double-click it, select the &quot;Port Settings&quot; tab and
maybe the &quot;Advanced...&quot; button to set serial port properties.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.usbdcomposite" label="DK3850 usbdcomposite">
    <property key="blurb" value="USB Composite Device example, MSD + CDC + Vendor unique functions."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/usbdcomposite/bin/usbdcomposite.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Composite Device example, MSD + CDC + Vendor unique functions.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
to implement a composite USB device with tree functions:

 - Mass storage class device (MSD) implementing a 4MB disk
 - Communication device class (CDC) implementing a USB to UART bridge
 - Vendor Unique Device similar to the usbdvud example (control DK leds).

As the CDC function has two interface, the CDC function use an Interface
Association Descriptor (IAD). A composite device which use IAD's must be
implemented using bDeviceClass=0xEF, bDeviceSubClass=2 and bDeviceProtocol=1.


The vendor unique function (VUD).
=================================
Toggles user LED's 0-4 when receiving vendor unique class setup commands.
Intended to be used together with the &quot;libusb&quot; device driver, and host
application EFM32-LedApp.exe (a Windows application).
You will find libusb and EFM32-LedApp.exe in the &quot;host&quot; folder of the usbdvud
example. Check EFM32_Vendor_Unique_Device.inf to see how both the usbdvud
example VID_10C4&amp;PID_0001 and this composite example VID_10C4&amp;PID_0008&amp;MI_00
are specified.

The CDC COM port function.
==========================
Implements an USB CDC based virtual COM port. UART1 on the DK is used as the
physical COM port. Any data sent to the virtual CDC COM port is transmitted on
UART1. Any data received on UART1 is transmitted to the virtual port.

USB Mass Storage Device function.
=================================
Implements a Mass Storage Class device (MSD) with 4MByte in external PSRAM.


Windows driver installation.
============================
The first time the composite USB device is connected to the host, Windows must
install drivers for the VUD and CDC functions.

To control the VUD function with EFM32-LedApp.exe you need to install &quot;libusb&quot;
device driver. Manually direct Windows to look for this driver in the &quot;host&quot;
folder of the usbdvud example.
This can be done with the new device &quot;Wizard&quot; which might pop up after device
insertion, or you can open &quot;Device Manager&quot;, left click on one of functions
of the new composite device (marked with yellow exclamation mark) and
select &quot;Update Driver Software...&quot;.
After libusb is installed you can start EFM32-LedApp.exe to control leds on
the DK.

Similarly for the CDC function, direct Windows to look for a driver in the
folder where you have unpacked your copy of the Silabs-CDC_Install.zip driver
file.
This can be done with the new device &quot;Wizard&quot; which might pop up after device
insertion, or you can open &quot;Device Manager&quot;, left click on the new device and
select &quot;Update Driver Software...&quot;. Note how the .inf file specifies interface
number 2, VID_10C4&amp;PID_0008&amp;MI_02.
When the serial port driver is succesfully installed, the device will be listed
as a &quot;Ports&quot; device in Device Manager, double-click it, select the
&quot;Port Settings&quot; tab and maybe the &quot;Advanced...&quot; button to set serial port
properties.

Some versions of Windows wont allow you to install unsigned drivers. If you
suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.
Win7:
Repeatedly push F8 during boot until the boot menu appears.
Select the &quot;Disable Driver Signature Enforcement&quot; option.
Win10:
Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.
When computer has restarted into the options menu, select:
Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement
You should now be able to install an unsigned driver.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.usbdheadphone" label="DK3850 usbdheadphone">
    <property key="blurb" value="USB audio headphone device example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/usbdheadphone/bin/usbdheadphone.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB audio headphone device example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example implements a USB connected headphone device. The device enumerates
as a device supporting stereo 16bit PCM encoded audio at a samplerate of
44.1 kHz (the standard audio CD rate). The samples are sent directly to the I2S
DAC on the mainboard and audio is available on the &quot;AUDIO OUT&quot; jack.

The USB device is modelled as the HT1 (Headphone Topology 1) described in
USB-IF document &quot;Universal Serial Bus Audio Device Class Specification for
Basic Audio Devices&quot;, Release 1.0, November 24th, 2009.

The I2S DAC is fed at a samplerate of 44.118 kHz, so additional audio samples
are occasionally inserted to ensure that the data streams (USB and DAC) stay
synchronized.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.usbdhidkbd" label="DK3850 usbdhidkbd">
    <property key="blurb" value="USB HID keyboard example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/usbdhidkbd/bin/usbdhidkbd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB HID keyboard example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
and implements an USB HID class keyboard device (one button !).

SW1 is the keyboard button. Pressing this button will succesively write
&quot;Silicon Labs - &quot;.

User LED's 0-3 is used as a &quot;heart-beat&quot; counting pattern. The count rate
reflects the scan rate of the onebutton keypad.

User LED 8 reflects hosts NumLock status.
User LED 9 reflects hosts CapsLock status.
User LED 10 reflects hosts ScrollLock status.
User LED 15 reflects the status of the keyboard pushbutton.

It is also possible to make a buspowered device:
 - Enable #define BUSPOWERED in usbconfig.h
 - Program the MCU plugin module, remove it fron the DK.
 - Connect a pushbutton from PORTE bit 0 to GND (optional keyboard button).
 - Connect &quot;USB VREGO&quot; and &quot;VMCU&quot; together.
 - Optionally connect &quot;USB VREGO&quot; and &quot;3.3V&quot; together to enable an activity LED
   (the blue LED labeled &quot;STATUS).
   Note: This will cause the device suspend current to exceed 2.5 mA.

 - NOTE !!! Do NOT insert the plugin module back on the DK with &quot;USB VREGO&quot;,
   &quot;3.3V&quot; and &quot;VMCU&quot; connected together !!!.

This example will output useful info on the DK serial port (115.200 8N1).

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.usbdmicrophone" label="DK3850 usbdmicrophone">
    <property key="blurb" value="USB audio microphone device example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/usbdmicrophone/bin/usbdmicrophone.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB audio microphone device example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example implements a USB connected microphone device. The device enumerates
as a device supporting stereo 16bit PCM encoded audio at a samplerate of
44.1 kHz (the standard audio CD rate). The samples are aquired using the ADC
which is routed to the &quot;AUDIO IN&quot; jack on the mainboard. The example can be
compiled in &quot;tone generator&quot; mode, where the device produce a 1kHz sine.

The USB device is modelled as the MT (Microphone Topology) described in
USB-IF document &quot;Universal Serial Bus Audio Device Class Specification for
Basic Audio Devices&quot;, Release 1.0, November 24th, 2009.

The ADC is sampling at a rate of 44.118 kHz, so additional audio samples
are occasionally inserted or removed from the data sent to host to ensure that
the data streams (USB and ADC) stay synchronized. This gives reasonable audio
quality when listening to music, but produce noticeable artifacts when
listening to a pure sinewave or when the example is compiled in &quot;tone generator&quot;
mode.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.usbdmsd" label="DK3850 usbdmsd">
    <property key="blurb" value="USB Mass Storage Device example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/usbdmsd/bin/usbdmsd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Mass Storage Device example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
to implement a device Mass Storage Class device (MSD).

The example provides five different MSD types.

 - A 96KByte &quot;disk&quot; in internal SRAM
 - A 4MByte &quot;disk&quot; in external PSRAM
 - A disk implemented with a micro SD-Card
 - An internal FLASH &quot;disk&quot; (disksize is internal FLASH size minus 64K)
 - A 16MB external NORFLASH &quot;disk&quot;

Select mediatype in msddmedia.h (#define MSD_MEDIA)

It is also possible to make a buspowered device:
 - Enable #define BUSPOWERED in usbconfig.h (only valid for SRAM and FLASH media)
 - Program the MCU plugin module, remove it from the DK.
 - Connect &quot;USB VREGO&quot; and &quot;VMCU&quot; together.
 - Optionally connect &quot;USB VREGO&quot; and &quot;3.3V&quot; together to enable an activity LED
   (the blue LED labeled &quot;STATUS&quot;).
   Note: This will cause the device suspend current to exceed 2.5 mA.

 - NOTE !!! Do NOT insert the plugin module back on the DK with &quot;USB VREGO&quot;,
   &quot;3.3V&quot; and &quot;VMCU&quot; connected together !!!.

The example will output some info on the DK serial port (115.200 8N1).

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.usbdtouch" label="DK3850 usbdtouch">
    <property key="blurb" value="USB Bitmap transfer using USB drive functionality."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/usbdtouch/bin/usbdtouch.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Bitmap transfer using USB drive functionality.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrate use several functionalities:
1. Creation of virtual drive in system with FAT FS,
2. Mounting the drive on PC and file transfer,
3. Bitmap file creation based on TFT frame buffer content,
4. Resistive touch panel interaction.

On system startup initial drive is created and 
formatted using FAT FS then simple readme.txt file 
is put on file system. Every time user press PB4 key
new file, containing TFT frame buffer in bitmap format
is added. All files could be retrieved after connecting
board to PC by means of USB. For this connection use
small USB socket located on Wonder Gecko CPU board, not
the big one on development kit.

If new files doesn't appear on drive after pressing PB4,
try to reconnect the board to PC.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.usbdvud" label="DK3850 usbdvud">
    <property key="blurb" value="USB Vendor Unique Device example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/usbdvud/bin/usbdvud.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Vendor Unique Device example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
and implements an USB Vendor Unique Device.

The example will toggle User LED's 0-4 when receiving vendor unique class
setup commands.

This example is intended to be used together with the &quot;libusb&quot; device driver,
and host application EFM32-LedApp.exe (a Windows application).

The first time the USB device is connected to the host, you must tell the host
OS to install the &quot;libusb&quot; device driver.

On Windows, you can follow this procedure:
Insert the device, and manually direct Windows to look for drivers in the
directory where you have your copy of the &quot;EFM32_Vendor_Unique_Device.inf&quot; file.
This can be done with the new device &quot;Wizard&quot; which might pop up after device
insertion, or you can open &quot;Device Manager&quot;, left click on the new device and
select &quot;Update Driver Software...&quot;.

Some versions of Windows wont allow you to install unsigned drivers. If you
suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.
Win7:
Repeatedly push F8 during boot until the boot menu appears.
Select the &quot;Disable Driver Signature Enforcement&quot; option.
Win10:
Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.
When computer has restarted into the options menu, select:
Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement
You should now be able to install an unsigned driver.

After libusb is installed, start EFM32-LedApp.exe.

This example will output some info on the DK serial port (115.200 8N1).

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.usbhenum" label="DK3850 usbhenum">
    <property key="blurb" value="USB device enumerator example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/usbhenum/bin/usbhenum.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB device enumerator example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the USB host stack to implement
a simple device enumerator.

Connect a terminal to the DK UART port (115.200, N, 8, 1) and
then connect any USB device to the USB port of the MCU plug-in module.

Info about the VID/PID and some string descriptors will be output on
the serial port. The connected USB device will not be configured.

Note that USB disk drives may fail, as some of them draw too much current
when attached.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.usbhhidkbd" label="DK3850 usbhhidkbd">
    <property key="blurb" value="USB Host HID keyboard example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/usbhhidkbd/bin/usbhhidkbd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Host HID keyboard example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the USB host stack to implement
support for USB HID Keyboards.

Connect a terminal to the DK UART port (115.200, N, 8, 1) and
then connect a USB keyboard to the USB port of the MCU plug-in module.

The example will flash keyboard leds (numlock, scrollock and capslock)
with a binary counting pattern.

Keyboard entry will be echoed on the UART serial port.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.usbhmsdfatcon" label="DK3850 usbhmsdfatcon">
    <property key="blurb" value="USB Host mass storage device example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/usbhmsdfatcon/bin/usbhmsdfatcon.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Host mass storage device example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the USB host and the MSD modules in the
drivers directory to implement support for Mass Storage Device's (MSD).

Connect a terminal to the DK UART port (115.200, N, 8, 1) and
then connect a memory stick the USB port of the MCU plug-in module.

Info about the MSD device will be output on the serial port. When a MSD
device is connected and detected as a valid, you can issue commands at the
serial port console to list all files on the device (ls), type the content
of a file (cat) and append test to a file (echo).

Note that USB disk drives may fail, as some of them draw too much current
when attached.

NOTE:
This example is too large to be built with IDEs with 32KB size limits.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.wavplayer" label="DK3850 wavplayer">
    <property key="blurb" value="Audio .WAV format player."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/wavplayer/bin/wavplayer.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Audio .WAV format player.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including DK BSP (board support
package) and demonstrates how to play a wav file from the SD-card.

The wav file must be named &quot;sweet1.wav&quot; and must be encoded with 16-bit
PCM audio sampling.

The output volume level is adjusted with kit pushbuttons PB1 and PB2.
Output level is indicated by the 14 leftmost user LEDs.
Push the AEM button on the kit until &quot;EFM&quot; shows in the upper right
corner of the TFT display to activate PB1 and PB2 pushbuttons.

The example can be build for using the I2S dac or onchip DAC0.
Look for #define USE_I2S near top of file wavplayer.c

It sets up access to DVK registers, and supports fat-filesystem on the
sd-card.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.webserver" label="DK3850 webserver">
    <property key="blurb" value="Webserver example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/webserver/bin/webserver.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Webserver example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;==================

This example shows how to use the EFM32WG-DK3850 to run a http server with a
static web page. This example is using the lwip network stack to provide the
necessary protocol implementations and it's using the ksz8851snl ethernet
controller on the development kit to send and receive packets.

Web page
=========

To view the static web page open your browser to http://dk-ip/ where the 
dk-ip is the ip address assigned to your development kit.

You can find the source code for the static web page under the html directory.
These source files are converted into the fsdata_custom.c file that the lwip
http module knows how to read. This conversion is done by the makefsdata tool.

To customize your own web pages, you can use the makefsdata tool to generate
your own fsdata_custom.c file. The makefsdata tool is provided as part of lwip,
and you can find the C source file for it in the lwip-
contrib/apps/httpserver_raw/makefsdata folder (Don't use the makefsdata perl
script, it is outdated). This is an example of how you can generate the
fsdata_custom.c file using makefsdata.exe.

makefsdata.exe html -l1 -f:fsdata_custom.c

Output
=======

When a network interface is up and running the IP address of the server is
displayed on the LCD display together with rx/tx packet statistics. If you want
to view the lwip trace output you can open a serial connection to the
development kit using baud rate 115200.

IP Configuration
=================

By default this example is configured to use DHCP to fetch an ip address. If you
want to use static ip address instead then follow these steps.

1. open lwipopts.h
2. edit the LWIP_DHCP option to be

#define LWIP_DHCP                       0

3. edit the STATIC_* options to match your desired ip address, subnet mask,
default gateway. This is an example of how to configure these static ip
addresses.

ip: 192.168.0.12
sn: 255.255.255.0
gw: 192.168.0.1

#define STATIC_IPADDR0                  192
#define STATIC_IPADDR1                  168
#define STATIC_IPADDR2                  0
#define STATIC_IPADDR3                  12

#define STATIC_NET_MASK0                255
#define STATIC_NET_MASK1                255
#define STATIC_NET_MASK2                255
#define STATIC_NET_MASK3                0

#define STATIC_GW_IPADDR0               192
#define STATIC_GW_IPADDR1               168
#define STATIC_GW_IPADDR2               0
#define STATIC_GW_IPADDR3               1


ksz8851snl interface
=====================

The ksz8851snl ethernet controller is using an spi interface, and this is
connected to one of the EFM32 USARTs. See the kit user-manual for the actual
pins. This example also shows how to use the provided ksz8851snl drivers to
operate the ethernet controller. These are the main files that are used when
interfacing with the ksz8851snl.

drivers/ksz8851snl.c

This is the hardware abstraction layer for the ksz8851snl. This file contains
functionality like enable and initialize the chip.

drivers/ksz8851snl_spi.c

This contains the spi communication functions for the ksz8851snl. We provide the
low level operations like read/write register as well as read/write fifo in this
file.

lwip-contrib/ports/efm32/ksz8851snl_driver.c

This is the lwip driver that interfaces between the lwip stack and our
ksz8851snl.c hardware abstraction layer.

Interrupt Handling
===================

The ksz8851snl has an interrupt pin that is routed through the board controller
and into a GPIO pin on the EFM32. When the ethernet interrupt is enabled. This
interrupt pin is active low. The ksz8851snl will trigger an interrupt if the
link status has changed or if an ethernet frame has been received or
transmitted. In this example the GPIO is configured to trigger an interrupt on a
falling edge of the ethernet interrupt pin.

The interrupts of the ksz8851snl are not serviced directly from the GPIO
interrupt handler. What we do instead is to signal to the application that an
interrupt is pending and let the main application eventually call the interrupt
service routine within the ksz8851snl driver. The reason for doing this is
because we want to minimize the amount of time inside the interrupt handler.
When a received frame interrupt is triggered the ksz8851snl driver will have to
allocate buffer and transfer a large amount of data from the controller to ram,
and then pass this buffer into the lwip stack.


Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.audiofft" label="DK3850 audiofft_softfloat">
    <property key="blurb" value="Audio FFT example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/audiofft/bin/audiofft_softfloat.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Audio FFT example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and ARM's DSP lib to demonstrate
floating point FFT of audio data.

Connect an audio source to AUDIO IN on the DK and set the AEM switch to the EFM
position.
A FFT plot of the audio input will be shown on the screen together with a count
of the cpu-cycles used to calculate the FFT.
The audio bandwidth is 4 kHz.

Experiment using hard and soft floating point and various compiler optimization
flags to view the effect on the cpu cycle count.

Board: Silicon Labs EFM32WG_DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.audiofft" label="DK3850 audiofft_hardfloat">
    <property key="blurb" value="Audio FFT example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/audiofft/bin/audiofft_hardfloat.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Audio FFT example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and ARM's DSP lib to demonstrate
floating point FFT of audio data.

Connect an audio source to AUDIO IN on the DK and set the AEM switch to the EFM
position.
A FFT plot of the audio input will be shown on the screen together with a count
of the cpu-cycles used to calculate the FFT.
The audio bandwidth is 4 kHz.

Experiment using hard and soft floating point and various compiler optimization
flags to view the effect on the cpu cycle count.

Board: Silicon Labs EFM32WG_DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.preamp" label="DK3850 preamp">
    <property key="blurb" value="Audio preamplifier with tone controls example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/preamp/bin/preamp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Audio preamplifier with tone controls example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including the BSP (board
support package) CMSIS-DSP to demonstrate the signal processing capabilities
of the Wonder Gecko MCU.

- Connect an audio source to the audio in connector
  on the DK, for instance a mobile phone or an MP3 player.
- Connect an active loudspeaker with built-in amplifier,
  to the audio out connector of the DK.

WARNING:
--------
Do not attach or use headphones with this example. Use small
loadspeakers with built in amplification, ensuring volume is at an
acceptable level. Exposure to loud noises from any source for extended
periods of time may temporarily or permanently affect your hearing. The
louder the volume sound level, the less time is required before your
hearing could be affected. Hearing damage from loud noise is sometimes
undetectable at first and can have a cumulative effect.

The input signal is converted to digital and processed by the EFM32 core
before being converted back to analog.

Make sure to set kit display mode to &quot;EFM&quot; (signalled by flashing LED's),
by pushing kit &quot;AEM&quot; button.

The output volume level is adjusted with joystick up/down.
The output balance is adjusted with joystick left/right.
Bass tone control is adjusted with pushbuttons PB1 and PB2.
Treble tone control is adjusted with pushbuttons PB3 and PB4.
A 390 Hz test tone is emitted when pushing joystick center.

Board:  Silicon Labs EFM32WG-DK3850 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.dk3850.demo.ucos2_port" label="DK3850 ucos2">
    <property key="blurb" value="uC/OS-II RTOS on EFM32 using example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd3800a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_DK3850/ucos2_port/bin/ucos2.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;uC/OS-II RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This is a port of the uC/OS-II RTOS from Micrium Inc, http://www.micrium.com

The port has been adapted by Silicon Labs for use with our Development
Kit. It requires the standard EFM32 CMSIS package (including EMLIB).

The example has three tasks:
 - Task1: LED blink task
 - Task2: Receives characters from serial port and posts message to Task3
 - Task3: Receives message from Task2 and writes it on TFT display

Standard output is redirected to TFT display and standard input is UART1.

Note: The Keil toolchain port does not support FPU context preservation
      across tasks.

uC/OS-II is provided in source form for FREE evaluation, for educational use
or for peaceful research.

If you plan on using uC/OS-II in a commercial product you need to contact
Micrium to properly license its use in your product. We provide ALL the
source code for your convenience and to help you experience uC/OS-II.
The fact that the source is provided does NOT mean that you can use it without
paying a licensing fee.

For commercial use, contact Micrium, http://www.micrium.com for details.

Board:  Silicon Labs EFM32WG_DK3850 Starter Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.blink" label="STK3800 blink">
    <property key="blurb" value="Blink example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library to
demonstrate the use of the LED's on the starter kit. This example is intended as
a skeleton for new projects.

Board:  Silicon Labs EFM32WG_STK3800 Starter Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.burtc" label="STK3800 burtc">
    <property key="blurb" value="Backup power domain RTC example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/burtc/bin/burtc.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Backup power domain RTC example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrate use of the backup power domain and the
backup real time clock (BURTC).

Start the example with the Power Source Selector switch in the &quot;DBG&quot; position.
When the clock is running you can adjust time by pressing pushbuttons
PB0 and PB1.
When you move the Power Source Selector switch to the &quot;USB&quot; position, the
EFM is turned off and the BURTC peripheral runs on power from the BU capacitor.
(See User manual for EFM32WG-STK3800 starter kit for details on the hardware).
When you move the Power Source Selector switch back to the &quot;DBG&quot; position, you
can verify that time has been recorded correctly.

Board:  Silicon Labs EFM32WG-STK3800 Starter Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.clock" label="STK3800 clock">
    <property key="blurb" value="Wall Clock example using the segment LCD."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/clock/bin/clock.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Wall Clock example using the segment LCD.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS  and demonstrates  the use of
the LCD controller, RTC (real time counter), VCMP, GPIO and various
Energy Modes (EM).

The RTC is set up to wake the EFM32 from EM2 every minute. During this
interval, the LCD is updated to reflect the current time. The animation
feature is used to show the seconds. This is done by using the frame
event counter to drive the animation feature every second.

Time is set with pushbuttons PB0 and PB1.
 - Pushing PB0 increments minute count.
 - Pushing PB1 increments hour count.

The VCMP is used to measure the input voltage on every wakeup. If the
voltage drops too low, voltage boost is enabled on the LCD. This makes
the LCD clear and readable even when running on low batteries.

Board:  Silicon Labs EFM32WG_STK3800 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.cpt007b" label="STK3800 cpt007b_demo">
    <property key="blurb" value="CPT007B Demo"/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/cpt007b/bin/cpt007b_demo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;CPT007B Demo&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This demo demonstrates the capacitive button function of CPT007B fixed function
board. This demo runs on the EFM32 STK, and communicates with CPT007B through
the GPIO pins on the EXP header. Virtual buttons on STK's LCD screen indicate
whether the capacitive sensing buttons on CPT007B are pressed or released.
This demo supports up to 7 capacitive buttons on CPT007B
 
Board:  Silicon Labs EFM32WG_STK3800 Starter Kit and CPT007B Evaluation Board
Device: EFM32WG990F256&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.cslib" label="STK3800 cslib">
    <property key="blurb" value="CSLIB example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/cslib/bin/cslib.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;CSLIB example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the capacitive sensing firmware library to sample
capacitive sensing buttons on the STK.  Real-time sample information, touch
qualification status, and other state variables can be displayed and examined
in the Capacitive Sensing Profiler tool.

Board:  Silicon Labs EFM32WG_STK3800 Starter Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.emlcd" label="STK3800 emlcd">
    <property key="blurb" value="Energy Modes with segment LCD example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/emlcd/bin/emlcd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Energy Modes with segment LCD example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library to
demonstrate the use of the LCD controller, RTC (real time counter), GPIO and
various Energy Modes (EM) on the starter kit.

EM2 is used for delays in between refreshing the LCD display, and a lot of
&quot;eye candy&quot; are present to show off the MCU module's LCD display.

The LCD controller drives the display down to EM2. In the demo, EM2 is used
for &quot;most&quot; delays to show off this feature. The user can press PB0 or PB1 to
activate EM3 and EM4. EM4 requires a system reset, while PB0 again will wake
up the system  from Energy Mode 3.

Board:  Silicon Labs EFM32STG_STK3800 Starter Kit
Device: EFM32WG990F256

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.emode" label="STK3800 emode">
    <property key="blurb" value="Select a single energy mode, and stay there."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/emode/bin/emode.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 EMLIB and demonstrates the use of
the LCD controller, RTC (real time counter), GPIO and various Energy
Modes (EM).

The user can press the push buttons PB0 and PB1 to select which energy
mode to demonstrate.

This demo application has been made to give a quick demo of the
Energy Profiler from Silicon Labs and to reproduce the different 
energy modes seen in the EFM32 datasheet current consumption table. 

Board:  Silicon Labs EFM32WG_STK3800 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.freertos_blink" label="STK3800 freertos_blink">
    <property key="blurb" value="FreeRTOS - Blink example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/freertos_blink/bin/freertos_blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;FreeRTOS - Blink example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board. 
It also shows how to use idle with different energy saving modes ( from EM1 to EM3 - configured in FreeRTOSConfig.h file).
This example is intended as a skeleton for new projects using FreeRTOS.

Board:  Silicon Labs EFM32WG_STK3800 Starter Kit
Device: EFM32WG990F256&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.freertos_tickless" label="STK3800 freertos_tickless">
    <property key="blurb" value="FreeRTOS - Tickless example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/freertos_tickless/bin/freertos_tickless.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;FreeRTOS - Tickless example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks,
one sender generating number and one receiver that displays the number on the LCD. The FreeRTOS is 
configured in tickless mode, going into EM2 when no tasks are active.

EM3 mode cannot be used in this example because the LCD driver and timer are not available in EM3.
For more details, see the configuraiton in FreeRTOSConfig.h file.

Board:  Silicon Labs EFM32WG_STK3800 Starter Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.gpiointerrupt" label="STK3800 gpiointerrupt">
    <property key="blurb" value="Gpio interrupt example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/gpiointerrupt/bin/gpiointerrupt.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Gpio interrupt example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and gpio interrupt dispatcher driver to show
how to handle multiple GPIO interrupts. Buttons pressing toggles LEDs.

Board:  Silicon Labs EFM32WG_STK3800 Starter Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.inttemp" label="STK3800 inttemp">
    <property key="blurb" value="Internal temperature sensor example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/inttemp/bin/inttemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB to demonstrate
the usage of the internal temperature sensor on EFM32 Wonder Gecko
devices.

Note: EFM32 devices with production ID lower than 18 may measure inaccurate
temperatures due to a sensor calibration bug.

Board:  Silicon Labs EFM32WG_STK3800 Starter Kit
Device: EFM32WG990F256

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.lcd" label="STK3800 lcd">
    <property key="blurb" value="Segment LCD controller example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/lcd/bin/lcd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Segment LCD controller example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB peripheral library and
demonstrates the use of the segment LCD controller.

Board:  Silicon Labs EFM32WG_STK3800 Starter Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.lcsense" label="STK3800 lcsense">
    <property key="blurb" value="LC sense example using LESENSE."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/lcsense/bin/lcsense.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;LC sense example using LESENSE.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and demonstrates the use of 
the LESENSE peripheral on the board.

This demo has two different modes.
To change between them, press PB1. In Mode0 (default). The LESENSE
module will wake up whenever a metal object is passed above the LC
sensor in the bottom right of the STK. In Mode 1, the EFM32 will only
wake up every fifth time the metal object is passed over the sensor.

Board: Silicon Labs EFM32WG_STK3800 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.leuart" label="STK3800 leuart">
    <property key="blurb" value="LEUART/DMA in Energy mode2 output example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/leuart/bin/leuart.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project reads and sends the data back to terminal using LEUART
while staying in EM2.

It uses the EFM32 CMSIS and EMLIB, to demonstrate the
use of LEUART communication using DMA under the EM2 on the 
EFM32WG_STK3800 Starter Kit.

The LEUART is configured to be used with DMA under EM2.
The terminal configuration is 9600-8-N-1.
The DMA is configured to handle read and write data bytes from LEUART under EM2.

Testing:
1. Use the expansion header to connect the LEUART to your PC.
2. Pin Configuration:
	2.1. Pin-12 (PD4) LEUART0_TX
	2.2. Pin-14 (PD5) LEUART0_RX
	2.3. Pin-1 Gnd

3. Configure terminal to 9600-8-N-1.
4. Enter characters from your keyboard and see if you receive the echo on the terminal.
5. Check the average current consumption is equal to EM2 on Energy Profiler.

Board:  Silicon Labs EFM32WG_STK3800 Starter Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.lightsense" label="STK3800 lightsense">
    <property key="blurb" value="Lightsensor example using LESENSE."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/lightsense/bin/lightsense.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Lightsensor example using LESENSE.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS
and demonstrates the use of the LESENSE peripheral on the board.

This demo has two different modes.
To change between them, press PB0. In Mode0 (default). The LESENSE
module will wake up whenever a &quot;dark&quot; event is detected by the light sensor
below the &quot;EFM32&quot; sign on the right from the LCD on the STK. In Mode 1,
EFM32 will only wake up on every fifth &quot;dark&quot; event.

Board: Silicon Labs EFM32WG_STK3800 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.mpu" label="STK3800 mpu">
    <property key="blurb" value="Memory Protection Unit example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/mpu/bin/mpu.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Memory Protection Unit example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including STK BSP (board
support package).

It sets up the MPU to demonstrate usage of MPU to catch memory access
violations. STK pushbuttons are used generate MPU faults.

Board:  Silicon Labs EFM32WG_STK3800 Development Kit
Device: EFM32WG990F256

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.nandflash" label="STK3800 nandflash">
    <property key="blurb" value="Nandflash example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/nandflash/bin/nandflash.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Nandflash example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrates use of the NANDFLASH driver.

Connect a terminal to the TTL-level serialport (115200-N-8-1) on EXP port pins
4 and 6.
Operations on the flash are initiated by issuing commands on the terminal.
Command &quot;h&quot; will print a help screen on the terminal :

    Available commands:
        fi         : Show NAND flash device information
        h          : Show this help
        rp n       : Read page n
        bp n       : Blankcheck page n
        bd         : Blankcheck entire device
        bb         : Check bad-block info
        mb n       : Mark block n as bad
        wp n       : Write page n
        eb n       : Erase block n
        ecc n      : Check ECC algorithm, uses page n and n+1
        cp m n     : Copy page m to page n

Note that the nandflash device used on this kit has 32 pages per block, so
pages 0-31 belongs to block 0.

Board:  Silicon Labs EFM32WG-STK3800 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.nvm_simple" label="STK3800 nvm_simple">
    <property key="blurb" value="nvm_simple - non-volatile memory driver usage simple example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/nvm_simple/bin/nvm_simple.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;nvm_simple - non-volatile memory driver usage simple example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example shows simple usage of NVM module.

It stores object (32bit word in this case) into flash region declared 
as non-volatile memory area. It uses wear leveling and demonstrates 
simple use of the NVM driver. There are two types of pages: &quot;normal&quot; 
dedicated for storing multiple objects which doesn't change often 
and &quot;wear&quot; which can store single object (but this could be structure
containing many fields) that can often change. In this example on two pages 
same object is stored but NVM could handle multiple pages with different objects.

PB0 - short press recalls data from &quot;normal&quot; page
PB0 - long press store data to &quot;normal&quot; page
PB1 - counts up, and after releasing stores data to &quot;wear&quot; page

RESET - resets CPU and if there were valid data in NVM recovers last data value.

Board:  Silicon Labs EFM32WG-STK3800 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.powertest" label="STK3800 powertest">
    <property key="blurb" value="Power test example, running demonstration of energy modes."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/powertest/bin/powertest.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library
to demonstrate the use of the various Energy Modes available on the
EFM32WG990F256. When running this example, the Energy Profiler tool
in Simplicity Studio can be used to show the power consumption of each
energy mode.

Board:  Silicon Labs EFM32WG-STK3800 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.rtx_blink" label="STK3800 rtx_blink">
    <property key="blurb" value="Keil RTX RTOS - Blink example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/rtx_blink/bin/rtx_blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - Blink example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the Keil RTX RTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board.
This example is intended as a skeleton for new projects using Keil RTX.

Board:  Silicon Labs EFM32WG-STK3800
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.rtx_tickless" label="STK3800 rtx_tickless">
    <property key="blurb" value="Keil RTX RTOS - tick-less example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/rtx_tickless/bin/rtx_tickless.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - tick-less example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the Keil RTX RTOS, and gives a basic demonstration
of using two tasks; one sender generating number and one receiver that displays
the number on LCD. The RTX is configured in tick-less mode, going into EM2 when
no tasks are active. This example is intended as a skeleton for new projects
using Keil RTX for energy aware applications.

Board:  Silicon Labs EFM32WG-STK3800
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.rtx_tickless_nolcd" label="STK3800 rtx_tickless_nolcd">
    <property key="blurb" value="Keil RTX RTOS - tick-less example with LCD off."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/rtx_tickless_nolcd/bin/rtx_tickless_nolcd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - tick-less example with LCD off.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example is modification of rtx_tickless to demonstrate ultra low power consumption 
of Gecko processors in connection with RTX RTOS. Comparing to previous example it has LCD
turned off. There is also possible to disable part of RAM to lower power even further.
Low frequency crystal oscillator was disabled and low frequency RC oscillator used instead
to lower energy consumption even more.

project uses the Keil RTX RTOS, and gives a basic demonstration
of using two tasks; one sender generating number and one receiver.
The RTX is configured in tick-less mode, going into EM2 when
no tasks are active. This example is intended as a skeleton for new projects
using Keil RTX for energy aware applications.

Board:  Silicon Labs EFM32WG-STK3800
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.touch" label="STK3800 touch">
    <property key="blurb" value="Capactive touch example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/touch/bin/touch.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Capactive touch example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrates the capacitive touch capability of the EFM32 and the
Tiny Gecko STK. This is a port of the EFM32_G8xx_STK capacitive touch demo.

It demonstrates the use of LESENSE, ACMP, VCMP, LCD, and EMU.

Board:  Silicon Labs EFM32WG_STK3800
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.usbdcomposite" label="STK3800 usbdcomposite">
    <property key="blurb" value="USB Composite Device example, MSD + CDC + Vendor unique functions."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/usbdcomposite/bin/usbdcomposite.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Composite Device example, MSD + CDC + Vendor unique functions.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
to implement a composite USB device with tree functions:

 - Mass storage class device (MSD) implementing a disk in internal flash memory.
 - Communication device class (CDC) implementing a USB to UART bridge
 - Vendor Unique Device similar to the usbdvud example (control STK leds).

As the CDC function has two interface, the CDC function use an Interface
Association Descriptor (IAD). A composite device which use IAD's must be
implemented using bDeviceClass=0xEF, bDeviceSubClass=2 and bDeviceProtocol=1.


The vendor unique function (VUD).
=================================
Toggles user LED's 0 and 1 when receiving vendor unique class setup commands.
Intended to be used together with the &quot;libusb&quot; device driver, and host
application EFM32-LedApp.exe (a Windows application).
You will find libusb and EFM32-LedApp.exe in the &quot;host&quot; folder of the usbdvud
example. Check EFM32_Vendor_Unique_Device.inf to see how both the usbdvud
example VID_10C4&amp;PID_0001 and this composite example VID_10C4&amp;PID_0008&amp;MI_00
are specified.

The CDC COM port function.
==========================
Implements an USB CDC based virtual COM port. USART1 on the STK is used as the
physical COM port. Any data sent to the virtual CDC COM port is transmitted on
USART1. Any data received on USART1 is transmitted to the virtual port.
USART1 is available on the STK EXT port. EXT pin 4 is Tx, pin 6 is Rx.
NOTE: This is a TTL level USART, DO NOT CONNECT DIRECTLY TO RS232 PORTS !

USB Mass Storage Device function.
=================================
Implements a Mass Storage Class device (MSD) with 4MByte in external PSRAM.


Windows driver installation.
============================
The first time the composite USB device is connected to the host, Windows must
install drivers for the VUD and CDC functions.

To control the VUD function with EFM32-LedApp.exe you need to install &quot;libusb&quot;
device driver. Manually direct Windows to look for this driver in the &quot;host&quot;
folder of the usbdvud example.
This can be done with the new device &quot;Wizard&quot; which might pop up after device
insertion, or you can open &quot;Device Manager&quot;, left click on one of functions
of the new composite device (marked with yellow exclamation mark) and
select &quot;Update Driver Software...&quot;.
After libusb is installed you can start EFM32-LedApp.exe to control leds on
the STK.

Similarly for the CDC function, direct Windows to look for a driver in the
folder where you have your copy of the &quot;EFM32-Cdc.inf&quot; file (same folder as
this readme file, unzip the Silabs-CDC_Install.zip).
Note how the .inf file specifies interface number 2, VID_10C4&amp;PID_0008&amp;MI_02.
When the serial port driver is succesfully installed, the device will be listed
as a &quot;Ports&quot; device in Device Manager, double-click it, select the
&quot;Port Settings&quot; tab and maybe the &quot;Advanced...&quot; button to set serial port
properties.

Some versions of Windows wont allow you to install unsigned drivers. If you
suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.
Win7:
Repeatedly push F8 during boot until the boot menu appears.
Select the &quot;Disable Driver Signature Enforcement&quot; option.
Win10:
Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.
When computer has restarted into the options menu, select:
Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement
You should now be able to install an unsigned driver.

Board:  Silicon Labs EFM32WG-STK3800 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.usbdhidkbd" label="STK3800 usbdhidkbd">
    <property key="blurb" value="USB HID keyboard example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/usbdhidkbd/bin/usbdhidkbd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB HID keyboard example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
and implements an USB HID class keyboard device (one button !).

PB0 is the keyboard button. Pressing this button will succesively write
&quot;Silicon Labs - &quot;.

Board:  Silicon Labs EFM32WG-STK3800 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.usbdmsd" label="STK3800 usbdmsd">
    <property key="blurb" value="USB Mass Storage Device example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/usbdmsd/bin/usbdmsd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Mass Storage Device example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
to implement a device Mass Storage Class device (MSD).

The example provides two different MSD types.

 - A 96KByte &quot;disk&quot; in internal SRAM (on devices with 128 kByte or larger SRAM)
 - An internal FLASH &quot;disk&quot; (disksize is internal FLASH size minus 64K)

Select mediatype in msddmedia.h (#define MSD_MEDIA)

Board:  Silicon Labs EFM32WG_STK3800 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.usbdvud" label="STK3800 usbdvud">
    <property key="blurb" value="USB Vendor Unique Device example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/usbdvud/bin/usbdvud.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Vendor Unique Device example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
and implements an USB Vendor Unique Device.

The example will toggle LED's 0 and 1 when receiving vendor unique class
setup commands.

This example is intended to be used together with the &quot;libusb&quot; device driver,
and host application EFM32-LedApp.exe (a Windows application).

The first time the USB device is connected to the host, you must tell the host
OS to install the &quot;libusb&quot; device driver.

On Windows, you can follow this procedure:
Insert the device, and manually direct Windows to look for drivers in the
directory where you have your copy of the &quot;EFM32_Vendor_Unique_Device.inf&quot; file.
This can be done with the new device &quot;Wizard&quot; which might pop up after device
insertion, or you can open &quot;Device Manager&quot;, left click on the new device and
select &quot;Update Driver Software...&quot;.

Some versions of Windows wont allow you to install unsigned drivers. If you
suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.
Win7:
Repeatedly push F8 during boot until the boot menu appears.
Select the &quot;Disable Driver Signature Enforcement&quot; option.
Win10:
Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.
When computer has restarted into the options menu, select:
Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement
You should now be able to install an unsigned driver.

After libusb is installed, start EFM32-LedApp.exe.

Board:  Silicon Labs EFM32WG-STK3800 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.usbhenum" label="STK3800 usbhenum">
    <property key="blurb" value="USB device enumerator example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/usbhenum/bin/usbhenum.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB device enumerator example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the USB host stack to implement
a simple device enumerator. When a device is attached its descriptors are read
and the vendor and product id's (VID/PID) are displayed on the LCD.
The device attached will not be configured.

Note that USB disk drives may fail, as some of them draw too much current
when attached.

Board:  Silicon Labs EFM32WG-STK3800 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.usbxpress_echo" label="STK3800 usbxpress_echo">
    <property key="blurb" value="USBXpress Echo example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/usbxpress_echo/bin/usbxpress_echo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USBXpress Echo example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project demonstrates the EFM32 USBXpress firmware library.
It echoes all received data back to the host that sent it.

The host-side application is the usbxpress_echo.py Python script found in the
USBXpress SDK at Examples/Echo/Host. The USBXpress SDK is available for download
at www.silabs.com/products/mcu/Pages/USBXpress.aspx.

Board:  Silicon Labs EFM32WG_STK3800 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.usbxpress_test_panel" label="STK3800 usbxpress_test_panel">
    <property key="blurb" value="USBXpress Test Panel example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/usbxpress_test_panel/bin/usbxpress_test_panel.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USBXpress Test Panel example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project demonstrates the EFM32 USBXpress firmware library.
It communicates with the TestPanel host application to send and receive data.
TestPanel is included in the USBXpress SDK, available for download at:

https://www.silabs.com/products/mcu/Pages/USBXpress.aspx

Board:  Silicon Labs EFM32WG_STK3800 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.userpage" label="STK3800 userpage">
    <property key="blurb" value="Progamming and use of user flash page for data."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/userpage/bin/userpage.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Progamming and use of user flash page for data.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS  and demonstrates the programming of
the user page in flash. The page can be used for data such as keys, serial
numbers and other information that should not be deleted by a device erase.

PB0 increases the main counter.
PB1 saves the main counter value to the user page and displays how many Flash writes
have been issued.

Board:  Silicon Labs EFM32WG_STK3800 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.biometric" label="STK3800 biometric">
    <property key="blurb" value="Biometric Demo using the Biometric Sensor add-on board for the EFM32WG STK3800."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/biometric/bin/biometric.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Biometric Demo using the Biometric Sensor add-on board for the EFM32WG STK3800.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the LCD display on the EFM32WG_STK3800 kit. In addition, it demonstrates the 
use of Silicon Labs I2C based sensors on the expansion board header.

You must have a Silicon Labs Biometric Sensor add-on board to make use of this demo.
Once the demo is started, push button PB0 to change what is displayed. While
on the heart rate monitor display hold your finger on the proximity sensor to 
measure heart rate.

Board:  Silicon Labs EFM32WG_STK3800 Starter Kit and Sensor Add-on board
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.lightsensefft" label="STK3800 lightsensefft_softfloat">
    <property key="blurb" value="Lightsensor example with FFT transform."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/lightsensefft/bin/lightsensefft_softfloat.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Lightsensor example with FFT transform.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and ARM's DSP lib to demonstrate
floating point FFT and sinc interpolation.

Connect the light sensor output to the ADC input by shorting pins
15 and 14 on the EXP_HEADER of the STK.
Direct various light sources to the light sensor. Expect no specific
frequency from daylight or from a flashlight. Mains powered incandescent bulbs
should give twice the mains frequency. Using another STK running the
&quot;blink&quot; example modified to various blink rates is an excellent signal source.
The frequency bandwidth is approximately 10-500 Hz.
The frequency shows in the 4 digit numerical display upper right on
the LCD. The LCD also displays the number of cpu cycles used to do
the FFT transform.

You can of course run this example without connecting the light sensor to
the ADC, you will still be able to measure the cpu cycle count used to do
the FFT transform.

Experiment using hard and soft floating point math and see the difference
in cpu cycle count.

Board: Silicon Labs EFM32WG_STK3800 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.lightsensefft" label="STK3800 lightsensefft_hardfloat">
    <property key="blurb" value="Lightsensor example with FFT transform."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/lightsensefft/bin/lightsensefft_hardfloat.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Lightsensor example with FFT transform.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and ARM's DSP lib to demonstrate
floating point FFT and sinc interpolation.

Connect the light sensor output to the ADC input by shorting pins
15 and 14 on the EXP_HEADER of the STK.
Direct various light sources to the light sensor. Expect no specific
frequency from daylight or from a flashlight. Mains powered incandescent bulbs
should give twice the mains frequency. Using another STK running the
&quot;blink&quot; example modified to various blink rates is an excellent signal source.
The frequency bandwidth is approximately 10-500 Hz.
The frequency shows in the 4 digit numerical display upper right on
the LCD. The LCD also displays the number of cpu cycles used to do
the FFT transform.

You can of course run this example without connecting the light sensor to
the ADC, you will still be able to measure the cpu cycle count used to do
the FFT transform.

Experiment using hard and soft floating point math and see the difference
in cpu cycle count.

Board: Silicon Labs EFM32WG_STK3800 Development Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.rs232_isolated" label="STK3800 rs232_isolated">
    <property key="blurb" value="RS232 Isolated Example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/rs232_isolated/bin/rs232_isolated.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;RS232 Isolated Example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This is an example for the EFM32WG_STK3800 Wonder Gecko Starter Kit attached
to the Isolated-RS-EXP. It uses the UART port to communicate over isolation to
an RS232 tranciever. The buttons send characters and the screen shows 
receieved characters. Use a terminal program like putty at 115200 baud to send
and recieve characters. Lower case characters are converted to upper case before
being printed to the screen. Alternatively, use 2 Isolated-RS-EXPs to 
communicate between each other. On the Isolated-RS-EXP, all the jumpers on J1 
and J2 need to be populated except the SH jumper. If there is not a 2nd device 
or host to read the RS232 messages, populating JP1 and JP2 will cause the 
messages to return to the Starter Kit to be read.

Board:  Silicon Labs EFM32WG_STK3800 Starter Kit
Device: EFM32WG990F256&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.rs485_isolated" label="STK3800 rs485_isolated">
    <property key="blurb" value="RS485 Isolated Example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/rs485_isolated/bin/rs485_isolated.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;RS485 Isolated Example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This is an example for the EFM32WG_STK3800 Wonder Gecko Starter Kit attached 
to the Isolated-RS-EXP. It uses the LEUART port to communicate over isolation
to an RS485 tranciever. The push buttons send characters over the isolation 
barrier.  The screen will update with received characters. Lower case 
characters are converted to upper case before being printed on the screen. 
Connect the EXP boards to an RS485 host at 9600 baud. Alternatively connect 2 
Isolated-RS-EXPs together and communicate between the two. On the 
Isolated-RS-EXP, all the jumpers on J3 and J4 need to be populated except the 
SH jumper.

Board:  Silicon Labs EFM32WG_STK3800 Starter Kit
Device: EFM32WG990F256&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.ucos2_port" label="STK3800 ucos2">
    <property key="blurb" value="uC/OS-II RTOS on EFM32 using example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/ucos2_port/bin/ucos2.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;uC/OS-II RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This is a port of the uC/OS-II RTOS from Micrium Inc, http://www.micrium.com

The port has been adapted by Silicon Labs for use with our Development
Kit. It requires the standard EFM32 CMSIS package (including EMLIB).

The example has three tasks:
 - Task1: LED blink task
 - Task2: Receives characters from serial port and posts message to Task3
 - Task3: Receives message from Task2 and writes it on LCD and serial port

Serial port can be chosen between:
USART1 - location 1 is used, GPIO port D pins 0 and 1, baudrate 115200-8-N-1.
LEUART0 - location 0 is used, GPIO port D pins 4 and 5, baudrate 9600-8-N-1.

These USARTs are by default not connected to any serial port, so this needs
to be connected to external RS232 ports to be usable.

Note: The Keil toolchain port does not support FPU context preservation
      across tasks.

uC/OS-II is provided in source form for FREE evaluation, for educational use
or for peaceful research.

If you plan on using uC/OS-II in a commercial product you need to contact
Micrium to properly license its use in your product. We provide ALL the
source code for your convenience and to help you experience uC/OS-II.
The fact that the source is provided does NOT mean that you can use it without
paying a licensing fee.

For commercial use, contact Micrium, http://www.micrium.com for details.

Board:  Silicon Labs EFM32WG_STK3800 Starter Kit
Device: EFM32WG990F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32wg.stk3800.demo.usb_isolated" label="STK3800 usb_isolated">
    <property key="blurb" value="RS232 Isolated Example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.wg.*"/>
    <property key="boardCompatibility" value="brd2400a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32WG_STK3800/usb_isolated/bin/usb_isolated.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;RS232 Isolated Example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This is an example for the EFM32WG_STK3800 Wonder Gecko Starter Kit attached to
the Isolated-USB-EXP. It uses the LEUART port to communicate over isolation to 
a USB-UART bridge. Program the EFM32 WG STK with this demo. Unplug the STK and 
connect the Isolated-USB-EXP to the EFM32 WG STK.  Then, connect the USB cable 
to the EXP board, open a com port to it at 115200 baud. You can enter messages to 
the kit and after pressing &quot;enter&quot; the kit will return your message. On the 
Isolated-USB-EXP, all the jumpers on J2 and J3 need to be populated except the 
SH jumper. If there is no USB host to read the messages, pupolating JP2 will 
send the messages back to the Starter Kit.

Board:  Silicon Labs EFM32WG_STK3800 Starter Kit
Device: EFM32WG990F256&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32zg.stk3200.demo.blink" label="STK3200 blink">
    <property key="blurb" value="Blink example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <property key="boardCompatibility" value="brd2010a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32ZG_STK3200/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library to
demonstrate the use of the LED's on the starter kit. This example is intended as
a skeleton for new projects.

Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit
Device: EFM32ZG222F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32zg.stk3200.demo.clock" label="STK3200 clock">
    <property key="blurb" value="Analog and digital clock example using the Memory LCD on the EFM32ZG_STK3200."/>
    <property key="partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <property key="boardCompatibility" value="brd2010a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32ZG_STK3200/clock/bin/clock.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the EFM32ZG_STK3200.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the EFM32ZG_STK3200 kit.

The user can switch between analog and digital clock modes by pushing
the PB0 button.

The user can increment the second count by pushing the PB1 button.
The minute count can be incremented by pushing the PB1 button for more
than 2 seconds.

The analog clock mode demonstrates the use of GLIB to draw hour, minute
and second pointers on the background which is a bitmap in flash memory.

The digital clock demonstrates the 16x20 font (including number characters
only) of the textdisplay driver.

Board:  Silicon Labs EFM32ZG_STK3200 Development Kit
Device: EFM32ZG222F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32zg.stk3200.demo.cpt007b" label="STK3200 cpt007b_demo">
    <property key="blurb" value="CPT007B Demo"/>
    <property key="partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <property key="boardCompatibility" value="brd2010a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32ZG_STK3200/cpt007b/bin/cpt007b_demo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;CPT007B Demo&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This demo demonstrates the capacitive button function of CPT007B fixed function
board. This demo runs on the EFM32 STK, and communicates with CPT007B through
the GPIO pins on the EXP header. Virtual buttons on STK's LCD screen indicate
whether the capacitive sensing buttons on CPT007B are pressed or released.
This demo supports up to 7 capacitive buttons on CPT007B
 
Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit and CPT007B Evaluation Board
Device: EFM32ZG222F32&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32zg.stk3200.demo.cpt112s" label="STK3200 cpt112s_demo">
    <property key="blurb" value="CPT112S Demo"/>
    <property key="partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <property key="boardCompatibility" value="brd2010a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32ZG_STK3200/cpt112s/bin/cpt112s_demo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;CPT112S Demo&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This demo demonstrates the capacitive button function of CPT112S fixed
function board. This demo runs on the EFM32 STK,and communicates with
CPT112S through the SMBUS pins on the EXP header. Virtual buttons on
STK's LCD screen indicate whether the capacitive sensing buttons on CPT112S
are pressed or released.
 
This demo supports 11 buttons on the CPT112S device.(The CS11 button is
disabled in the default configuration of the board to enable the buzzer)

Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit and CPT112S Evaluation Board
Device: EFM32ZG222F32&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32zg.stk3200.demo.cslib" label="STK3200 cslib">
    <property key="blurb" value="CSLIB example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <property key="boardCompatibility" value="brd2010a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32ZG_STK3200/cslib/bin/cslib.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;CSLIB example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the capacitive sensing firmware library to sample
capacitive sensing buttons on the STK.  Real-time sample information, touch
qualification status, and other state variables can be displayed and examined
in the Capacitive Sensing Profiler tool.

Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit
Device: EFM32ZG222F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32zg.stk3200.demo.emlcd" label="STK3200 emlcd">
    <property key="blurb" value="Energy Modes with LCD display example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <property key="boardCompatibility" value="brd2010a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32ZG_STK3200/emlcd/bin/emlcd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Energy Modes with LCD display example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library to
demonstrate the use of the LCD, RTC (real time counter), GPIO and
various Energy Modes on the starter kit.

The example will cycle through Energy Mode EM0-EM3, staying one second in
each mode. PB0 can be pressed anytime to enter EM4.
Wakeup from EM4 is either by reset pushbutton or by GPIO pin (port C bit 9)
connected to pushbutton PB1.

Board:  Silicon Labs EFM32ZG_STK3200 Development Kit
Device: EFM32ZG222F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32zg.stk3200.demo.emode" label="STK3200 emode">
    <property key="blurb" value="Select a single energy mode, and stay there."/>
    <property key="partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <property key="boardCompatibility" value="brd2010a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32ZG_STK3200/emode/bin/emode.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 EMLIB and demonstrates the use of
the LCD display, RTC (real time counter), GPIO and various Energy
Modes (EM).

Use PB1 to cycle through the energy mode tests available.
Press PB0 to start selected test.

This demo application has been made to give a quick demo of the
Energy Profiler from Silicon Labs and to reproduce the different 
energy modes seen in the EFM32 datasheet current consumption table. 

Board:  Silicon Labs EFM32ZG_STK3200 Development Kit
Device: EFM32ZG222F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32zg.stk3200.demo.freertos_blink" label="STK3200 freertos_blink">
    <property key="blurb" value="FreeRTOS - Blink example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <property key="boardCompatibility" value="brd2010a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32ZG_STK3200/freertos_blink/bin/freertos_blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;FreeRTOS - Blink example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board. 
It also shows how to use idle mode with different energy saving modes ( from EM1 to EM2 - configured in FreeRTOSConfig.h file).
This example is intended as a skeleton for new projects using FreeRTOS.

Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit
Device: EFM32ZG222F32&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32zg.stk3200.demo.freertos_tickless" label="STK3200 freertos_tickless">
    <property key="blurb" value="FreeRTOS - Tickless example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <property key="boardCompatibility" value="brd2010a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32ZG_STK3200/freertos_tickless/bin/freertos_tickless.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;FreeRTOS - Tickless example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses FreeRTOS to drive and display images on the Sharp 
Memory LCD. The example will create two tasks. One task is drawing a different 
image to the LCD every 3 seconds, while the other task is toggling the 
EXTCOMIN pin on the Sharp Memory LCD.

FreeRTOS is configured using the FreeRTOSConfig.h file in the example project 
to use the tickless idle functionality. So when FreeRTOS is idle it will enter 
EM2 and use the RTC to wakeup on the next event.

Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit
Device: EFM32ZG222F32&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32zg.stk3200.demo.glib" label="STK3200 glib">
    <property key="blurb" value="GLIB example using the Sharp Memory LCD on the EFM32ZG_STK3200."/>
    <property key="partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <property key="boardCompatibility" value="brd2010a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32ZG_STK3200/glib/bin/glib.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;GLIB example using the Sharp Memory LCD on the EFM32ZG_STK3200.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the GLIB library and the DISPLAY device driver
together with EFM32 CMSIS including EMLIB and board support package support
functions/drivers to demonstrate driving the Sharp Memory LCD display on
the EFM32ZG_STK3200 kit.

The user can switch trough different GLIB example screens by pushing the PB1 button.
The user can reset the demo by pushing the PB0 button.

Board:  Silicon Labs EFM32ZG_STK3200 Development Kit
Device: EFM32ZG222F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32zg.stk3200.demo.inttemp" label="STK3200 inttemp">
    <property key="blurb" value="Internal temperature sensor example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <property key="boardCompatibility" value="brd2010a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32ZG_STK3200/inttemp/bin/inttemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB to demonstrate
the usage of the internal temperature sensor on EFM32 Zero Gecko devices.

Measurement results are presented on the LCD display, hit PB0 to display
values in Celsius (default) or PB1 for Fahrenheit.

Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit
Device: EFM32ZG222F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32zg.stk3200.demo.leuart" label="STK3200 leuart">
    <property key="blurb" value="LEUART/DMA in Energy mode2 output example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <property key="boardCompatibility" value="brd2010a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32ZG_STK3200/leuart/bin/leuart.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project reads and sends the data back to terminal using LEUART
while staying in EM2.

It uses the EFM32 CMSIS and EMLIB, to demonstrate the
use of LEUART communication using DMA under the EM2 on the 
EFM32ZG_STK3200 Starter Kit.

The LEUART is configured to be used with DMA under EM2.
The terminal configuration is 9600-8-N-1.
The DMA is configured to handle read and write data bytes from LEUART under EM2.

Testing:
1. Use the expansion header to connect the LEUART to your PC.
2. Pin Configuration:
	2.1. Pin-12 (PD4) LEUART0_TX
	2.2. Pin-14 (PD5) LEUART0_RX
	2.3. Pin-1 Gnd

3. Configure terminal to 9600-8-N-1.
4. Enter characters from your keyboard and see if you receive the echo on the terminal.
5. Check the average current consumption is equal to EM2 on Energy Profiler.

Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit
Device: EFM32ZG222F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32zg.stk3200.demo.powertest" label="STK3200 powertest">
    <property key="blurb" value="Power test example, running demonstration of energy modes."/>
    <property key="partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <property key="boardCompatibility" value="brd2010a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32ZG_STK3200/powertest/bin/powertest.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library
to demonstrate the use of the various Energy Modes available on the
EFM32ZG222F32. When running this example, the Energy Profiler tool
in Simplicity Studio can be used to show the power consumption of each
energy mode.

Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit
Device: EFM32ZG222F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32zg.stk3200.demo.rtx_blink" label="STK3200 rtx_blink">
    <property key="blurb" value="Keil RTX RTOS - Blink example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <property key="boardCompatibility" value="brd2010a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32ZG_STK3200/rtx_blink/bin/rtx_blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - Blink example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the Keil RTX RTOS, and gives a basic demonstration
of using two tasks to blink the LEDs on the board.
This example is intended as a skeleton for new projects using Keil RTX.

Board:  Silicon Labs EFM32ZG_STK3200 Development Kit
Device: EFM32ZG222F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32zg.stk3200.demo.rtx_tickless" label="STK3200 rtx_tickless">
    <property key="blurb" value="Keil RTX RTOS - tick-less example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <property key="boardCompatibility" value="brd2010a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32ZG_STK3200/rtx_tickless/bin/rtx_tickless.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - tick-less example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the Keil RTX RTOS, and gives a basic demonstration
of one task that displays pictures on memory LCD and main task that
periodically refresh it. The RTX is configured in tick-less mode, going into 
EM2 when no tasks are active. This example is intended as a skeleton for new 
projects using Keil RTX for energy aware applications.

Board:  Silicon Labs EFM32ZG_STK3200 Development Kit
Device: EFM32ZG222F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32zg.stk3200.demo.rtx_tickless_nolcd" label="STK3200 rtx_tickless_nolcd">
    <property key="blurb" value="Keil RTX RTOS - tick-less example with LCD off"/>
    <property key="partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <property key="boardCompatibility" value="brd2010a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32ZG_STK3200/rtx_tickless_nolcd/bin/rtx_tickless_nolcd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - tick-less example with LCD off&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example is modification of rtx_tickless to demonstrate ultra low power consumption 
of Gecko processors in connection with RTX RTOS. Comparing to rtx_tickless example it has LCD
turned off. Low frequency crystal oscillator was disabled and low frequency RC oscillator
used instead to lower energy consumption even more.


This example project uses the Keil RTX RTOS, and gives a basic demonstration
of using single, dummy task that is waken up periodically.
The RTX is configured in tick-less mode, going into EM2 when
no tasks are active. This example is intended as a skeleton for new projects
using Keil RTX for energy aware applications.

Board:  Silicon Labs EFM32ZG_STK3200 Development Kit
Device: EFM32ZG222F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32zg.stk3200.demo.spaceinvaders" label="STK3200 spaceinvaders">
    <property key="blurb" value="Space Invaders game using the Memory LCD on the EFM32ZG_STK3200."/>
    <property key="partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <property key="boardCompatibility" value="brd2010a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32ZG_STK3200/spaceinvaders/bin/spaceinvaders.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Space Invaders game using the Memory LCD on the EFM32ZG_STK3200.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the EFM32ZG_STK3200 kit.

Game instructions are displayed on the startup screen.

For debug builds the game may run slow because they are not optimized
for speed. The user should build and run the release builds for
optimized performance.

Board:  Silicon Labs EFM32ZG_STK3200 Development Kit
Device: EFM32ZG222F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32zg.stk3200.demo.textdisplay" label="STK3200 textdisplay">
    <property key="blurb" value="Printf output on Sharp Memory LCD LS013B7DH03."/>
    <property key="partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <property key="boardCompatibility" value="brd2010a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32ZG_STK3200/textdisplay/bin/textdisplay.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Printf output on Sharp Memory LCD LS013B7DH03.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the EFM32 Zero Gecko. In this case the
display is used as output from a regular printf in the application, as
an alternative to the RS232 port.

The user can customize the behaviour of the DISPLAY driver by changing
configuration macros in displayconfigapp.h.

Board:  Silicon Labs EFM32ZG_STK3200 Development Kit
Device: EFM32ZG222F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32zg.stk3200.demo.touch" label="STK3200 touch">
    <property key="blurb" value="Capacitive touch example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <property key="boardCompatibility" value="brd2010a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32ZG_STK3200/touch/bin/touch.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Capacitive touch example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrates the capacitive touch capability
of the EFM32 Zero Gecko Starter Kit.

It demonstrates the use of CAPSENSE and DISPLAY drivers.
Pressing T1/T2 touch pads will decrease/increase the counter shown on the LCD.

Board:  Silicon Labs EFM32ZG_STK3200 Starter Kit
Device: EFM32ZG222F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32zg.stk3200.demo.weatherstation" label="STK3200 weatherstation">
    <property key="blurb" value="Weatherstation using the Sensor add-on board on the EFM32ZG_STK3200."/>
    <property key="partCompatibility" value="mcu.arm.efm32.zg.*"/>
    <property key="boardCompatibility" value="brd2010a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32ZG_STK3200/weatherstation/bin/weatherstation.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Weatherstation using the Sensor add-on board on the EFM32ZG_STK3200.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the EFM32ZG_STK3200 kit. In addition, it
demonstrates the use of Silabs I2C based sensors on the expansion board
header.

You must have a Silabs Sensor add-on board to make use of this demo.
Once the demo is started, hold your hand over the gesture sensor. Once
the sensor detects your hand the display will become active.

Swipe left and right over the sensor to scroll through temperature, humidity
and UV index. On the temperature screen, you can swipe up or down to change
between Fahrenheit or Celcius.

Note: Due to the size of this example, you might need to enable compiler
optimizations to be able to fit the entire binary in the 32k of flash!

Board:  Silicon Labs EFM32ZG_STK3200 Development Kit and Sensor Add-on board
Device: EFM32ZG222F32
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.stkxxx.g890.demo.blink" label="STKXXX blink">
    <property key="blurb" value="Blink example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd2001a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32_Gxxx_STK/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and demonstrates  the use of 
the LEDs on the board. This example is intended as a skeleton for new 
projects.

Board:  Silicon Labs EFM32-Gxxx-STK Development Kit
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.stkxxx.g890.demo.clock" label="STKXXX clock">
    <property key="blurb" value="Simple Digital Clock using the LCD and EM2."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd2001a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32_Gxxx_STK/clock/bin/clock.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Simple Digital Clock using the LCD and EM2.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and demonstrates the use of
the LCD controller, RTC (real time counter), VCMP, GPIO and various 
Energy Modes (EM).

The RTC is set up to wake the EFM32 from EM2 every minute. During this 
interval, the LCD is updated to reflect the current time. The animation
feature is used to show the seconds. This is done by using the frame
event counter to drive the animation feature every second.

The VCMP is used to measure the input voltage on every wakeup. If the 
voltage drops too low, voltage boost is enabled on the LCD. This makes the 
LCD clear and readable even when running on low batteries.

Board:  Silicon Labs EFM32-Gxxx-STK Development Kit
Device: EFM32G890F128 with LCD 
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.stkxxx.g890.demo.cpt007b" label="STKXXX cpt007b_demo">
    <property key="blurb" value="CPT007B Demo"/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd2001a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32_Gxxx_STK/cpt007b/bin/cpt007b_demo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;CPT007B Demo&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This demo demonstrates the capacitive button function of CPT007B fixed function
board. This demo runs on the EFM32 STK, and communicates with CPT007B through
the GPIO pins on the EXP header. Virtual buttons on STK's LCD screen indicate
whether the capacitive sensing buttons on CPT007B are pressed or released.
This demo supports up to 7 capacitive buttons on CPT007B
 
Board:  Silicon Labs EFM32-Gxxx-STK Development Kit and CPT007B Evaluation Board
Device: EFM32G890F128&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.stkxxx.g890.demo.cpt112s" label="STKXXX cpt112s_demo">
    <property key="blurb" value="CPT112S Demo"/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd2001a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32_Gxxx_STK/cpt112s/bin/cpt112s_demo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;CPT112S Demo&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This demo demonstrates the capacitive button function of CPT112S fixed
function board. This demo runs on the EFM32 STK,and communicates with
CPT112S through the SMBUS pins on the EXP header. Virtual buttons on
STK's LCD screen indicate whether the capacitive sensing buttons on CPT112S
are pressed or released.
 
This demo supports 11 buttons on the CPT112S device.(The CS11 button is
disabled in the default configuration of the board to enable the buzzer)

Board:  Silicon Labs EFM32-Gxxx-STK Development Kit and CPT112S Evaluation Board
Device: EFM32G890F128&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.stkxxx.g890.demo.emlcd" label="STKXXX emlcd">
    <property key="blurb" value="Energy Modes with segment LCD example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd2001a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32_Gxxx_STK/emlcd/bin/emlcd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Energy Modes with segment LCD example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and demonstrates the use of 
the LCD controller, RTC (real time counter), GPIO and various Energy 
Modes (EM).

EM2 is used for delays in between refreshing the LCD display, and a lot
of &quot;eye candy&quot; are present to show off the MCU module's LCD display.

The LCD controller drives the display down to EM2. In the demo, EM2 is 
used for &quot;most&quot; delays to show off this feature. The user can press PB0
or PB1 to activate EM3 and EM4. EM4 requires a system reset, while PB0 
again will wake up the system from Energy Mode 3.

Board:  Silicon Labs EFM32-Gxxx-STK Development Kit
Device: EFM32G890F128 with LCD 
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.stkxxx.g890.demo.emode" label="STKXXX emode">
    <property key="blurb" value="Select a single energy mode, and stay there."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd2001a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32_Gxxx_STK/emode/bin/emode.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 EMLIB and demonstrates the use of 
the LCD controller, RTC (real time counter), GPIO and various Energy 
Modes (EM).

The user can press the pushbuttons PB0 and PB1 to select which energy 
mode to demonstrate.

This demo application has been made to give a quick demo of the 
Energy Profiler from Silicon Labs and to reproduce the different 
energy modes seen in the EFM32 datasheet current consumption table. 

Board:  Silicon Labs EFM32-Gxxx-STK Development Kit
Device: EFM32G890F128 with LCD 
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.stkxxx.g890.demo.freertos_blink" label="STKXXX freertos_blink">
    <property key="blurb" value="FreeRTOS - Blink example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd2001a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32_Gxxx_STK/freertos_blink/bin/freertos_blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;FreeRTOS - Blink example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board. 
It also shows how to use idle mode with different energy saving modes ( from EM1 to EM2 - configured in FreeRTOSConfig.h file).
This example is intended as a skeleton for new projects using FreeRTOS.

Board:  Silicon Labs EFM32-Gxxx-STK Development Kit
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.stkxxx.g890.demo.freertos_tickless" label="STKXXX freertos_tickless">
    <property key="blurb" value="FreeRTOS - Tickless example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd2001a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32_Gxxx_STK/freertos_tickless/bin/freertos_tickless.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;FreeRTOS - Tickless example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the FreeRTOS, and gives a basic demonstration of using two tasks,
one sender generating number and one receiver that displays the number on the LCD. The FreeRTOS is 
configured in tickless mode, going into EM2 when no tasks are active.

EM3 mode cannot be used in this example because the LCD driver and timer are not available in EM3.
For more details, see the configuraiton in FreeRTOSConfig.h file.


Board:  Silicon Labs EFM32-Gxxx-STK Development Kit
Device: EFM32G890F128&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.stkxxx.g890.demo.gpiointerrupt" label="STKXXX gpiointerrupt">
    <property key="blurb" value="Gpio interrupt example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd2001a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32_Gxxx_STK/gpiointerrupt/bin/gpiointerrupt.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Gpio interrupt example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and gpio interrupt dispatcher driver to show
how to handle multiple GPIO interrupts. Buttons pressing toggles LED0 and LED1.

Board:  Silicon Labs EFM32_Gxxx_STK Starter Kit
Device: &quot;EFM32G890F128&quot;
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.stkxxx.g890.demo.inttemp" label="STKXXX inttemp">
    <property key="blurb" value="Internal temperature sensor example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd2001a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32_Gxxx_STK/inttemp/bin/inttemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB to demonstrate
the usage of the internal temperature sensor on rev.C EFM32 Gecko
devices.

Note: EFM32 devices with production ID lower than 18 may measure inaccurate
temperatures due to a sensor calibration bug.

Board:  Silicon Labs EFM32-G8xx-STK Starter Kit
Device: EFM32G890F128

&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.stkxxx.g890.demo.leuart" label="STKXXX leuart">
    <property key="blurb" value="LEUART/DMA in Energy mode2 output example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd2001a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32_Gxxx_STK/leuart/bin/leuart.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project reads and sends the data back to terminal using LEUART
while staying in EM2.

It uses the EFM32 CMSIS and EMLIB, to demonstrate the
use of LEUART communication using DMA under the EM2 on the 
EFM32_Gxxx_STK Starter Kit.

The LEUART is configured to be used with DMA under EM2.
The terminal configuration is 9600-8-N-1.
The DMA is configured to handle read and write data bytes from LEUART under EM2.

Testing:
1. Use the expansion header to connect the LEUART to your PC.
2. Pin Configuration:
	2.1. Pin-12 (PD4) LEUART0_TX
	2.2. Pin-14 (PD5) LEUART0_RX
	2.3. Pin-1 Gnd

3. Configure terminal to 9600-8-N-1.
4. Enter characters from your keyboard and see if you receive the echo on the terminal.
5. Check the average current consumption is equal to EM2 on Energy Profiler.

Board:  Silicon Labs EFM32_Gxxx_STK Starter Kit
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.stkxxx.g890.demo.mpu" label="STKXXX mpu">
    <property key="blurb" value="Memory Protection Unit example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd2001a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32_Gxxx_STK/mpu/bin/mpu.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Memory Protection Unit example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including the STK BSP (board support
package). It sets up the MPU to demonstrate usage of the MPU to catch memory
access violations. The STK push-buttons (PB0 and PB1) are used to generate MPU
faults.

Board:  Silicon Labs EFM32-Gxxx-STK Development Kit
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.stkxxx.g890.demo.nvm_simple" label="STKXXX nvm_simple">
    <property key="blurb" value="nvm_simple - non-volatile memory driver usage simple example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd2001a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32_Gxxx_STK/nvm_simple/bin/nvm_simple.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;nvm_simple - non-volatile memory driver usage simple example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example shows simple usage of NVM module.

It stores object (32bit word in this case) into flash region declared 
as non-volatile memory area. It uses wear leveling and demonstrates 
simple use of the NVM driver. There are two types of pages: &quot;normal&quot; 
dedicated for storing multiple objects which doesn't change often 
and &quot;wear&quot; which can store single object (but this could be structure
containing many fields) that can often change. In this example on two pages 
same object is stored but NVM could handle multiple pages with different objects.

PB0 - short press recalls data from &quot;normal&quot; page
PB0 - long press store data to &quot;normal&quot; page
PB1 - counts up, and after releasing stores data to &quot;wear&quot; page

RESET - resets CPU and if there were valid data in NVM recovers last data value.

Board:  Silicon Labs EFM32_Gxx_STK Development Kit
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.stkxxx.g890.demo.powertest" label="STKXXX powertest">
    <property key="blurb" value="Power test example, running demonstration of energy modes."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd2001a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32_Gxxx_STK/powertest/bin/powertest.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library
to demonstrate the use of the various Energy Modes available on the
EFM32G890F128. When running this example, the Energy Profiler tool
in Simplicity Studio can be used to show the power consumption of each 
energy mode.

Board:  Silicon Labs EFM32_Gxxx_STK Starter Kit
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.stkxxx.g890.demo.rtx_blink" label="STKXXX rtx_blink">
    <property key="blurb" value="Keil RTX RTOS - Blink example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd2001a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32_Gxxx_STK/rtx_blink/bin/rtx_blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - Blink example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the Keil RTX RTOS, and gives a basic demonstration
of using two tasks to blink the LEDs on the board.
This example is intended as a skeleton for new projects using Keil RTX.

Board:  Silicon Labs EFM32-Gxxx-STK Development Kit
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.stkxxx.g890.demo.rtx_tickless" label="STKXXX rtx_tickless">
    <property key="blurb" value="Keil RTX RTOS - tick-less example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd2001a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32_Gxxx_STK/rtx_tickless/bin/rtx_tickless.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - tick-less example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the Keil RTX RTOS, and gives a basic demonstration
of using two tasks; one sender generating number and one receiver that displays
the number on LCD. The RTX is configured in tick-less mode, going into EM2 when
no tasks are active. This example is intended as a skeleton for new projects
using Keil RTX for energy aware applications.

Board:  Silicon Labs EFM32_Gxx_STK
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.stkxxx.g890.demo.rtx_tickless_nolcd" label="STKXXX rtx_tickless_nolcd">
    <property key="blurb" value="Keil RTX RTOS - tick-less example with LCD off"/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd2001a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32_Gxxx_STK/rtx_tickless_nolcd/bin/rtx_tickless_nolcd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - tick-less example with LCD off&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example is modification of rtx_tickless to demonstrate ultra low power consumption 
of Gecko processors in connection with RTX RTOS. Comparing to previous example it has LCD
turned off. Low frequency crystal oscillator was disabled and low frequency RC oscillator
used instead to lower energy consumption even more.


This example project uses the Keil RTX RTOS, and gives a basic demonstration
of using two tasks; one sender task generating numbers every 500ms and one receiver task.
The RTX is configured in tick-less mode, going into EM2 when no tasks are active. This 
example is intended as a skeleton for new projects using Keil RTX for energy aware 
applications. The sleep behavior of the system can be observed using Energy Profiler 
in Simplicity Studio.

Board:  Silicon Labs EFM32_Gxx_STK
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.stkxxx.g890.demo.touch" label="STKXXX touch">
    <property key="blurb" value="Capacitive touch example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd2001a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32_Gxxx_STK/touch/bin/touch.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Capacitive touch example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrates the capacitive touch capability
of the EFM32 and the STK Starter Kit.

It demonstrates the use of TIMER, ACMP, VCMP, LCD, and EMU.

Board:  Silicon Labs EFM32-Gxxx-STK Development Kit
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.stkxxx.g890.demo.ucos2_port" label="STKXXX ucos2">
    <property key="blurb" value="uC/OS-II RTOS on EFM32 using example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd2001a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32_Gxxx_STK/ucos2_port/bin/ucos2.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;uC/OS-II RTOS on EFM32 using example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This is a port of the uC/OS-II RTOS from Micrium Inc, http://www.micrium.com

The port has been adapted by Silicon Labs for use with our Development
Kit. It requires the standard EFM32 CMSIS package (including EMLIB).

The example has three tasks:
 - Task1: LED blink task
 - Task2: Receives characters from serial port and posts message to Task3
 - Task3: Receives message from Task2 and writes it on LCD and serial port

Serial port can be chosen between:
USART1 - location 1 is used, GPIO port D pins 0 and 1, baudrate 115200-8-N-1.
LEUART0 - location 0 is used, GPIO port D pins 4 and 5, baudrate 9600-8-N-1.

No thread safety has been added around the simple &quot;printf&quot; usage provided.
For GCC based platforms, Micrium can provide uC/OS-III which supports GCC.

uC/OS-II is provided in source form for FREE evaluation, for educational use
or for peaceful research.

If you plan on using uC/OS-II in a commercial product you need to contact
Micrium to properly license its use in your product. We provide ALL the
source code for your convenience and to help you experience uC/OS-II.
The fact that the source is provided does NOT mean that you can use it without
paying a licensing fee.

For commercial use, contact Micrium, http://www.micrium.com for details.

Board:  Silicon Labs EFM32-G8xx-STK Starter Kit
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.stkxxx.g890.demo.userpage" label="STKXXX userpage">
    <property key="blurb" value="Progamming and use of user flash page for data."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.efm32g890f128"/>
    <property key="boardCompatibility" value="brd2001a"/>
    <property key="imageFile" value="../app/mcu_example/EFM32_Gxxx_STK/userpage/bin/userpage.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Progamming and use of user flash page for data.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS  and demonstrates the programming of
the user page in flash. The page can be used for data such as keys, serial
numbers and other information that should not be deleted by a device erase.

PB0 increases the main counter.
PB1 saves the main counter value to the user page and displays how many Flash writes
have been issued.

Board:  Silicon Labs EFM32-Gxxx-STK Development Kit
Device: EFM32G890F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32g.slsensorpuck.demo.sensor_puck" label="SLSENSORPUCK sensor_puck">
    <property key="blurb" value="Sensor puck example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.efm32.g.*"/>
    <property key="boardCompatibility" value="slsensorpuck.efm32g"/>
    <property key="imageFile" value="../app/mcu_example/SLSENSORPUCK_EFM32G/sensor_puck/bin/sensor_puck.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Sensor puck example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library to
demonstrate the use of the Sensor Puck kit. This example is intended as
a skeleton for new projects.

Refer to SENSOR PUCK USER’S GUIDE in Simplicity Studio for more information.
(Kit Documentation-&gt;EFM32G)

Board:  Silicon Labs SLSENSORPUCK_EFM32G Kit
Device: EFM32G210F128
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg11.slstk3301a.demo.blink" label="SLSTK3301A blink">
    <property key="blurb" value="Blink example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg11.*"/>
    <property key="boardCompatibility" value="brd2102a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3301A_EFM32TG11/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library to
demonstrate the use of the LED's on the starter kit. This example is intended as
a skeleton for new projects.

Board:  Silicon Labs SLSTK3301A_EFM32TG11 Starter Kit
Device: EFM32TG11B520F128GM80
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg11.slstk3301a.demo.can_board" label="SLSTK3301A can_board">
    <property key="blurb" value="CAN bus example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg11.*"/>
    <property key="boardCompatibility" value="brd2102a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3301A_EFM32TG11/can_board/bin/can_board.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;CAN bus example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 EMLIB peripheral library to demonstrate 
the use of CAN bus. This demo requires CAN expansion board ISO-CAN-EXP REV 1.0 
This example uses SegmentLCD to show the CAN actions on the display.
GPIO interrupt are implemented in order to make use of the buttons. 
BTN0 and BTN1 are used to send a message using CAN bus and LEDs will be toggled. 
On the display number of receptions of the messages and number of
transmissions are shown. To test this example properly, the kit
needs to be connected with the CAN tranceivers and another CAN devices.
This example is intended as a skeleton for new projects. 

Board: Silicon Labs SLSTK3301A_EFM32TG11 Starter Kit

Device: EFM32TG11B520F128GM80, ISO-CAN-EXP REV 1.0
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg11.slstk3301a.demo.cslib" label="SLSTK3301A cslib">
    <property key="blurb" value="CSLIB example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg11.*"/>
    <property key="boardCompatibility" value="brd2102a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3301A_EFM32TG11/cslib/bin/cslib.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;CSLIB example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the capacitive sensing firmware library to sample
capacitive sensing buttons on the STK.  Real-time sample information, touch
qualification status, and other state variables can be displayed and examined
in the Capacitive Sensing Profiler tool.

Board:  Silicon Labs SLSTK3301A Starter Kit
Device: EFM32TG11B520F128GM80
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg11.slstk3301a.demo.emode" label="SLSTK3301A emode">
    <property key="blurb" value="Select a single energy mode, and stay there."/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg11.*"/>
    <property key="boardCompatibility" value="brd2102a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3301A_EFM32TG11/emode/bin/emode.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and demonstrates the use of
the LCD display, RTCC, GPIO and various Energy Modes (EM).


1. Use BTN1 to cycle through the available energy mode tests.

Display :
  upper row: frequency (kHz)
  lower row: Test Mode ==&gt; 
    - Energy mode 
    - Clock source (X: HFXO/LFXO, R: HFRCO/LFRCO/ULFRCO) 
    - Operation (i.e. While loop, Prime, Coremark, RTCC, CRYO, None), with/without DC/DC converter
    
See the file lcd_setup.c for more information about the different modes.

2. Press BTN0 to start selected test.

This demo application has been made to give a quick demo of the
Energy Profiler from Silicon Labs, including EFM32 energy modes.

Board:  Silicon Labs EFM32TG11_STK3301A Starter Kit
Device: EFM32TG11B520F128GM80
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg11.slstk3301a.demo.helges_demo" label="SLSTK3301A helges_demo">
    <property key="blurb" value="This example project demonstrates a wide range of features of the EFM32TG11 MCU and the SLSTK3301A Starter Kit."/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg11.*"/>
    <property key="boardCompatibility" value="brd2102a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3301A_EFM32TG11/helges_demo/bin/helges_demo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;This example project demonstrates a wide range of features of the EFM32TG11 MCU and the SLSTK3301A Starter Kit.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
Browse different app screens and interact with them using the push buttons BTN0 and BTN1.
- press the push button BTN0 to change screen
- some of the app screens will show Gecko symbol in the upper right corner of the screen.
  To trigger the actions for this app, press the push button BTN1.

IMPORTANT: The touch slider is calibrated during startup, ie. when the kit is powered,
reset or recovering from a backup event. To ensure that the calibration is successful
and that the touch slider will work as expected, it is important that the user does not
touch the slider while the calibration is in progress. The calibration process is
completed when data is visible on the display.

The available app screens include:
- Elapsed time app
  The runtime since last reset is shown in the upper part of the screen.
  
- Si7210 Hall-Effect Sensor app
  This app shows the magnitude and polarity of the magnetic field measured by the Si7210
  hall-effect sensor on the STK3301A.
  
- Si7021 Relative Humidity and Temperature Sensor app
  This app shows the temperature and relative humidity measured by the Si7021 relative
  humidity and temperature sensor on the STK3301A. Press the push button BTN1 to toggle
  Centigrade or Fahrenheit scale for the temperature.
  
- Capacitive Touch app
  This app shows the position and force the user is applying to the touch slider.
  
- Low Energy Inductive Sense (LC Sense) and True Random Number Generator (TRNG) app
  This app counts the number of times the inductive sense element connected to the
  EFM32TG11's LESENSE peripheral has been triggered. The sensor is triggered when a
  metallic object comes close to the LC Sense inductor. The counter and LEDs are active
  even when the LC Sense app is not shown on the screen. Press the push button BTN1 to
  reset the counter.
  
  This app also demonstrates the EFM32TG11's NIST-certified true random number generator
  (TRNG). The TRNG generates a 128-bit random number every time the LC sensor is triggered,
  and this number is used to display random pattern on the upper left LCD array.
  
- Backup Power Domain (BU Power) app
  This app demonstrates the EFM32TG11s ability to use a backup power source when its main
  power source is unavailable. The BU Power app screen displays the following metrics:
  - Voltage of the backup capacitor on the STK3301A (BUVDD)
  - Charge and discharge status
  - Voltage of the main power supply (AVDD)
  With a properly charged backup capacitor, the EFM32TG11 will retain the selected app,
  as well as keep the runtime timer running even when the main power supply is removed.
  To charge the backup capacitor, press the push button BTN1. The capacitor will keep on
  charging even if the user changes to another app.
  Press the push button BTN1 once more to stop charging.
  The user can now disconnect the main power supply for 10-30 minutes, depending on the
  charge level of the backup capacitor, without losing the app settings. Note, however, that
  to properly recover from a power outage, the user should supply power using the &quot;BAT&quot;
  setting on the power switch, since the STK3301A board controller might issue a device reset
  when re-connecting a power supply using the &quot;AEM&quot; or &quot;USB&quot; settings on the power switch.
  
  If the user desires to discharge the capacitor, press the push button BTN1 once more.
  Allow 30-60 seconds to fully discharge the capacitor, depending on the charge level of the capacitor.
  The BUVDD voltage will read 0 Volts when discharging, regardless of the actual
  voltage of the backup capacitor. Press the push button BTN1 once more to stop the
  discharge process.

Board:  Silicon Labs SLSTK3301A Starter Kit
Device: EFM32TG11B520F128GM80
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg11.slstk3301a.demo.humitemp" label="SLSTK3301A humitemp">
    <property key="blurb" value="Humidity and temperature demo using the on-board Si7021 sensor on the SLSTK3301A_EFM32TG11 kit."/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg11.*"/>
    <property key="boardCompatibility" value="brd2102a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3301A_EFM32TG11/humitemp/bin/humitemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board Si7021 sensor on the SLSTK3301A_EFM32TG11 kit.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the segment LCD display and the Si7021 humidity and temperature sensor on the
SLSTK3301A_EFM32TG11 kit.

Board:  Silicon Labs SLSTK3301A_EFM32TG11 kit Starter Kit.
Device: EFM32TG11B520F128GM80
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg11.slstk3301a.demo.lcd" label="SLSTK3301A lcd">
    <property key="blurb" value="Segment LCD controller example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg11.*"/>
    <property key="boardCompatibility" value="brd2102a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3301A_EFM32TG11/lcd/bin/lcd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Segment LCD controller example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB peripheral library and
demonstrates the use of the segment LCD controller with EM2. The demo
stays in EM2 when the segment is not updated.
This example uses the EFM32 Segment LCD Display driver which is provided 
by the Silicon Labs MCU SDK. 

BTN0 is used to enable/disable dynamic charge redistribution.
Dynamic charge redistribution is enabled if the Gecko symbol
is displayed on the right upper corner of LCD. Dynamic
charge redistribution feature can be used to reduce current
consumption.

BTN1 is used to stop/continue the animation.

Board:  Silicon Labs SLSTK3301A_EFM32TG11 Starter Kit
Device: EFM32TG11B520F128GM80&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32tg11.slstk3301a.demo.micriumos_blink" label="SLSTK3301A micriumos_blink">
    <property key="blurb" value="Micrium OS Blink example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.tg11.*"/>
    <property key="boardCompatibility" value="brd2102a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3301A_EFM32TG11/micriumos_blink/bin/micriumos_blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Micrium OS Blink example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example shows how to initialize and run MicriumOS on the kit. The 
application will start a single task which is blinking LED 0 at a regular 
interval. This examples is a good starting point for applications that want 
to use MicriumOS.

Board:  Silicon Labs SLSTK3301A Starter Kit
Device: EFM32TG11B520F128GM80
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.blink" label="SLSTK3400A blink">
    <property key="blurb" value="Blink example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library to
demonstrate the use of the LED's on the starter kit. This example is intended as
a skeleton for new projects.

Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit
Device: EFM32HG322F64
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.clock" label="SLSTK3400A clock">
    <property key="blurb" value="Analog and digital clock example using the Memory LCD on the SLSTK3400A_EFM32HG."/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/clock/bin/clock.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLSTK3400A_EFM32HG.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the SLSTK3400A_EFM32HG kit.

The user can switch between analog and digital clock modes by pushing
the PB0 button.

The user can increment the second count by pushing the PB1 button.
The minute count can be incremented by pushing the PB1 button for more
than 2 seconds.

The analog clock mode demonstrates the use of GLIB to draw hour, minute
and second pointers on the background which is a bitmap in flash memory.

The digital clock demonstrates the 16x20 font (including number characters
only) of the textdisplay driver.

Board:  Silicon Labs SLSTK3400A_EFM32HG Development Kit
Device: EFM32HG322F64
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.cpt007b" label="SLSTK3400A cpt007b_demo">
    <property key="blurb" value="CPT007B Demo"/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/cpt007b/bin/cpt007b_demo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;CPT007B Demo&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This demo demonstrates the capacitive button function of CPT007B fixed function
board. This demo runs on the EFM32 STK, and communicates with CPT007B through
the GPIO pins on the EXP header. Virtual buttons on STK's LCD screen indicate
whether the capacitive sensing buttons on CPT007B are pressed or released.
This demo supports up to 7 capacitive buttons on CPT007B
 
Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit and CPT007B Evaluation Board
Device: EFM32HG322F64&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.cpt112s" label="SLSTK3400A cpt112s_demo">
    <property key="blurb" value="CPT112S Demo"/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/cpt112s/bin/cpt112s_demo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;CPT112S Demo&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This demo demonstrates the capacitive button function of CPT112S fixed
function board. This demo runs on the EFM32 STK,and communicates with
CPT112S through the SMBUS pins on the EXP header. Virtual buttons on
STK's LCD screen indicate whether the capacitive sensing buttons on CPT112S
are pressed or released.
 
This demo supports 11 buttons on the CPT112S device.(The CS11 button is
disabled in the default configuration of the board to enable the buzzer)

Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit and CPT112S Evaluation Board
Device: EFM32HG322F64&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.cslib" label="SLSTK3400A cslib">
    <property key="blurb" value="CSLIB example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/cslib/bin/cslib.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;CSLIB example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the capacitive sensing firmware library to sample
capacitive sensing buttons on the STK.  Real-time sample information, touch
qualification status, and other state variables can be displayed and examined
in the Capacitive Sensing Profiler tool.

Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit
Device: EFM32HG322F64
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.emlcd" label="SLSTK3400A emlcd">
    <property key="blurb" value="Energy Modes with LCD display example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/emlcd/bin/emlcd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Energy Modes with LCD display example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library to
demonstrate the use of the LCD, RTC (real time counter), GPIO and
various Energy Modes on the starter kit.

The example will cycle through Energy Mode EM0-EM3, staying one second in
each mode. PB0 can be pressed anytime to enter EM4.
Wakeup from EM4 is either by reset pushbutton or by GPIO pin (port C bit 9)
connected to pushbutton PB1.

Board:  Silicon Labs SLSTK3400A_EFM32HG Development Kit
Device: EFM32HG322F64
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.emode" label="SLSTK3400A emode">
    <property key="blurb" value="Select a single energy mode, and stay there."/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/emode/bin/emode.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 EMLIB and demonstrates the use of
the LCD display, RTC (real time counter), GPIO and various Energy
Modes (EM).

Use PB1 to cycle through the energy mode tests available.
Press PB0 to start selected test.

This demo application has been made to give a quick demo of the
Energy Profiler from Silicon Labs and to reproduce the different 
energy modes seen in the EFM32 datasheet current consumption table. 

Board:  Silicon Labs SLSTK3400A_EFM32HG Development Kit
Device: EFM32HG322F64
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.glib" label="SLSTK3400A glib">
    <property key="blurb" value="GLIB example using the Sharp Memory LCD on the SLSTK3400A_EFM32HG."/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/glib/bin/glib.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;GLIB example using the Sharp Memory LCD on the SLSTK3400A_EFM32HG.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the GLIB library and the DISPLAY device driver
together with EFM32 CMSIS including EMLIB and board support package support
functions/drivers to demonstrate driving the Sharp Memory LCD display on
the SLSTK3400A_EFM32HG kit.

The user can switch trough different GLIB example screens by pushing the PB1 button.
The user can reset the demo by pushing the PB0 button.

Board:  Silicon Labs SLSTK3400A_EFM32HG Development Kit
Device: EFM32HG322F64
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.inttemp" label="SLSTK3400A inttemp">
    <property key="blurb" value="Internal temperature sensor example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/inttemp/bin/inttemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Internal temperature sensor example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB to demonstrate
the usage of the internal temperature sensor on EFM32 Happy Gecko devices.

Measurement results are presented on the LCD display, hit PB0 to display
values in Celsius (default) or PB1 for Fahrenheit.

Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit
Device: EFM32HG322F64
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.leuart" label="SLSTK3400A leuart">
    <property key="blurb" value="LEUART/DMA in Energy mode2 output example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/leuart/bin/leuart.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;LEUART/DMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project reads and sends the data back to terminal using LEUART
while staying in EM2.

It uses the EFM32 CMSIS and EMLIB, to demonstrate the
use of LEUART communication using DMA under the EM2 on the 
SLSTK3400A_EFM32HG Starter Kit.

The LEUART is configured to be used with DMA under EM2.
The terminal configuration is 9600-8-N-1.
The DMA is configured to handle read and write data bytes from LEUART under EM2.

Testing:
1. Use the expansion header to connect the LEUART to your PC.
2. Pin Configuration:
	2.1. Pin-12 (PD4) LEUART0_TX
	2.2. Pin-14 (PD5) LEUART0_RX
	2.3. Pin-1 Gnd

3. Configure terminal to 9600-8-N-1.
4. Enter characters from your keyboard and see if you receive the echo on the terminal.
5. Check the average current consumption is equal to EM2 on Energy Profiler.

Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit
Device: EFM32HG322F64
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.powertest" label="SLSTK3400A powertest">
    <property key="blurb" value="Power test example, running demonstration of energy modes."/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/powertest/bin/powertest.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library
to demonstrate the use of the various Energy Modes available on the
EFM32HG322F64. When running this example, the Energy Profiler tool
in Simplicity Studio can be used to show the power consumption of each
energy mode.

Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit
Device: EFM32HG322F64
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.rtx_blink" label="SLSTK3400A rtx_blink">
    <property key="blurb" value="Keil RTX RTOS - Blink example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/rtx_blink/bin/rtx_blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - Blink example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the Keil RTX RTOS, and gives a basic demonstration
of using two tasks to blink the LEDs on the board.
This example is intended as a skeleton for new projects using Keil RTX.

Board:  Silicon Labs SLSTK3400A_EFM32HG Development Kit
Device: EFM32HG322F64
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.spaceinvaders" label="SLSTK3400A spaceinvaders">
    <property key="blurb" value="Space Invaders game using the Memory LCD on the SLSTK3400A_EFM32HG."/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/spaceinvaders/bin/spaceinvaders.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Space Invaders game using the Memory LCD on the SLSTK3400A_EFM32HG.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the SLSTK3400A_EFM32HG kit.

Game instructions are displayed on the startup screen.

For debug builds the game may run slow because they are not optimized
for speed. The user should build and run the release builds for
optimized performance.

Board:  Silicon Labs SLSTK3400A_EFM32HG Development Kit
Device: EFM32HG322F64
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.spi_display" label="SLSTK3400A spi_display">
    <property key="blurb" value="Toggle all pixels on the LCD display every 500ms with low energy peripherals."/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/spi_display/bin/spi_display.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Toggle all pixels on the LCD display every 500ms with low energy peripherals.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses EFM32 CMSIS and the EMLIB peripheral library to 
demonstrate driving the Sharp Memory LCD display on the STK3200 kit while 
staying in low energy modes.

A DMA channel is used to transfer frame buffers to the LCD display with the 
SPI protocol, staying in EM1 during the data transfer and in EM3 while
waiting for the next frame update. An RTC interrupt toggles the EXTCOM pin 
60 times per second as required by the display.

Board:  Silicon Labs STK3200 Starter Kit
Device: EFM32HG322F64&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.textdisplay" label="SLSTK3400A textdisplay">
    <property key="blurb" value="Printf output on Sharp Memory LCD LS013B7DH03."/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/textdisplay/bin/textdisplay.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Printf output on Sharp Memory LCD LS013B7DH03.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the EFM32 Happy Gecko. In this case the
display is used as output from a regular printf in the application, as
an alternative to the RS232 port.

The user can customize the behaviour of the DISPLAY driver by changing
configuration macros in displayconfigapp.h.

Board:  Silicon Labs SLSTK3400A_EFM32HG Development Kit
Device: EFM32HG322F64
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.touch" label="SLSTK3400A touch">
    <property key="blurb" value="Capacitive touch example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/touch/bin/touch.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Capacitive touch example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrates the capacitive touch capability
of the EFM32 Happy Gecko Starter Kit.

It demonstrates the use of CAPSENSE and DISPLAY drivers.
Pressing T1/T2 touch pads will decrease/increase the counter shown on the LCD.

Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit
Device: EFM32HG322F64
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.weatherstation" label="SLSTK3400A weatherstation">
    <property key="blurb" value="Weatherstation using the Sensor add-on board on the SLSTK3400A_EFM32HG."/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/weatherstation/bin/weatherstation.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Weatherstation using the Sensor add-on board on the SLSTK3400A_EFM32HG.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the SLSTK3400A_EFM32HG kit. In addition, it
demonstrates the use of Silabs I2C based sensors on the expansion board
header.

You must have a Silabs Sensor add-on board to make use of this demo.
Once the demo is started, hold your hand over the gesture sensor. Once
the sensor detects your hand the display will become active.

Swipe left and right over the sensor to scroll through temperature, humidity
and UV index. On the temperature screen, you can swipe up or down to change
between Fahrenheit or Celcius.

Note: Due to the size of this example, you might need to enable compiler
optimizations to be able to fit the entire binary in the 32k of flash!

Board:  Silicon Labs SLSTK3400A_EFM32HG Development Kit and Sensor Add-on board
Device: EFM32HG322F64
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.gterm" label="SLSTK3400A gterm">
    <property key="blurb" value="Gterm - an asynchronous termianl example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/gterm/bin/gterm.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Gterm - an asynchronous termianl example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrates how to use the display and a uart to make a simple asynchronous terminal
by utilizing the textdisplay and uartdrv drivers.

The uartdrv driver is configured to use vcom and stdout is configured to print to the display
through textdisplay.

Received data is displayed on the screen, while pressing B0 or B1 will transmit some predefined
strings.

Board:  Silicon Labs SLSTK3400A_EFM32HG Starter Kit
Device: EFM32HG322F64
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.humitemp" label="SLSTK3400A humitemp">
    <property key="blurb" value="Humidity and temperature demo using the on-board si7021 sensor on the SLSTK3400A_EFM32HG board."/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/humitemp/bin/humitemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the SLSTK3400A_EFM32HG board.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the 
SLSTK3400A_EFM32HG board.

Board:  Silicon Labs SLSTK3400A_EFM32HG starter kit.
Device: EFM32HG322F64
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.si72xx_wheeldemo" label="SLSTK3400A si72xx_wheeldemo">
    <property key="blurb" value="Hall effect demo code for the Si72xx-WD-Kit using a Silicon Labs"/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/si72xx_wheeldemo/bin/si72xx_wheeldemo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Hall effect demo code for the Si72xx-WD-Kit using a Silicon Labs&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;SLSTK3400A-EFM32HG Starter Kit.

You must have the Hall Effect Evaluation kit, Si72xx-WD-Kit, to make use of
this demo. The Si72xx-WD-Kit includes two Si7210 sensors mounted on an 
expansion board (Si72xx-EXP) plus each of the six base part types mounted on 
small postage-stamp-sized (PS) boards. You must use the Silicon Labs 
SLSTK3400A-EFM32HG Starter Kit which is included in the Si72xx-WD-Kit.

This example includes eight demos, two for the Si72xx-EXP and one for each of 
the PS-boards. Individual files are included to measure and convert the sensor 
outputs into magnetic field readings for the Si7211-EB, Si7212-EB and Si7213-EB
boards. The Si72xx-EXP and Si7210-EB boards use the Silicon Labs Hall Effect 
Sensor driver to demonstrate the sensor's features by communicating over I2C. 

Note: For a complete list of the demos and their descriptions, please reference
the Si72xx-WD-Kit User's Guide, UG288.

Add-on boards
Device: EFM32HG322F64&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.usbdcdc" label="SLSTK3400A usbdcdc">
    <property key="blurb" value="USB CDC virtual COM port example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/usbdcdc/bin/usbdcdc.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB CDC virtual COM port example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
and implements an USB CDC based virtual COM port.

USART1 on the STK is used as the physical COM port.
Any data sent to the virtual CDC COM port is transmitted on USART1.
Any data received on USART1 is transmitted to the virtial port.
Connect a terminal to the TTL-level serialport (115200-N-8-1) on EXP port pins
3 (Tx)  and 5 (Rx).

When connecting the mcu plugin boards USB port to a Windows host PC,
the new hardware &quot;Wizard&quot; may or may not prompt you to provide a driver
installation file (.inf file) depending on your Windows version.

Manually direct Windows to look for drivers in the directory where you have
unpacked your copy of the Silabs-CDC_Install.zip driver file.
This can be done with the new device &quot;Wizard&quot; which might pop up after device
insertion, or you can open &quot;Device Manager&quot;, left click on the new device and
select &quot;Update Driver Software...&quot;.

Some versions of Windows wont allow you to install unsigned drivers. If you
suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.
Win7:
Repeatedly push F8 during boot until the boot menu appears.
Select the &quot;Disable Driver Signature Enforcement&quot; option.
Win10:
Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.
When computer has restarted into the options menu, select:
Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement
You should now be able to install an unsigned driver.

When a driver is succesfully installed, the device will be listed as a &quot;Ports&quot;
device in Device Manager, double-click it, select the &quot;Port Settings&quot; tab and
maybe the &quot;Advanced...&quot; button to set serial port properties.

Board:  Silicon Labs SLSTK3400A Starter Kit
Device: EFM32HG322F64
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.usbdcomposite" label="SLSTK3400A usbdcomposite">
    <property key="blurb" value="USB Composite Device example, HID + CDC + Vendor unique functions."/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/usbdcomposite/bin/usbdcomposite.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Composite Device example, HID + CDC + Vendor unique functions.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
to implement a composite USB device with tree functions:

 - Human Interface Device (HID) keyboard device, implementing a one button kbd.
 - Communication device class (CDC) implementing a USB to UART bridge
 - Vendor Unique Device similar to the usbdvud example (control STK leds).

As the CDC function has two interface, the CDC function use an Interface
Association Descriptor (IAD). A composite device which use IAD's must be
implemented using bDeviceClass=0xEF, bDeviceSubClass=2 and bDeviceProtocol=1.


The vendor unique function (VUD).
=================================
Toggles user LED's 0 and 1 when receiving vendor unique class setup commands.
Intended to be used together with the &quot;libusb&quot; device driver, and host
application EFM32-LedApp.exe (a Windows application).
You will find libusb and EFM32-LedApp.exe in the &quot;host&quot; folder of the usbdvud
example. Check EFM32_Vendor_Unique_Device.inf to see how both the usbdvud
example VID_10C4&amp;PID_0001 and this composite example VID_10C4&amp;PID_0008&amp;MI_00
are specified.

The CDC COM port function.
==========================
Implements an USB CDC based virtual COM port. USART1 on the DK is used as the
physical COM port. Any data sent to the virtual CDC COM port is transmitted on
USART1. Any data received on USART1 is transmitted to the virtual port.
USART1 is available on the STK EXP port. EXP pin 3 is Tx, pin 5 is Rx.
NOTE: This is a TTL level USART, DO NOT CONNECT DIRECTLY TO RS232 PORTS !

The HID keyboard function.
=================================
Implements a single button keyboard with pushbutton PB0.
Will transmit the string &quot;Silicon Labs -&quot;, one char for each button push.


Windows driver installation.
============================
The first time the composite USB device is connected to the host, Windows must
install drivers for the VUD and CDC functions.

To control the VUD function with EFM32-LedApp.exe you need to install &quot;libusb&quot;
device driver. Manually direct Windows to look for this driver in the &quot;host&quot;
folder of the usbdvud example.
This can be done with the new device &quot;Wizard&quot; which might pop up after device
insertion, or you can open &quot;Device Manager&quot;, left click on one of functions
of the new composite device (marked with yellow exclamation mark) and
select &quot;Update Driver Software...&quot;.
After libusb is installed you can start EFM32-LedApp.exe to control leds on
the DK.

Similarly for the CDC function, direct Windows to look for a driver in the
folder where you have your copy of the &quot;EFM32-Cdc.inf&quot; file (same folder as
this readme file, unzip the Silabs-CDC_Install.zip).
Note how the .inf file specifies interface number 2, VID_10C4&amp;PID_000A&amp;MI_02.
When the serial port driver is succesfully installed, the device will be listed
as a &quot;Ports&quot; device in Device Manager, double-click it, select the
&quot;Port Settings&quot; tab and maybe the &quot;Advanced...&quot; button to set serial port
properties.

Some versions of Windows wont allow you to install unsigned drivers. If you
suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.
Win7:
Repeatedly push F8 during boot until the boot menu appears.
Select the &quot;Disable Driver Signature Enforcement&quot; option.
Win10:
Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.
When computer has restarted into the options menu, select:
Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement
You should now be able to install an unsigned driver.

Board:  Silicon Labs SLSTK3400A Starter Kit
Device: EFM32HG322F64
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.usbdhidkbd" label="SLSTK3400A usbdhidkbd">
    <property key="blurb" value="USB LEUSB HID keyboard example. (Extends original HID keyboard example)"/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/usbdhidkbd/bin/usbdhidkbd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB LEUSB HID keyboard example. (Extends original HID keyboard example)&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 USB Device protocol stack
and implements an USB HID class keyboard device (one button !).

The HID device enumerates and immediately disables the Low Energy USB features
(which are enabled by default in the USB protocol stack), allowing observation
of &quot;normal&quot; power consumption on VBUS.

PB0 is the keyboard button. Pressing this button will succesively write
&quot;Silicon Labs / &quot;.

PB1 is the toggle button for Low Energy Mode (LEM).  Pressing this button will
alternate between LEM enabled/disabled.  The graphic displayed on the STK LCD
will update to reflect this state (reads &quot;HID keyboard Device&quot; in normal mode,
or &quot;Low-Energy USB&quot; when LEM is enabled).

The example is power optimized when LEM is enabled.  With the STK power switch in
&quot;USB&quot; position (board power is drawn from USB host via VBUS), when USB cable is plugged
in and USB is active the current drawn from VBUS is ~8.3 mA in normal mode, or ~5.8 mA
when LEM is enabled, of which only ~460 uA is consumed by the USB PHY.  When the cable
is disconnected or the device is suspended, the current is less than 5 uA.


Board:  Silicon Labs SLSTK3400A Starter Kit
Device: EFM32HG322F64
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.usbdmsd" label="SLSTK3400A usbdmsd">
    <property key="blurb" value="USB Mass Storage Device example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/usbdmsd/bin/usbdmsd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Mass Storage Device example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
to implement a device Mass Storage Class device (MSD).

The example implements a small 32KByte &quot;disk&quot; using internal FLASH memory.

Led 0 will flash when there is traffic on the USB bus, led 1 will be on when
the device is connected to an USB host.

NOTE: The example does not check if the code segment extends into the
32KByte &quot;disk&quot; part of flash memory. Take care when adding code to the example !

Board:  Silicon Labs SLSTK3400A Starter Kit
Device: EFM32HG322F64
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.usbdvud" label="SLSTK3400A usbdvud">
    <property key="blurb" value="USB Vendor Unique Device example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/usbdvud/bin/usbdvud.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Vendor Unique Device example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
and implements an USB Vendor Unique Device.

The example will toggle LED's 0 and 1 when receiving vendor unique class
setup commands.

This example is intended to be used together with the &quot;libusb&quot; device driver,
and host application EFM32-LedApp.exe (a Windows application).

The first time the USB device is connected to the host, you must tell the host
OS to install the &quot;libusb&quot; device driver.

On Windows, you can follow this procedure:
Insert the device, and manually direct Windows to look for drivers in the
directory where you have your copy of the &quot;EFM32_Vendor_Unique_Device.inf&quot; file.
This can be done with the new device &quot;Wizard&quot; which might pop up after device
insertion, or you can open &quot;Device Manager&quot;, left click on the new device and
select &quot;Update Driver Software...&quot;.

Some versions of Windows wont allow you to install unsigned drivers. If you
suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.
Win7:
Repeatedly push F8 during boot until the boot menu appears.
Select the &quot;Disable Driver Signature Enforcement&quot; option.
Win10:
Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.
When computer has restarted into the options menu, select:
Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement
You should now be able to install an unsigned driver.

After libusb is installed, start EFM32-LedApp.exe.

This example will output some info on the VCOM serial port.

Board:  Silicon Labs SLSTK3400A Starter Kit
Device: EFM32HG322F64
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.usbxpress_echo" label="SLSTK3400A usbxpress_echo">
    <property key="blurb" value="USBXpress Echo example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/usbxpress_echo/bin/usbxpress_echo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USBXpress Echo example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project demonstrates the EFM32 USBXpress firmware library.
It echoes all received data back to the host that sent it.

The host-side application is the usbxpress_echo.py Python script found in the
USBXpress SDK at Examples/Echo/Host. The USBXpress SDK is available for download
at www.silabs.com/products/mcu/Pages/USBXpress.aspx.

Board:  Silicon Labs SLSTK3400A Starter Kit
Device: EFM32HG322F64
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32hg.slstk3400a.demo.usbxpress_test_panel" label="SLSTK3400A usbxpress_test_panel">
    <property key="blurb" value="USBXpress Test Panel example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.hg.*"/>
    <property key="boardCompatibility" value="brd2012a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3400A_EFM32HG/usbxpress_test_panel/bin/usbxpress_test_panel.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USBXpress Test Panel example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project demonstrates the EFM32 USBXpress firmware library.
It communicates with the TestPanel host application to send and receive data.
TestPanel is included in the USBXpress SDK, available for download at:

https://www.silabs.com/products/mcu/Pages/USBXpress.aspx

Board:  Silicon Labs SLSTK3400A Development Kit
Device: EFM32HG322F64
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg.slstk3401a.demo.blink" label="SLSTK3401A blink">
    <property key="blurb" value="Blink example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <property key="boardCompatibility" value="brd2500a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3401A_EFM32PG/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library
to demonstrate the use of the LED on the SLSTK3401A kit.
This example is intended as a skeleton for new projects.

Board:  Silicon Labs SLSTK3401A Starter Kit
Device: EFM32PG1B200F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg.slstk3401a.demo.clock" label="SLSTK3401A clock">
    <property key="blurb" value="Analog and digital clock example using the Memory LCD on the SLSTK3401A."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <property key="boardCompatibility" value="brd2500a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3401A_EFM32PG/clock/bin/clock.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLSTK3401A.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the SLSTK3401A kit.

The user can switch between analog and digital clock modes by pushing
the PB0 button.

The user can increment the second count by pushing the PB1 button.
The minute count can be incremented by pushing the PB1 button for more
than 2 seconds.

The analog clock mode demonstrates the use of GLIB to draw hour, minute
and second pointers.

The digital clock demonstrates the 16x20 font (including number characters
only) of the textdisplay driver.

Board:  Silicon Labs SLSTK3401A Starter Kit
Device: EFM32PG1B200F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg.slstk3401a.demo.cpt007b" label="SLSTK3401A cpt007b_demo">
    <property key="blurb" value="CPT007B Demo"/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <property key="boardCompatibility" value="brd2500a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3401A_EFM32PG/cpt007b/bin/cpt007b_demo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;CPT007B Demo&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This demo demonstrates the capacitive button function of CPT007B fixed function
board. This demo runs on the EFM32 STK, and communicates with CPT007B through
the GPIO pins on the EXP header. Virtual buttons on STK's LCD screen indicate
whether the capacitive sensing buttons on CPT007B are pressed or released.
This demo supports up to 7 capacitive buttons on CPT007B
 
Board:  Silicon Labs SLSTK3401A Starter Kit and CPT007B Evaluation Board
Device: EFM32PG1B200F256&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg.slstk3401a.demo.cpt112s" label="SLSTK3401A cpt112s_demo">
    <property key="blurb" value="CPT112S Demo"/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <property key="boardCompatibility" value="brd2500a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3401A_EFM32PG/cpt112s/bin/cpt112s_demo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;CPT112S Demo&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This demo demonstrates the capacitive button function of CPT112S fixed
function board. This demo runs on the EFM32 STK,and communicates with
CPT112S through the SMBUS pins on the EXP header. Virtual buttons on
STK's LCD screen indicate whether the capacitive sensing buttons on CPT112S
are pressed or released.
 
This demo supports 11 buttons on the CPT112S device.(The CS11 button is
disabled in the default configuration of the board to enable the buzzer)

Board:  Silicon Labs SLSTK3401A Starter Kit and CPT112S Evaluation Board
Device: EFM32PG1B200F256&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg.slstk3401a.demo.cslib" label="SLSTK3401A cslib">
    <property key="blurb" value="CSLIB example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <property key="boardCompatibility" value="brd2500a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3401A_EFM32PG/cslib/bin/cslib.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;CSLIB example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the capacitive sensing firmware library to sample
capacitive sensing buttons on the STK.  Real-time sample information, touch
qualification status, and other state variables can be displayed and examined
in the Capacitive Sensing Profiler tool.

Board:  Silicon Labs SLSTK3401A Starter Kit
Device: EFM32PG1B200F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg.slstk3401a.demo.emlcd" label="SLSTK3401A emlcd">
    <property key="blurb" value="Energy Modes with LCD display example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <property key="boardCompatibility" value="brd2500a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3401A_EFM32PG/emlcd/bin/emlcd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Energy Modes with LCD display example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library to
demonstrate the use of the LCD, RTCC, GPIO and various Energy Modes
on the starter kit.

The example will cycle through Energy Mode EM0-EM3, staying one second in
each mode. PB0 can be pressed anytime to enter EM4.
Wakeup from EM4 is either by reset pushbutton or by GPIO pin (port F pin 7)
connected to pushbutton PB1.

Board:  Silicon Labs SLSTK3401A Starter Kit
Device: EFM32PG1B200F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg.slstk3401a.demo.emode" label="SLSTK3401A emode">
    <property key="blurb" value="Select a single energy mode, and stay there."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <property key="boardCompatibility" value="brd2500a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3401A_EFM32PG/emode/bin/emode.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and demonstrates the use of
the LCD display, RTCC, GPIO and various Energy Modes (EM).

Use PB1 to cycle through the energy mode tests available.
Press PB0 to start selected test.

Note: The EMU power configuration register can only be written once after a
      power-on reset and may be locked to a different configuration. For the
      emode demo to function properly, a power-on reset may be required to
      configure the DCDC properly.

This demo application has been made to give a quick demo of the
Energy Profiler from Silicon Labs, including EFM32 energy modes.

Board:  Silicon Labs SLSTK3401A Starter Kit
Device: EFM32PG1B200F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg.slstk3401a.demo.freertos_demo" label="SLSTK3401A freertos_demo">
    <property key="blurb" value="FreeRTOS - Demo"/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <property key="boardCompatibility" value="brd2500a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3401A_EFM32PG/freertos_demo/bin/freertos_demo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;FreeRTOS - Demo&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This is the demo application which is also provided in the official FreeRTOS 
distribution. The demo can operate in 2 modes showing different functionality 
of the FreeRTOS system. The mode can be configured by changing the value of 
configCREATE_LOW_POWER_DEMO in the FreeRTOSConfig.h file. 

0 =&gt; Full Demo

This is the default mode of this example. The &quot;Full Demo&quot; is a comprehensive 
test and demo application that shows how to use various FreeRTOS API's. When 
running the demo there is a check task which toggles a LED on the board every
3 seconds when the demo is running as expected.

1 =&gt; Low Power using RTCC

This mode is using the low power tickless idle functionality of FreeRTOS to 
show how to use low power while using FreeRTOS. In this mode the MCU will 
sleep in EM2 whenever FreeRTOS enters idle mode and it will be using the RTCC
to trigger wakup.

Further information on the example can be found at this location:
http://www.freertos.org/EFM32-Giant-Gecko-Pearl-Gecko-tickless-RTOS-demo.html

Board:  Silicon Labs SLSTK3401A Starter Kit
Device: EFM32PG1B200F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg.slstk3401a.demo.glib" label="SLSTK3401A glib">
    <property key="blurb" value="GLIB example using the Sharp Memory LCD on the SLSTK3401A."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <property key="boardCompatibility" value="brd2500a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3401A_EFM32PG/glib/bin/glib.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;GLIB example using the Sharp Memory LCD on the SLSTK3401A.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the GLIB library and the DISPLAY device driver
together with EFM32 CMSIS including EMLIB and board support package support
functions/drivers to demonstrate driving the Sharp Memory LCD display on
the SLSTK3401A kit.

The user can switch trough different GLIB example screens by pushing the PB1 button.
The user can reset the demo by pushing the PB0 button.

Board:  Silicon Labs SLSTK3401A Starter Kit
Device: EFM32PG1B200F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg.slstk3401a.demo.humitemp" label="SLSTK3401A humitemp">
    <property key="blurb" value="Humidity and temperature demo using the on-board Si7021 sensor on the SLSTK3401A board."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <property key="boardCompatibility" value="brd2500a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3401A_EFM32PG/humitemp/bin/humitemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board Si7021 sensor on the SLSTK3401A board.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display and the Si7021 humidity and temperature sensor on the 
SLSTK3401A board.

Board:  Silicon Labs SLSTK3401A Starter Kit.
Device: EFM32PG1B200F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg.slstk3401a.demo.inttemp" label="SLSTK3401A inttemp">
    <property key="blurb" value="ADC temperature sensor demo using the SLSTK3401A_EFM32PG board."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <property key="boardCompatibility" value="brd2500a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3401A_EFM32PG/inttemp/bin/inttemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;ADC temperature sensor demo using the SLSTK3401A_EFM32PG board.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the 
board support package support functions/drivers to demonstrate how 
to read the ADC temperature sensor. The temperature is sampled and 
displayed on the Sharp Memory LCD display every second.

Board:  Silicon Labs SLSTK3401A_EFM32PG starter kit
Device: EFM32PG1B200F256GM48
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg.slstk3401a.demo.leuart" label="SLSTK3401A leuart">
    <property key="blurb" value="LEUART/LDMA in Energy mode2 output example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <property key="boardCompatibility" value="brd2500a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3401A_EFM32PG/leuart/bin/leuart.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;LEUART/LDMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project reads and sends data byte back to terminal using LEUART
while staying in EM2.

It uses the EFM32 CMSIS and EMLIB, to demonstrate the
use of LEUART communication using LDMA under the EM2 on the 
SLSTK3401A Starter Kit.

The LEUART is configured to be used with LDMA under EM2.
The terminal configuration is 9600-8-N-1.
The LDMA is configured to handle read and write data bytes from LEUART under EM2.

Testing:
1. Use the expansion header to connect the LEUART to your PC.
2. Pin Configuration:
	2.1. Pin-12 (PA0) LEUART0_TX
	2.2. Pin-14 (PA1) LEUART0_RX
	2.3. Pin-1 Gnd

3. Configure terminal to 9600-8-N-1.
4. Enter characters from your keyboard and see if you receive the echo on the terminal.
5. Check the average current consumption is equal to EM2 on Energy Profiler.

Board:  Silicon Labs SLSTK3401A Starter Kit
Device: EFM32PG1B200F256GM48&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg.slstk3401a.demo.mbedtls_aescrypt" label="SLSTK3401A aescrypt">
    <property key="blurb" value="mbedTLS AES example using the CRYPTO module in the EFM32PG to"/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <property key="boardCompatibility" value="brd2500a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3401A_EFM32PG/mbedtls_aescrypt/bin/aescrypt.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;mbedTLS AES example using the CRYPTO module in the EFM32PG to&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;accelerate the AES encryption and SHA hash functions of mbedTLS.

This example project uses the EFM32 CMSIS including EMLIB to run
mbedTLS libraries on the EFM32PG.

The example redirects standard io to the VCOM virtual serial port of the
SLSTK3401A_EFM32PG kit. By default the serial port setting is 115200-8-N-1.

The user should connect a terminal emulator program, and follow the
instructions shown on the console.

The user can select encryption or decryption of a message which should be sent
via the VCOM serial interface.

A hardcoded 256-bit key is used for encryption and decryption.

In ecryption mode, the example will ask the user for a short phrase to
generate an initial vector used in the AES encryption process. The user may type
any phrase ended by newline or limited to a maximum of 16 bytes. After the short
phrase, the user should start typing in the message to be encrypted, followed by
a newline to mark the end of the message. The message length is limited to
the #define MAX_MESSAGE_SIZE_ENCRYPTION. Then the program will encrypt the
message (plaintext), and print out the ciphertext, preceded with the initial
vector of 16 bytes and followed by a message digest tag of 32 bytes. All data
is converted to hexadecimal readable text format before sent to the serial port.
The format is:
Initial Vector(16 bytes) | Ciphertext | Message Digest Tag (32 bytes)

The user can copy the output and feed it back to the program for decryption
later. The user need to reset the kit in order to run decryption mode.

In decryption mode, the example will expect to receive a decrypted message
in the same format as generated by the encryption (as shown above).

The example has been instrumented with code to count the number of clock
cycles spent in the encryption and decryption loops. To observe the
performance gain of CRYPTO acceleration, the user can switch off
CRYPTO hardware acceleration by compiling with -DNO_CRYPTO_ACCELERATION
in the compiler command line.

Board:  Silicon Labs SLSTK3401A Starter Kit
Device: EFM32PG1B200F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg.slstk3401a.demo.mbedtls_ecdsa" label="SLSTK3401A ecdsa">
    <property key="blurb" value="mbedTLS ECDSA example using the CRYPTO module in the EFM32PG to"/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <property key="boardCompatibility" value="brd2500a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3401A_EFM32PG/mbedtls_ecdsa/bin/ecdsa.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;mbedTLS ECDSA example using the CRYPTO module in the EFM32PG to&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;accelerate the ECDSA API functions of mbedTLS.

This example project uses the EFM32 CMSIS including EMLIB to run
mbedTLS libraries on the EFM32PG.

The example redirects standard I/O to the VCOM virtual serial port of the
SLSTK3401A_EFM32PG kit. The user can use a terminal emulator program to
connect to the serial port with the default settings of 115200-8-N-1.

The example has been instrumented with code to count the number of clock
cycles spent inside the ecdsa api calls, mbedtls_ecdsa_genkey,
mbedtls_ecdsa_write_signature and mbedtls_ecdsa_read_signature.
The results are printed to stdout, i.e. the VCOM serial port console.
To check the performance gain of CRYPTO acceleration, the user
can switch off CRYPTO hardware acceleration by compiling with
-DNO_CRYPTO_ACCELERATION in the compiler command line.

The user can change the specific ECC curve used in the example
by modifying the ECPARAMS macro definition. Available curves with
CRYPTO acceleration support are:
MBEDTLS_ECP_DP_SECP256R1
MBEDTLS_ECP_DP_SECP224R1
MBEDTLS_ECP_DP_SECP192R1

Board:  Silicon Labs SLSTK3401A Starter Kit
Device: EFM32PG1B200F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg.slstk3401a.demo.micriumos_blink" label="SLSTK3401A micriumos_blink">
    <property key="blurb" value="MicriumOS Blink example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <property key="boardCompatibility" value="brd2500a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3401A_EFM32PG/micriumos_blink/bin/micriumos_blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;MicriumOS Blink example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example shows how to initialize and run MicriumOS on the kit. The 
application will start a single task which is blinking LED 0 at a regular 
interval. This examples is a good starting point for applications that want 
to use MicriumOS.

Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.
SystemView Trace is enabled by default and can be disabled by changing the 
OS_CFG_TRACE_EN configuration inside the os_cfg.h file. SystemView can be used
to inspect the runtime behaviour of this example, it will give a nice overview
of the tasks and interrupts in the application. SystemView can be downloaded 
from https://www.segger.com/systemview.html

Board:  Silicon Labs SLSTK3401A Starter Kit
Device: EFM32PG1B200F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg.slstk3401a.demo.micriumos_dynamic" label="SLSTK3401A micriumos_dynamic">
    <property key="blurb" value="Micrium OS Dynamic Tick example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <property key="boardCompatibility" value="brd2500a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3401A_EFM32PG/micriumos_dynamic/bin/micriumos_dynamic.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Micrium OS Dynamic Tick example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example shows how to initialize and run MicriumOS on the kit. The 
application will start a single task which is blinking LED 0 at a regular 
interval. This example is using the dynamic tick feature of Micrium OS 
to be able to enter EM2 whenever the application is idle. This examples 
is a good starting point for applications that want to use Micrium OS 
while using EM2.

Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.
SystemView Trace is disabled by default in this example, but can be enabled by 
changing the OS_CFG_TRACE_EN configuration inside the os_cfg.h file. 
SystemView can be used to inspect the runtime behaviour of this example, it 
will give a nice overview of the tasks and interrupts in the application. 
SystemView can be downloaded from https://www.segger.com/systemview.html

Board:  Silicon Labs SLSTK3401A Starter Kit
Device: EFM32PG1B200F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg.slstk3401a.demo.micriumos_wifi_whiteboard" label="SLSTK3401A micriumos_wifi_whiteboard">
    <property key="blurb" value="Wireless Whiteboard Demo: Micrium OS + WiFi + Graphics LCD"/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <property key="boardCompatibility" value="brd2500a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3401A_EFM32PG/micriumos_wifi_whiteboard/bin/micriumos_wifi_whiteboard.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Wireless Whiteboard Demo: Micrium OS + WiFi + Graphics LCD&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
In this demo you get to draw something on your smart phone and watch the
drawing being displayed in the board's LCD. 

Hardware Requirements
---------------------

This demo requires the three boards illustrated in the following diagram:

 +---------------------------------------+  +----------------------------+
 | EFM32 Pearl Gecko                     |  | Wireless Expansion Board   |
 | SLSTK3401A                            |--| PCB8016                    |
 | PCB2500                               |--|           +--------------+ |
 |                                       |--|           | Wizard Gecko | |
 |                                       |--|           | WGM110       | |
 |                                       |--|           | PCB4320      | |
 |                                       |--|           |              | |
 |                                       |--|           |              | |
 |                                       |--|           +--------------+ |
 |    SWITCH                             |--|   SWITCH                   |
 |  BAT  [AEM]                           |  |  3V  [5V]                  |
 +---------------------------------------+  +----------------------------+
                                        20-pin
                                       Exp. Hdr.

Configuration
-------------

1. Connect the boards as illustrated in the diagram above.

2. Configure the board switches as illustrated in the previous diagram:

   a. AEM
   b. 5V

3. Enter your WiFi access point's SSID and Password in the file app_wifi_cfg.h

4. Build the project.

Execution
---------

1. Execute the application by launching a debug session and wait for the
   board to connect to the TCP server at demo.silabs.com

   The application will display a series of messages to show you the progress
   as follows:

   a. Connecting to [Your SSID]
   b. Connecting to [demo.silabs.com resolved IP address]
   c. MAC Address: [Your MAC address]

2. Open your favorite browser, go to the web page at http://demo.silabs.com
   and select the Wireless Whiteboard demo for the Pearl Gecko.

3. Enter your board's MAC address in the web page and start drawing.

4. Press the buttons to switch between screens.

Tools
-----

This demo features two development tools; uC/Probe and SystemView.

To learn more about these tools take the following steps:

1. uC/Probe:

   Click the button uC/Probe on the toolbar of Simplicity Studio.

2. SystemView:

   a. Install SystemView from https://www.segger.com/systemview.html
   
   b. Enable kernel tracing by setting OS_CFG_TRACE_EN to DEF_ENABLED
      in os_cfg.h
   
   c. Rebuild the project.
 
   d. Launch a debugging session.
   
   e. Open SystemView and press the F5 key or select Target from the
      Options Menu and click Start Recording.

Board: Silicon Labs SLSTK3401A Starter Kit
Device: EFM32PG1B200F256GM48
Expansion Board: PCB8016
WiFi Module: Wizard Gecko WGM110 PCB4320
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg.slstk3401a.demo.powertest" label="SLSTK3401A powertest">
    <property key="blurb" value="Power test example, running demonstration of energy modes."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <property key="boardCompatibility" value="brd2500a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3401A_EFM32PG/powertest/bin/powertest.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library
to demonstrate the use of the various Energy Modes available on the
EFM32PG1B200F256. When running this example, the Energy Profiler tool
in Simplicity Studio can be used to show the power consumption of each
energy mode.

Board:  Silicon Labs SLSTK3401A Starter Kit
Device: EFM32PG1B200F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg.slstk3401a.demo.prs" label="SLSTK3401A prs">
    <property key="blurb" value="PRS example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <property key="boardCompatibility" value="brd2500a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3401A_EFM32PG/prs/bin/prs.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;PRS example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library
to demonstrate the use of the Peripheral Reflex System (PRS) on the 
SLSTK3401A kit. The LETIMER0 toggles LED1 via PRS channel 0 at every 250ms.
Button BTN0 toggles LED0 at every 5th press via PCNT0 and PRS channel 2.
This example operates in EM2.

Board:  Silicon Labs SLSTK3401A Starter Kit
Device: EFM32PG1B200F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg.slstk3401a.demo.rtx_blink" label="SLSTK3401A rtx_blink">
    <property key="blurb" value="Keil RTX RTOS - Blink example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <property key="boardCompatibility" value="brd2500a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3401A_EFM32PG/rtx_blink/bin/rtx_blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - Blink example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the Keil RTX RTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board.
This example is intended as a skeleton for new projects using Keil RTX.

Board:  Silicon Labs SLSTK3401A
Device: EFM32PG1B200F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg.slstk3401a.demo.spaceinvaders" label="SLSTK3401A spaceinvaders">
    <property key="blurb" value="Space Invaders game using the Memory LCD on the SLSTK3401A."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <property key="boardCompatibility" value="brd2500a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3401A_EFM32PG/spaceinvaders/bin/spaceinvaders.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Space Invaders game using the Memory LCD on the SLSTK3401A.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the SLSTK3401A Starter Kit.

Game instructions are displayed on the startup screen.
(On kits with slider instead of touch pads, use outermost segments to move tank).

For debug builds the game may run slow because they are not optimized
for speed. The user should build and run the release builds for
optimized performance.

Board:  Silicon Labs SLSTK3401A Starter Kit
Device: EFM32PG1B200F256GM48
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg.slstk3401a.demo.tempdrv" label="SLSTK3401A tempdrv">
    <property key="blurb" value="Display temperature range in Energy Mode 3 using SLSTK3401A_EFM32PG board."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <property key="boardCompatibility" value="brd2500a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3401A_EFM32PG/tempdrv/bin/tempdrv.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Display temperature range in Energy Mode 3 using SLSTK3401A_EFM32PG board.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
In this example project temperature is being sampled and the correct
temperature range will be displayed on the LCD.
Following messages will be displayed on the LCD based on the temperature
reading:
  1. Below 0 degC
  2. Above 30 degC
  3. Above 85 degC
  4. Between 0 &amp; 30 degC

The example project uses temperature driver(tmpdrv) to monitor 
temperature and a display module to display the correct 
temperature range on the LCD. tempdrv allows us to specify 
the temperature level and register a callback if 
the temperature increases or decreases from the specified threshold.
Moreover, after displaying the right message on the LCD the board goes
to Energy mode 3 to preserve the power consumption.  

The project uses the EFM32 CMSIS including EMLIB, the board support and 
the package support functions/drivers to demonstrate the use of 
tempdrv and the LCD display.

Board:  Silicon Labs SLSTK3401A_EFM32PG starter kit
Device: EFM32PG1B200F256GM48
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg.slstk3401a.demo.textdisplay" label="SLSTK3401A textdisplay">
    <property key="blurb" value="Printf output on Sharp Memory LCD LS013B7DH03."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <property key="boardCompatibility" value="brd2500a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3401A_EFM32PG/textdisplay/bin/textdisplay.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Printf output on Sharp Memory LCD LS013B7DH03.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the EFM32 Pearl Gecko. In this case the
display is used as output from a regular printf in the application, as
an alternative to using LEUART or UART for text output.

The user can customize the behaviour of the DISPLAY driver by changing
configuration macros in displayconfigapp.h.

Board:  Silicon Labs SLSTK3401A Starter Kit
Device: EFM32PG1B200F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg.slstk3401a.demo.touch" label="SLSTK3401A touch">
    <property key="blurb" value="Capacitive touch example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <property key="boardCompatibility" value="brd2500a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3401A_EFM32PG/touch/bin/touch.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Capacitive touch example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrates the capacitive touch capability
of the SLSTK3401A Starter Kit.

It demonstrates the use of CAPSENSE and DISPLAY drivers.
Pressing T1/T2 touch pads will decrease/increase the counter shown on the LCD.
(On kits with slider instead of touch pads, use outermost segments).

Board:  Silicon Labs SLSTK3401A Starter Kit
Device: EFM32PG1B200F256
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg.slstk3401a.demo.vcom" label="SLSTK3401A vcom">
    <property key="blurb" value="VCOM communication example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <property key="boardCompatibility" value="brd2500a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3401A_EFM32PG/vcom/bin/vcom.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;VCOM communication example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB to demonstrates the
use of USART and LEUART communication on the SLSTK3401A Starter Kit 
using the virtual COM port.

Virtual COM port through USB is used in by default this example. Undefine 
&quot;RETARGET_VCOM&quot; in the project to use UART on EXP header pins. For EXP header 
UART communication, serial configuration 115200-8-N-1 is used on EXP pin 1 is GND, 
EXP pin 12 is USART0 Tx and EXP pin 14 is USART0 Rx.

If LEUART mode is configured by defining &quot;RETARGET_LEUART0&quot; as a build option,
terminal configuration is 9600-8-N-1 if &quot;RETARGET_VCOM&quot; is not defined, and
115200-8-N-1 if &quot;RETARGET_VCOM&quot; is defined.

Board:  Silicon Labs SLSTK3401A Starter Kit
Device: EFM32PG1B200F256GM48
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg.slstk3401a.demo.weatherstation" label="SLSTK3401A weatherstation">
    <property key="blurb" value="Weatherstation using the Sensor add-on board on the SLSTK3401A."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg1.*"/>
    <property key="boardCompatibility" value="brd2500a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3401A_EFM32PG/weatherstation/bin/weatherstation.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Weatherstation using the Sensor add-on board on the SLSTK3401A.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the SLSTK3401A kit. In addition, it
demonstrates the use of Silicon Labs I2C based sensors on the expansion
board header.

You must have a Silicon Labs Sensor add-on board to make use of this demo.
Once the demo is started, hold your hand over the gesture sensor. Once
the sensor detects your hand the display will become active.

Swipe left and right over the sensor to scroll through temperature, humidity
and UV index. On the temperature screen, you can swipe up or down to change
between Fahrenheit or Celcius.

Board:  Silicon Labs SLSTK3401A Starter Kit and Sensor Add-on board
Device: EFM32PG1B200F256GM48
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.blink" label="SLSTK3402A blink">
    <property key="blurb" value="Blink example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library
to demonstrate the use of the LED on the SLSTK3402A kit.
This example is intended as a skeleton for new projects.

Board:  Silicon Labs SLSTK3402A Starter Kit
Device: EFM32PG12B500F1024GL125
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.clock" label="SLSTK3402A clock">
    <property key="blurb" value="Analog and digital clock example using the Memory LCD on the SLSTK3402A."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/clock/bin/clock.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLSTK3402A.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the SLSTK3402A kit.

The user can switch between analog and digital clock modes by pushing
the PB0 button.

The user can increment the second count by pushing the PB1 button.
The minute count can be incremented by pushing the PB1 button for more
than 2 seconds.

The analog clock mode demonstrates the use of GLIB to draw hour, minute
and second pointers.

The digital clock demonstrates the 16x20 font (including number characters
only) of the textdisplay driver.

Board:  Silicon Labs SLSTK3402A Starter Kit
Device: EFM32PG12B500F1024GL125
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.cpt007b" label="SLSTK3402A cpt007b_demo">
    <property key="blurb" value="CPT007B Demo"/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/cpt007b/bin/cpt007b_demo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;CPT007B Demo&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This demo demonstrates the capacitive button function of CPT007B fixed function
board. This demo runs on the EFM32 STK, and communicates with CPT007B through
the GPIO pins on the EXP header. Virtual buttons on STK's LCD screen indicate
whether the capacitive sensing buttons on CPT007B are pressed or released.
This demo supports up to 7 capacitive buttons on CPT007B
 
Board:  Silicon Labs SLSTK3402A Starter Kit and CPT007B Evaluation Board
Device: EFM32PG12B500F1024GL125&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.cpt112s" label="SLSTK3402A cpt112s_demo">
    <property key="blurb" value="CPT112S Demo"/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/cpt112s/bin/cpt112s_demo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;CPT112S Demo&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This demo demonstrates the capacitive button function of CPT112S fixed
function board. This demo runs on the EFM32 STK,and communicates with
CPT112S through the SMBUS pins on the EXP header. Virtual buttons on
STK's LCD screen indicate whether the capacitive sensing buttons on CPT112S
are pressed or released.
 
This demo supports 11 buttons on the CPT112S device.(The CS11 button is
disabled in the default configuration of the board to enable the buzzer)

Board:  Silicon Labs SLSTK3402A Starter Kit and CPT112S Evaluation Board
Device: EFM32PG12B500F1024GL125&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.emlcd" label="SLSTK3402A emlcd">
    <property key="blurb" value="Energy Modes with LCD display example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/emlcd/bin/emlcd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Energy Modes with LCD display example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library to
demonstrate the use of the LCD, RTCC, GPIO and various Energy Modes
on the starter kit.

The example will cycle through Energy Mode EM0-EM3, staying one second in
each mode. PB0 can be pressed anytime to enter EM4.
Wakeup from EM4 is either by reset pushbutton or by GPIO pin (port F pin 7)
connected to pushbutton PB1.

Board:  Silicon Labs SLSTK3402A Starter Kit
Device: EFM32PG12B500F1024GL125
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.emode" label="SLSTK3402A emode">
    <property key="blurb" value="Select a single energy mode, and stay there."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/emode/bin/emode.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and demonstrates the use of
the LCD display, RTCC, GPIO and various Energy Modes (EM).

Use PB1 to cycle through the energy mode tests available.
Press PB0 to start selected test.

Note: The EMU power configuration register can only be written once after a
      power-on reset and may be locked to a different configuration. For the
      emode demo to function properly, a power-on reset may be required to
      configure the DCDC properly.

This demo application has been made to give a quick demo of the
Energy Profiler from Silicon Labs, including EFM32 energy modes.

Board:  Silicon Labs SLSTK3402A Starter Kit
Device: EFM32PG12B500F1024GL125
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.freertos_demo" label="SLSTK3402A freertos_demo">
    <property key="blurb" value="FreeRTOS - Demo"/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/freertos_demo/bin/freertos_demo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;FreeRTOS - Demo&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This is the demo application which is also provided in the official FreeRTOS 
distribution. The demo can operate in 2 modes showing different functionality 
of the FreeRTOS system. The mode can be configured by changing the value of 
configCREATE_LOW_POWER_DEMO in the FreeRTOSConfig.h file. 

0 =&gt; Full Demo

This is the default mode of this example. The &quot;Full Demo&quot; is a comprehensive 
test and demo application that shows how to use various FreeRTOS API's. When 
running the demo there is a check task which toggles a LED on the board every
3 seconds when the demo is running as expected.

1 =&gt; Low Power using RTCC

This mode is using the low power tickless idle functionality of FreeRTOS to 
show how to use low power while using FreeRTOS. In this mode the MCU will 
sleep in EM2 whenever FreeRTOS enters idle mode and it will be using the RTCC
to trigger wakup.

Further information on the example can be found at this location:
http://www.freertos.org/EFM32-Giant-Gecko-Pearl-Gecko-tickless-RTOS-demo.html

Board:  Silicon Labs SLSTK3402A Starter Kit
Device: EFM32PG12B500F1024GL125
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.glib" label="SLSTK3402A glib">
    <property key="blurb" value="GLIB example using the Sharp Memory LCD on the SLSTK3402A."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/glib/bin/glib.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;GLIB example using the Sharp Memory LCD on the SLSTK3402A.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the GLIB library and the DISPLAY device driver
together with EFM32 CMSIS including EMLIB and board support package support
functions/drivers to demonstrate driving the Sharp Memory LCD display on
the SLSTK3402A kit.

The user can switch trough different GLIB example screens by pushing the PB1 button.
The user can reset the demo by pushing the PB0 button.

Board:  Silicon Labs SLSTK3402A Starter Kit
Device: EFM32PG12B500F1024GL125
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.humitemp" label="SLSTK3402A humitemp">
    <property key="blurb" value="Humidity and temperature demo using the on-board Si7021 sensor on the SLSTK3402A board."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/humitemp/bin/humitemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board Si7021 sensor on the SLSTK3402A board.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display and the Si7021 humidity and temperature sensor on the 
SLSTK3402A board.

Board:  Silicon Labs SLSTK3402A Starter Kit.
Device: EFM32PG12B500F1024GL125
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.inttemp" label="SLSTK3402A inttemp">
    <property key="blurb" value="ADC temperature sensor demo using the SLSTK3402A_EFM32PG board."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/inttemp/bin/inttemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;ADC temperature sensor demo using the SLSTK3402A_EFM32PG board.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the 
board support package support functions/drivers to demonstrate how 
to read the ADC temperature sensor. The temperature is sampled and 
displayed on the Sharp Memory LCD display every second.

Board:  Silicon Labs SLSTK3402A_EFM32PG starter kit
Device: EFM32PG12B500F1024GL125
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.leuart" label="SLSTK3402A leuart">
    <property key="blurb" value="LEUART/LDMA in Energy mode2 output example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/leuart/bin/leuart.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;LEUART/LDMA in Energy mode2 output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project reads and sends data byte back to terminal using LEUART
while staying in EM2.

It uses the EFM32 CMSIS and EMLIB, to demonstrate the
use of LEUART communication using LDMA under the EM2 on the 
SLSTK3402A Starter Kit.

The LEUART is configured to be used with LDMA under EM2.
The terminal configuration is 9600-8-N-1.
The LDMA is configured to handle read and write data bytes from LEUART under EM2.

Testing:
1. Use the expansion header to connect the LEUART to your PC.
2. Pin Configuration:
	2.1. Pin-12 (PA0) LEUART0_TX
	2.2. Pin-14 (PA1) LEUART0_RX
	2.3. Pin-1 Gnd

3. Configure terminal to 9600-8-N-1.
4. Enter characters from your keyboard and see if you receive the echo on the terminal.
5. Check the average current consumption is equal to EM2 on Energy Profiler.

Board:  Silicon Labs SLSTK3402A Starter Kit
Device: EFM32PG12B500F1024GL125&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.mbedtls_aescrypt" label="SLSTK3402A aescrypt">
    <property key="blurb" value="mbedTLS AES example using the CRYPTO module in the EFM32PG to"/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/mbedtls_aescrypt/bin/aescrypt.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;mbedTLS AES example using the CRYPTO module in the EFM32PG to&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;accelerate the AES encryption and SHA hash functions of mbedTLS.

This example project uses the EFM32 CMSIS including EMLIB to run
mbedTLS libraries on the EFM32PG.

The example redirects standard io to the VCOM virtual serial port of the
SLSTK3402A_EFM32PG kit. By default the serial port setting is 115200-8-N-1.

The user should connect a terminal emulator program, and follow the
instructions shown on the console.

The user can select encryption or decryption of a message which should be sent
via the VCOM serial interface.

A hardcoded 256-bit key is used for encryption and decryption.

In ecryption mode, the example will ask the user for a short phrase to
generate an initial vector used in the AES encryption process. The user may type
any phrase ended by newline or limited to a maximum of 16 bytes. After the short
phrase, the user should start typing in the message to be encrypted, followed by
a newline to mark the end of the message. The message length is limited to
the #define MAX_MESSAGE_SIZE_ENCRYPTION. Then the program will encrypt the
message (plaintext), and print out the ciphertext, preceded with the initial
vector of 16 bytes and followed by a message digest tag of 32 bytes. All data
is converted to hexadecimal readable text format before sent to the serial port.
The format is:
Initial Vector(16 bytes) | Ciphertext | Message Digest Tag (32 bytes)

The user can copy the output and feed it back to the program for decryption
later. The user need to reset the kit in order to run decryption mode.

In decryption mode, the example will expect to receive a decrypted message
in the same format as generated by the encryption (as shown above).

The example has been instrumented with code to count the number of clock
cycles spent in the encryption and decryption loops. To observe the
performance gain of CRYPTO acceleration, the user can switch off
CRYPTO hardware acceleration by compiling with -DNO_CRYPTO_ACCELERATION
in the compiler command line.

Board:  Silicon Labs SLSTK3402A Starter Kit
Device: EFM32PG12B500F1024GL125
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.mbedtls_ecdh" label="SLSTK3402A ecdh">
    <property key="blurb" value="mbedTLS ECDH example using the CRYPTO module in the EFM32PG to"/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/mbedtls_ecdh/bin/ecdh.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;mbedTLS ECDH example using the CRYPTO module in the EFM32PG to&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;accelerate the ECDH API functions of mbedTLS.

This example project uses the EFM32 CMSIS including EMLIB to run
mbedTLS libraries on the EFM32PG.

The example use the CTR-DRBG, a pseudo random number generator (PRNG)
included in mbedTLS to generate random private keys for both peers
(client and server) that will share the ECDH secret. If the example is
running on a device including a TRNG hw module (True Random Number Generator)
the TRNG will be used as entropy source to seed the CTR-DRBG. If the device
does not incorporate a TRNG, the example will use dummy data to seed the
CTR-DRBG. The entropy accumulator of mbedTLS will use SHA256 to hash the
the entropy data pool which is filled with data from the entropy sources.

The CTR-DRBG involve use of AES which is accelerated by the CRYPTO AES
accelerator.

The entropy accumulator of mbedTLS is setup to use SHA-256 which is
accelerated by the CRYPTO SHA-256 accelerator.

The example redirects standard I/O to the VCOM virtual serial port of the
SLSTK3402A_EFM32PG kit. The user can use a terminal emulator program to
connect to the serial port with the default settings of 115200-8-N-1.

The example has been instrumented with code to count the number of clock
cycles spent inside the ecdh api calls, mbedtls_ecdh_gen_public and
mbedtls_ecdh_compute_shared. The results are printed to stdout, i.e.
the VCOM serial port console.

To check the performance gain of CRYPTO acceleration, the user
can switch off CRYPTO hardware acceleration by compiling with
-DNO_CRYPTO_ACCELERATION in the compiler command line.

The user can change the specific ECC curve used in the example
by modifying the MBEDTLS_ECC_ID macro definition. Available curves with
CRYPTO acceleration support are:
MBEDTLS_ECP_DP_SECP256R1
MBEDTLS_ECP_DP_SECP224R1
MBEDTLS_ECP_DP_SECP192R1

Board:  Silicon Labs SLSTK3402A Starter Kit
Device: EFM32PG12B500F1024GL125
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.mbedtls_ecdsa" label="SLSTK3402A ecdsa">
    <property key="blurb" value="mbedTLS ECDSA example using the CRYPTO module in the EFM32PG to"/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/mbedtls_ecdsa/bin/ecdsa.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;mbedTLS ECDSA example using the CRYPTO module in the EFM32PG to&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;accelerate the ECDSA API functions of mbedTLS.

This example project uses the EFM32 CMSIS including EMLIB to run
mbedTLS libraries on the EFM32PG.

The example redirects standard I/O to the VCOM virtual serial port of the
SLSTK3402A_EFM32PG kit. The user can use a terminal emulator program to
connect to the serial port with the default settings of 115200-8-N-1.

The example has been instrumented with code to count the number of clock
cycles spent inside the ecdsa api calls, mbedtls_ecdsa_genkey,
mbedtls_ecdsa_write_signature and mbedtls_ecdsa_read_signature.
The results are printed to stdout, i.e. the VCOM serial port console.
To check the performance gain of CRYPTO acceleration, the user
can switch off CRYPTO hardware acceleration by compiling with
-DNO_CRYPTO_ACCELERATION in the compiler command line.

The user can change the specific ECC curve used in the example
by modifying the ECPARAMS macro definition. Available curves with
CRYPTO acceleration support are:
MBEDTLS_ECP_DP_SECP256R1
MBEDTLS_ECP_DP_SECP224R1
MBEDTLS_ECP_DP_SECP192R1

Board:  Silicon Labs SLSTK3402A Starter Kit
Device: EFM32PG12B500F1024GL125
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.micriumos_blink" label="SLSTK3402A micriumos_blink">
    <property key="blurb" value="MicriumOS Blink example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/micriumos_blink/bin/micriumos_blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;MicriumOS Blink example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example shows how to initialize and run MicriumOS on the kit. The 
application will start a single task which is blinking LED 0 at a regular 
interval. This examples is a good starting point for applications that want 
to use MicriumOS.

Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.
SystemView Trace is enabled by default and can be disabled by changing the 
OS_CFG_TRACE_EN configuration inside the os_cfg.h file. SystemView can be used
to inspect the runtime behaviour of this example, it will give a nice overview
of the tasks and interrupts in the application. SystemView can be downloaded 
from https://www.segger.com/systemview.html

Board:  Silicon Labs SLSTK3402A Starter Kit
Device: EFM32PG12B500F1024GL125
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.micriumos_dynamic" label="SLSTK3402A micriumos_dynamic">
    <property key="blurb" value="Micrium OS Dynamic Tick example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/micriumos_dynamic/bin/micriumos_dynamic.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Micrium OS Dynamic Tick example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example shows how to initialize and run MicriumOS on the kit. The 
application will start a single task which is blinking LED 0 at a regular 
interval. This example is using the dynamic tick feature of Micrium OS 
to be able to enter EM2 whenever the application is idle. This examples 
is a good starting point for applications that want to use Micrium OS 
while using EM2.

Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.
SystemView Trace is disabled by default in this example, but can be enabled by 
changing the OS_CFG_TRACE_EN configuration inside the os_cfg.h file. 
SystemView can be used to inspect the runtime behaviour of this example, it 
will give a nice overview of the tasks and interrupts in the application. 
SystemView can be downloaded from https://www.segger.com/systemview.html

Board:  Silicon Labs SLSTK3402A Starter Kit
Device: EFM32PG12B500F1024GL125
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.powertest" label="SLSTK3402A powertest">
    <property key="blurb" value="Power test example, running demonstration of energy modes."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/powertest/bin/powertest.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Power test example, running demonstration of energy modes.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library
to demonstrate the use of the various Energy Modes available on the
EFM32PG12B500F1024GL125. When running this example, the Energy Profiler tool
in Simplicity Studio can be used to show the power consumption of each
energy mode.

Board:  Silicon Labs SLSTK3402A Starter Kit
Device: EFM32PG12B500F1024GL125
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.prs" label="SLSTK3402A prs">
    <property key="blurb" value="PRS example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/prs/bin/prs.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;PRS example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library
to demonstrate the use of the Peripheral Reflex System (PRS) on the 
SLSTK3402A kit. The LETIMER0 toggles LED1 via PRS channel 0 at every 250ms.
Button BTN0 toggles LED0 at every 5th press via PCNT0 and PRS channel 2.
This example operates in EM2.

Board:  Silicon Labs SLSTK3402A Starter Kit
Device: EFM32PG12B500F1024GL125
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.rtx_blink" label="SLSTK3402A rtx_blink">
    <property key="blurb" value="Keil RTX RTOS - Blink example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/rtx_blink/bin/rtx_blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Keil RTX RTOS - Blink example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the Keil RTX RTOS, and gives a basic demonstration of using two tasks to blink the LEDs on the board.
This example is intended as a skeleton for new projects using Keil RTX.

Board:  Silicon Labs SLSTK3402A
Device: EFM32PG12B500F1024GL125
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.spaceinvaders" label="SLSTK3402A spaceinvaders">
    <property key="blurb" value="Space Invaders game using the Memory LCD on the SLSTK3402A."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/spaceinvaders/bin/spaceinvaders.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Space Invaders game using the Memory LCD on the SLSTK3402A.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the SLSTK3402A Starter Kit.

Game instructions are displayed on the startup screen.
(On kits with slider instead of touch pads, use outermost segments to move tank).

For debug builds the game may run slow because they are not optimized
for speed. The user should build and run the release builds for
optimized performance.

Board:  Silicon Labs SLSTK3402A Starter Kit
Device: EFM32PG12B500F1024GL125
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.tempdrv" label="SLSTK3402A tempdrv">
    <property key="blurb" value="Display temperature range in Energy Mode 3 using SLSTK3402A_EFM32PG board."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/tempdrv/bin/tempdrv.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Display temperature range in Energy Mode 3 using SLSTK3402A_EFM32PG board.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
In this example project temperature is being sampled and the correct
temperature range will be displayed on the LCD.
Following messages will be displayed on the LCD based on the temperature
reading:
  1. Below 0 degC
  2. Above 30 degC
  3. Above 85 degC
  4. Between 0 &amp; 30 degC

The example project uses temperature driver(tmpdrv) to monitor 
temperature and a display module to display the correct 
temperature range on the LCD. tempdrv allows us to specify 
the temperature level and register a callback if 
the temperature increases or decreases from the specified threshold.
Moreover, after displaying the right message on the LCD the board goes
to Energy mode 3 to preserve the power consumption.  

The project uses the EFM32 CMSIS including EMLIB, the board support and 
the package support functions/drivers to demonstrate the use of 
tempdrv and the LCD display.

Board:  Silicon Labs SLSTK3402A_EFM32PG starter kit
Device: EFM32PG12B500F1024GL125
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.textdisplay" label="SLSTK3402A textdisplay">
    <property key="blurb" value="Printf output on Sharp Memory LCD LS013B7DH03."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/textdisplay/bin/textdisplay.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Printf output on Sharp Memory LCD LS013B7DH03.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the EFM32 Pearl Gecko. In this case the
display is used as output from a regular printf in the application, as
an alternative to using LEUART or UART for text output.

The user can customize the behaviour of the DISPLAY driver by changing
configuration macros in displayconfigapp.h.

Board:  Silicon Labs SLSTK3402A Starter Kit
Device: EFM32PG12B500F1024GL125
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.touch" label="SLSTK3402A touch">
    <property key="blurb" value="Capacitive touch example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/touch/bin/touch.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Capacitive touch example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrates the capacitive touch capability
of the SLSTK3402A Starter Kit.

It demonstrates the use of CAPSENSE and DISPLAY drivers.
Pressing T1/T2 touch pads will decrease/increase the counter shown on the LCD.
(On kits with slider instead of touch pads, use outermost segments).

Board:  Silicon Labs SLSTK3402A Starter Kit
Device: EFM32PG12B500F1024GL125
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.vcom" label="SLSTK3402A vcom">
    <property key="blurb" value="VCOM communication example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/vcom/bin/vcom.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;VCOM communication example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB to demonstrates the
use of USART and LEUART communication on the SLSTK3402A Starter Kit 
using the virtual COM port.

Virtual COM port through USB is used in by default this example. Undefine 
&quot;RETARGET_VCOM&quot; in the project to use UART on EXP header pins. For EXP header 
UART communication, serial configuration 115200-8-N-1 is used on EXP pin 1 is GND, 
EXP pin 12 is USART0 Tx and EXP pin 14 is USART0 Rx.

If LEUART mode is configured by defining &quot;RETARGET_LEUART0&quot; as a build option,
terminal configuration is 9600-8-N-1 if &quot;RETARGET_VCOM&quot; is not defined, and
115200-8-N-1 if &quot;RETARGET_VCOM&quot; is defined.

Board:  Silicon Labs SLSTK3402A Starter Kit
Device: EFM32PG12B500F1024GL125
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.weatherstation" label="SLSTK3402A weatherstation">
    <property key="blurb" value="Weatherstation using the Sensor add-on board on the SLSTK3402A."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/weatherstation/bin/weatherstation.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Weatherstation using the Sensor add-on board on the SLSTK3402A.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the SLSTK3402A kit. In addition, it
demonstrates the use of Silicon Labs I2C based sensors on the expansion
board header.

You must have a Silicon Labs Sensor add-on board to make use of this demo.
Once the demo is started, hold your hand over the gesture sensor. Once
the sensor detects your hand the display will become active.

Swipe left and right over the sensor to scroll through temperature, humidity
and UV index. On the temperature screen, you can swipe up or down to change
between Fahrenheit or Celcius.

Board:  Silicon Labs SLSTK3402A Starter Kit and Sensor Add-on board
Device: EFM32PG12B500F1024GL125
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.cslib" label="SLSTK3402A cslib">
    <property key="blurb" value="CSLIB example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/cslib/bin/cslib.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;CSLIB example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the capacitive sensing firmware library to sample
capacitive sensing buttons on the STK.  Real-time sample information, touch
qualification status, and other state variables can be displayed and examined
in the Capacitive Sensing Profiler tool.

Board:  Silicon Labs SLSTK3402A Starter Kit
Device: EFM32PG12B500F1024GL125
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.lcsense" label="SLSTK3402A lcsense">
    <property key="blurb" value="LC sense example using LESENSE."/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/lcsense/bin/lcsense.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;LC sense example using LESENSE.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and demonstrates the use of 
the LESENSE peripheral on the board.

This demo has two modes. To change between them, press BTN0. In 
Single Mode (default) the EFM32 wakes up whenever a metal object is 
passed above the LC sensor in th bottom right hand corner of the STK. 
In 5x Mode, the EFM32 only wakes up every fifth time the metal object 
is passed over the sensor.

The VDAC is set up to drive the LC sensor voltage to half of VDD.
LESENSE is set up to periodically drive the low side of the LC sensor
low for a short time. This makes the LC sensor voltage oscillate
around the VDAC voltage. This oscillation dampens faster if there is
metal close to the sensor.

The ACMP is set up to compare the oscillating LC sensor voltage
against a threshold which is set just above the VDAC voltage. The
output from the ACMP will pulse high whenever the oscillations go
above the threshold voltage. When metal is close to the sensor, the
oscillation dampens faster and there will be fewer pulses on the ACMP
output. Each time after LESENSE drives the LC sensor pin low, it
counts how many pulses it receives from the ACMP and compares this
count against a threshold to determine if there is metal close to the
LC sensor or not.

LESENSE controls both the VDAC and the ACMP and turns these on only
when needed to measure the sensor to save power.

In Single Mode LESENSE is set up to give an interrupt whenever the
ACMP pulse count value is below the counter threshold.

In 5x Mode LESENSE does not wake the EFM32 up, but instead generates a
PRS pulse every time the counter threshold is breached. Each pulse on
this PRS channel will then cause the PCNT to increase its count value
until it reaches it's compare value (5) and wakes up the EFM32.

Board: Silicon Labs SLSTK3402A_EFM32PG12 Starter Kit
Device: EFM32PG12B500F1024GL125
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32pg12.slstk3402a.demo.micriumos_wifi_whiteboard" label="SLSTK3402A micriumos_wifi_whiteboard">
    <property key="blurb" value="Wireless Whiteboard Demo: Micrium OS + WiFi + Graphics LCD"/>
    <property key="partCompatibility" value="mcu.arm.efm32.pg12.*"/>
    <property key="boardCompatibility" value="brd2501a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3402A_EFM32PG12/micriumos_wifi_whiteboard/bin/micriumos_wifi_whiteboard.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Wireless Whiteboard Demo: Micrium OS + WiFi + Graphics LCD&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
In this demo you get to draw something on your smart phone and watch the
drawing being displayed in the board's LCD. 

Hardware Requirements
---------------------

This demo requires the three boards illustrated in the following diagram:

 +---------------------------------------+  +----------------------------+
 | EFM32 Pearl Gecko                     |  | Wireless Expansion Board   |
 | SLSTK3402A                            |--| PCB8016                    |
 | PCB2501                               |--|           +--------------+ |
 |                                       |--|           | Wizard Gecko | |
 |                                       |--|           | WGM110       | |
 |                                       |--|           | PCB4320      | |
 |                                       |--|           |              | |
 |                                       |--|           |              | |
 |                                       |--|           +--------------+ |
 |    SWITCH                             |--|   SWITCH                   |
 |  BAT  [AEM]                           |  |  3V  [5V]                  |
 +---------------------------------------+  +----------------------------+
                                        20-pin
                                       Exp. Hdr.

Configuration
-------------

1. Connect the boards as illustrated in the diagram above.

2. Configure the board switches as illustrated in the previous diagram:

   a. AEM
   b. 5V

3. Enter your WiFi access point's SSID and Password in the file app_wifi_cfg.h

4. Build the project.

Execution
---------

1. Execute the application by launching a debug session and wait for the
   board to connect to the TCP server at demo.silabs.com

   The application will display a series of messages to show you the progress
   as follows:

   a. Connecting to [Your SSID]
   b. Connecting to [demo.silabs.com resolved IP address]
   c. MAC Address: [Your MAC address]

2. Open your favorite browser, go to the web page at http://demo.silabs.com
   and select the Wireless Whiteboard demo for the Pearl Gecko.

3. Enter your board's MAC address in the web page and start drawing.

4. Press the buttons to switch between screens.

Tools
-----

This demo features two development tools; uC/Probe and SystemView.

To learn more about these tools take the following steps:

1. uC/Probe:

   Click the button uC/Probe on the toolbar of Simplicity Studio.

2. SystemView:

   a. Install SystemView from https://www.segger.com/systemview.html
   
   b. Enable kernel tracing by setting OS_CFG_TRACE_EN to DEF_ENABLED
      in os_cfg.h
   
   c. Rebuild the project.
 
   d. Launch a debugging session.
   
   e. Open SystemView and press the F5 key or select Target from the
      Options Menu and click Start Recording.

Board: Silicon Labs SLSTK3402A_EFM32PG12 Starter Kit
Device: EFM32PG12B500F1024GL125
Expansion Board: PCB8016
WiFi Module: Wizard Gecko WGM110 PCB4320
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg11.slstk3701a.demo.blink" label="SLSTK3701A blink">
    <property key="blurb" value="Blink example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <property key="boardCompatibility" value="brd2204a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3701A_EFM32GG11/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 CMSIS and the EMLIB peripheral library to
demonstrate the use of the LED's on the starter kit. This example is intended as
a skeleton for new projects.

Board:  Silicon Labs EFM32GG11_STK3701 Starter Kit
Device: EFM32GG11B820F2048GL192
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg11.slstk3701a.demo.can_board" label="SLSTK3701A can_board">
    <property key="blurb" value="CAN bus example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <property key="boardCompatibility" value="brd2204a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3701A_EFM32GG11/can_board/bin/can_board.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;CAN bus example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use EFM32 EMLIB peripheral library to demonstrate 
the use of CAN bus. This demo requires CAN expansion board ISO-CAN-EXP REV 1.0
This example uses glib example to show the CAN actions on the display. 
GPIO interrupt are implemented in order to make use of the buttons. 
BTN0 is used to send a message using CAN0 and LED0 will be turned on. 
BTN1 is used to send a message using CAN1 and LED1 will be turned on.
On the display number of receptions of the messages and number of
transmissions are shown for each CAN peripherals. As well as the id of the
arrived message and the content. To test this example properly, the kit
needs to be connected with the CAN tranceivers and another CAN devices.
This example is intended as a skeleton for new projects. 

Board: Silicon Labs EFM32GG11_STK3701 Starter Kit

Device: EFM32GG11B820F2048GL192, ISO-CAN-EXP REV 1.0&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg11.slstk3701a.demo.cslib" label="SLSTK3701A cslib">
    <property key="blurb" value="CSLIB example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <property key="boardCompatibility" value="brd2204a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3701A_EFM32GG11/cslib/bin/cslib.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;CSLIB example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the capacitive sensing firmware library to sample
capacitive sensing buttons on the STK.  Real-time sample information, touch
qualification status, and other state variables can be displayed and examined
in the Capacitive Sensing Profiler tool.

Board:  Silicon Labs SLSTK3701A Starter Kit
Device: EFM32GG11B820F2048GL192
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg11.slstk3701a.demo.emode" label="SLSTK3701A emode">
    <property key="blurb" value="Select a single energy mode, and stay there."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <property key="boardCompatibility" value="brd2204a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3701A_EFM32GG11/emode/bin/emode.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Select a single energy mode, and stay there.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFR32 CMSIS and demonstrates the use of
the LCD display, RTCC, GPIO and various Energy Modes (EM).

Use PB1 to cycle through the energy mode tests available.
Press PB0 to start selected test.

Note: The EMU power configuration register can only be written once after a
      power-on reset and may be locked to a different configuration. For the
      emode demo to function properly, a power-on reset may be required to
      configure the DCDC properly.

This demo application has been made to give a quick demo of the
Energy Profiler from Silicon Labs, including EFM32 energy modes.

Board:  Silicon Labs EFM32GG11_STK3701 Starter Kit
Device: EFM32GG11B820F2048GL192
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg11.slstk3701a.demo.glib" label="SLSTK3701A glib">
    <property key="blurb" value="GLIB example using the Sharp Memory LCD on the SLSTK3701A."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <property key="boardCompatibility" value="brd2204a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3701A_EFM32GG11/glib/bin/glib.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;GLIB example using the Sharp Memory LCD on the SLSTK3701A.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the GLIB library and the DISPLAY device driver
together with EFM32 CMSIS including EMLIB and board support package support
functions/drivers to demonstrate driving the 8 color Sharp Memory LCD display on
the SLSTK3701A kit.

Included with the example is also a python script img2rgb3header.py that converts
RGB image files (PNG, BMP, JPG) to 3-bit RGB values stored in a byte array in a C 
header file.

The user can switch trough different GLIB example screens by pushing the BTN0
(forwards) or BTN1 (backwards) buttons.

Board: Silicon Labs SLSTK3701A Starter Kit
Device: EFM32GG11B820F2048GL192
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg11.slstk3701a.demo.helges_demo" label="SLSTK3701A helges_demo">
    <property key="blurb" value="This example project demonstrates a wide range of features of the EFM32GG11 MCU and the SLSTK3701A Starter Kit."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <property key="boardCompatibility" value="brd2204a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3701A_EFM32GG11/helges_demo/bin/helges_demo.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;This example project demonstrates a wide range of features of the EFM32GG11 MCU and the SLSTK3701A Starter Kit.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
Browse different app screens and interact with them using the touch slider.
- swipe the slider left or right to change screen
- some of the app screens will show virtual buttons in the lower left and/or lower
  right corner of the screen. To trigger the buttons, tap the left or right end of
  the slider, respectively. Whenever the phrase &quot;click the ACTION button&quot; is mentioned
  later in this file, it should be understood as tapping the end of the touch slider
  corresponding to the ACTION button label on the lower left or lower right corner of
  the screen.

IMPORTANT: The touch slider is calibrated during startup, ie. when the kit is powered,
reset or recovering from a backup event. To ensure that the calibration is successful
and that the touch slider will work as expected, it is important that the user does not
touch the slider while the calibration is in progress. The calibration process is
completed when data is visible on the display.

The runtime since last reset is shown in the top right corner of the screen of all apps.
   
The available app screens include:
- RGB LED app
  this app lets the user change the color and light intensity of each of the two RGB LEDs
  on the STK3701A. Click the &quot;Settings&quot; button to enter change settings mode. Change the
  value of the highlighted setting by swiping the slider. Click the &quot;Next&quot; button to
  cycle through the available settings. Click the &quot;Exit&quot; button to exit the settings mode.
  
- Si7210 Hall-Effect Sensor app
  This app shows the magnitude and polarity of the magnetic field measured by the Si7210
  hall-effect sensor on the STK3701A.
  
- Si7021 Relative Humidity and Temperature Sensor app
  This app shows the temperature and relative humidity measured by the Si7021 relative
  humidity and temperature sensor on the STK3701A. Click the &quot;C/F&quot; button to toggle
  Centigrade or Fahrenheit scale for the temperature.
  
- Capacitive Touch app
  This app shows the position and force the user is applying to the touch slider, as well
  as the duration of the last touch event. Click &quot;Swipe lock&quot; to prevent changing app
  screen while using the app. Click &quot;Unlock&quot; to allow changing app screen again.
  
- Low Energy Inductive Sense (LC Sense) and True Random Number Generator (TRNG) app
  This app counts the number of times the inductive sense element connected to the
  EFM32GG11's LESENSE peripheral has been triggered. The sensor is triggered when a
  metallic object comes close to the LC Sense inductor. The counter is active even when
  the LC Sense app is not shown on the screen. Click the &quot;Clr Count&quot; button to reset the
  counter.
  
  This app also demonstrates the EFM32GG11's NIST-certified true random number generator
  (TRNG). The TRNG generates a 128-bit random number every time the LC sensor is triggered,
  and this number is used to randomize the RGB LEDs' colors.
  
- Backup Power Domain (BU Power) app
  This app demonstrates the EFM32GG11s ability to use a backup power source when its main
  power source is unavailable. The BU Power app screen displays the following metrics:
  - Voltage of the backup battery on the STK3701A (BUVDD)
  - Graphical display of the BUVDD voltage over the last 90 seconds
  - Charge status
  - Voltage of the main power supply (AVDD)
  - Number of backup power (BU) events encountered
  - Duration of the last BU event
  - Total duration of all BU events
  With a properly charged backup battery, the EFM32GG11 will retain the RGB LED settings
  and the selected app, as well as keep the runtime timer running even when the main power
  supply is removed.
  To charge the battery, click the &quot;Charge On&quot; button. The battery will keep on charging
  even if the user changes to another app. Keep charging until the status reads &quot;BU Ready&quot;.
  Click the &quot;Charge On&quot; button once more to stop charging.
  The user can now disconnect the main power supply for 10-30 minutes, depending on the
  charge level of the backup battery, without losing the app settings. Note, however, that
  to properly recover from a power outage, the user should supply power using the &quot;BAT&quot;
  setting on the power switch, since the STK3701A board controller might issue a device reset
  when re-connecting a power supply using the &quot;AEM&quot; or &quot;USB&quot; settings on the power switch.
  
  If the user desires to discharge the battery, click the &quot;Discharge&quot; button. Allow 30-60
  seconds to fully discharge the battery, depending on the charge level of the battery.
  The BUVDD voltage will read 0.00 Volts when discharging, regardless of the actual
  voltage of the backup battery. Click the &quot;Discharge&quot; button once more to stop the
  discharge process. The user can also click the &quot;Charge On&quot; button when discharging to
  switch directly to recharging the backup battery.

Board:  Silicon Labs SLSTK3701A Starter Kit
Device: EFM32GG11B820F2048GL192
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg11.slstk3701a.demo.micriumos_blink" label="SLSTK3701A micriumos_blink">
    <property key="blurb" value="MicriumOS Blink example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <property key="boardCompatibility" value="brd2204a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_blink/bin/micriumos_blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;MicriumOS Blink example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example shows how to initialize and run MicriumOS on the kit. The 
application will start a single task which is blinking LED 0 at a regular 
interval. This examples is a good starting point for applications that want 
to use MicriumOS.

Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.
SystemView Trace is enabled by default and can be disabled by changing the 
OS_CFG_TRACE_EN configuration inside the os_cfg.h file. SystemView can be used
to inspect the runtime behaviour of this example, it will give a nice overview
of the tasks and interrupts in the application. SystemView can be downloaded 
from https://www.segger.com/systemview.html

Board:  Silicon Labs SLSTK3701A Starter Kit
Device: EFM32GG11B820F2048GL192
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg11.slstk3701a.demo.micriumos_canopen" label="SLSTK3701A micriumos_canopen">
    <property key="blurb" value="Micrium OS CANopen example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <property key="boardCompatibility" value="brd2204a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_canopen/bin/micriumos_canopen.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Micrium OS CANopen example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example shows how to use the Micrium OS CANopen stack. It uses the
EFM32GG11B starter kit's two CAN peripherals in external loopback mode. 
It requires CAN expansion board ISO-CAN-EXP REV 1.0 or REV 2.0. This example 
will, upon the user pressing either push buttons (BTN0, BTN1), update one entry 
in the CANopen object dictionary of node 1 on the 'can0' bus with a predefined 
value for each button. Upon changing the value, a PDO message will be
triggered, which will be caught by node 2 on the 'can1' bus. Node 2 will
in turn update its object dictionary with the received value. The value of
the object of both nodes is continuously displayed on the LCD.

Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.
SystemView Trace is enabled by default and can be disabled by changing the 
OS_CFG_TRACE_EN configuration inside the os_cfg.h file. SystemView can be used
to inspect the runtime behaviour of this example, it will give a nice overview
of the tasks and interrupts in the application. SystemView can be downloaded 
from https://www.segger.com/systemview.html

Board:  Silicon Labs SLSTK3701A_EFM32GG11 Starter Kit
Device: EFM32GG11B820F2048GL192
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg11.slstk3701a.demo.micriumos_net" label="SLSTK3701A micriumos_net">
    <property key="blurb" value="MicriumOS Network example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <property key="boardCompatibility" value="brd2204a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_net/bin/micriumos_net.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;MicriumOS Network example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example shows how to use the MicriumOS network stack with the ETH 
peripheral on the EFM32GG11B starter kit. This example will initialize 
the RMII interface to the external PHY and setup a 100 Mbit connection.

The example will output messages on the VCOM port and it will show status 
on the memory lcd display on the kit. The display will show the current 
link status along with the current IPv4 address and the currently 
configured IPv6 addresses.

Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.
SystemView Trace is enabled by default and can be disabled by changing the 
OS_CFG_TRACE_EN configuration inside the os_cfg.h file. SystemView can be used
to inspect the runtime behaviour of this example, it will give a nice overview
of the tasks and interrupts in the application. SystemView can be downloaded 
from https://www.segger.com/systemview.html

Board:  Silicon Labs SLSTK3701A_EFM32GG11 Starter Kit
Device: EFM32GG11B820F2048GL192
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg11.slstk3701a.demo.micriumos_shell" label="SLSTK3701A micriumos_shell">
    <property key="blurb" value="Micrium OS Shell example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <property key="boardCompatibility" value="brd2204a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_shell/bin/micriumos_shell.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Micrium OS Shell example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example shows how to use Micrium OS Shell. The application will use 
the virtual com port on the kit (VCOM) for input and output. Input 
is parsed and executed by Micrium OS Shell. The commands are implemented
inside the cmd_*.c file in the example.

These are the available commands

  help          Prints available commands and usage help.

  init          Various initialization
    -chip       Init of chip, energy mode, dcdc, etc.
    -hfrco FREQ Set HFRCO as core clock and set frequency to FREQ
    -hfxo       Set HFXO as core clock    
    -help       Print init command help text

  selftest      Checks interrupt vector table against memory bounds.
    -help       Print sefltest command help text

  sleep         This command is used to enter various energy modes
    -em MODE    Enter the energy mode specified by MODE. Supported modes 
                are 1, 2, 3, 4H and 4S
    -s N        Wake-up after N seconds
    -help       Print sleep command help text

Example usage

Connect the board and flash it with this program.
Start a VCOM serial terminal connected to the board.
When presented with a prompt, type 'init -chip'.
Now you can run commands such as 'sleep -em 2 -s 3'.

Board:  Silicon Labs SLSTK3701A Starter Kit
Device: EFM32GG11B820F2048GL192
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg11.slstk3701a.demo.micriumos_usbdhidmouse" label="SLSTK3701A micriumos_usbdhidmouse">
    <property key="blurb" value="Micrium OS USB device HID mouse example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <property key="boardCompatibility" value="brd2204a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_usbdhidmouse/bin/micriumos_usbdhidmouse.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Micrium OS USB device HID mouse example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example shows how to use the Micrium OS USB device stack with the
USB peripheral on the EFM32GG11B starter kit. This example will emulate
the behavior of a USB mouse and move the mouse pointer up-left and
down-right periodically when connected to a PC.

The output from the example application can be found by connecting a 
terminal to the VCOM port.

Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.
SystemView Trace is enabled by default and can be disabled by changing the 
OS_CFG_TRACE_EN configuration inside the os_cfg.h file. SystemView can be used
to inspect the runtime behavior of this example, it will give a nice overview
of the tasks and interrupts in the application. SystemView can be downloaded 
from https://www.segger.com/systemview.html

Board:  Silicon Labs SLSTK3701A_EFM32GG11 Starter Kit
Device: EFM32GG11B820F2048GL192
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg11.slstk3701a.demo.micriumos_usbhmsc" label="SLSTK3701A micriumos_usbhmsc">
    <property key="blurb" value="MicriumOS USB host MSC example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <property key="boardCompatibility" value="brd2204a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_usbhmsc/bin/micriumos_usbhmsc.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;MicriumOS USB host MSC example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example shows how to use the MicriumOS USB host stack with the
USB controller on the EFM32GG11B starter kit. This example will detect
a connected USB memory and print some information about the decive.

The output from the example application can be found by connecting a 
terminal to the VCOM port.

Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.
SystemView Trace is enabled by default and can be disabled by changing the 
OS_CFG_TRACE_EN configuration inside the os_cfg.h file. SystemView can be used
to inspect the runtime behaviour of this example, it will give a nice overview
of the tasks and interrupts in the application. SystemView can be downloaded 
from https://www.segger.com/systemview.html

Board:  Silicon Labs SLSTK3701A_EFM32GG11 Starter Kit
Device: EFM32GG11B820F2048GL192
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg11.slstk3701a.demo.micriumos_webmic" label="SLSTK3701A micriumos_webmic">
    <property key="blurb" value="Example usage of microphones and MicriumOS HTTP server"/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <property key="boardCompatibility" value="brd2204a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_webmic/bin/micriumos_webmic.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Example usage of microphones and MicriumOS HTTP server&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example shows how to sample data from the microphone and also how to
stream that data on a web server using uC/HTTPs.

The audio is sampled from on-kit microphones by using LDMA.
Sampling and encoding is performed in the main os task.
Configuration can be found in common_declarations.h and config.h.
For info on encoding, see IETFs and xiphs rfc6716, rfc7845 and rfc3533.

The encoded data is then streamed through a simple no-file-system HTTP server.
Transmission of data packets is handled by an HTTP server task by means
of unicast and chunked transfer encoding.
To listen to the audio: connect the board via ethernet, wait for the IP to be
shown on the display and type that IP into any browser capable of
streaming opus.
Because of real-time constraints, there's an upper limit of 5 clients.

Micrium OS Support SEGGER SystemView to view the runtime behavior or a system.
SystemView Trace is enabled by default and can be disabled by changing the 
OS_CFG_TRACE_EN configuration inside the os_cfg.h file. SystemView can be used
to inspect the runtime behaviour of this example, it will give a nice overview
of the tasks and interrupts in the application. SystemView can be downloaded 
from https://www.segger.com/systemview.html

Board:  Silicon Labs SLSTK3701A_EFM32GG11 Starter Kit
Device: EFM32GG11B820F2048GL192
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg11.slstk3701a.demo.micriumos_wifi_whiteboard" label="SLSTK3701A micriumos_wifi_whiteboard">
    <property key="blurb" value="Wireless Whiteboard Demo: Micrium OS + WiFi + Graphics LCD"/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <property key="boardCompatibility" value="brd2204a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3701A_EFM32GG11/micriumos_wifi_whiteboard/bin/micriumos_wifi_whiteboard.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Wireless Whiteboard Demo: Micrium OS + WiFi + Graphics LCD&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
In this demo you get to draw something on your smart phone and watch the
drawing being displayed in the board's LCD. 

Hardware Requirements
---------------------

This demo requires the three boards illustrated in the following diagram:

 +---------------------------------------+  +----------------------------+
 | EFM32 Giant Gecko                     |  | Wireless Expansion Board   |
 | SLSTK3701A                            |--| PCB8016                    |
 | BRD2204A                              |--|           +--------------+ |
 |                                       |--|           | Wizard Gecko | |
 |                                       |--|           | WGM110       | |
 |                                       |--|           | PCB4320      | |
 |                                       |--|           |              | |
 |                                       |--|           |              | |
 |                                       |--|           +--------------+ |
 |    SWITCH                             |--|   SWITCH                   |
 |  BAT  [AEM]                           |  |  3V  [5V]                  |
 +---------------------------------------+  +----------------------------+
                                        20-pin
                                       Exp. Hdr.

Configuration
-------------

1. Connect the boards as illustrated in the diagram above.

2. Configure the board switches as illustrated in the previous diagram:

   a. AEM
   b. 5V

3. Enter your WiFi access point's SSID and Password in the file app_wifi_cfg.h

4. Build the project.

Execution
---------

1. Execute the application by launching a debug session and wait for the
   board to connect to the TCP server at demo.silabs.com

   The application will display a series of messages to show you the progress
   as follows:

   a. Connecting to [Your SSID]
   b. Connecting to [demo.silabs.com resolved IP address]
   c. MAC Address: [Your MAC address]

2. Open your favorite browser, go to the web page at http://demo.silabs.com
   and select the Wireless Whiteboard demo for the Giant Gecko.

3. Enter your board's MAC address in the web page and start drawing.

4. Press the buttons to switch between screens.

Tools
-----

This demo features two development tools; uC/Probe and SystemView.

To learn more about these tools take the following steps:

1. uC/Probe:

   Click the button uC/Probe on the toolbar of Simplicity Studio.

2. SystemView:

   a. Install SystemView from https://www.segger.com/systemview.html
   
   b. Enable kernel tracing by setting OS_CFG_TRACE_EN to DEF_ENABLED
      in os_cfg.h
   
   c. Rebuild the project.
 
   d. Launch a debugging session.
   
   e. Open SystemView and press the F5 key or select Target from the
      Options Menu and click Start Recording.

Board: Silicon Labs SLSTK3701A_EFM32GG11 Starter Kit
Device: EFM32GG11B820F2048GL192
Expansion Board: PCB8016
WiFi Module: Wizard Gecko WGM110 PCB4320
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg11.slstk3701a.demo.persistent_trng" label="SLSTK3701A persistent_trng">
    <property key="blurb" value="This project demonstrates use of NVM3 and mbedTLS Random Number Generator."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <property key="boardCompatibility" value="brd2204a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3701A_EFM32GG11/persistent_trng/bin/persistent_trng.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;This project demonstrates use of NVM3 and mbedTLS Random Number Generator.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the mbedTLS Random Number Generator API (TRNG accelerated)
to generate random object data stored in NVM3. The random data is read back from NVM3
and displayed every 2 sec. Use the AEM/BAT switch or reset button on the STK to
interrupt the application. The application should boot up and display the most recent and
successfully stored data from NVM3. Both LEDs will be set to on if an error is detected.

Board:  Silicon Labs SLSTK3701A Starter Kit
Device: EFM32GG11B820F2048GL192
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg11.slstk3701a.demo.spectrum_analyzer" label="SLSTK3701A spectrum_analyzer">
    <property key="blurb" value="Spectrum Analyzer Example"/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <property key="boardCompatibility" value="brd2204a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3701A_EFM32GG11/spectrum_analyzer/bin/spectrum_analyzer.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Spectrum Analyzer Example&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example demonstrates a real-time audio spectrum analyzer with a
waterfall spectrogram display. The example uses the STK's color LCD to display
frequency data obtained from either the ADC (connected to Pin PB11/Expansion
Header Pin 11) or the microphones present on the STK. Cortex-M4 and 
CMSIS DSP_Lib capabilities are demonstrated in this example.

The example will display the frequency content of any time varying signal
present at the input source. The top portion of the screen displays the most
recently calculated frequency response (around 15 milliseconds of time domain
data), and the bottom portion displays a waterfall spectrogram that provides
a running history of color-coded past frequency responses. The scale at the
top right of the screen shows how the color corresponds to magnitude. Each 
pixel width on the display corresponds to a 66Hz wide frequency bin.

The ADC input mode uses a 5V reference voltage, so the ideal range input would
be a +/-2.5V signal with a +2.5V DC offset. 

Also note that the sampling frequency is 34133 Hz, and content at frequencies
greater than ~17Khz will be aliased.

Board:  Silicon Labs SLSTK3701A Starter Kit
Device: EFM32GG11B820F2048GL192
Pin PB11 (Expansion Header Pin 11) - ADC0 input&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg11.slstk3701a.demo.textdisplay" label="SLSTK3701A textdisplay">
    <property key="blurb" value="Printf output on Sharp Memory LCD LS013B7DH06."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <property key="boardCompatibility" value="brd2204a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3701A_EFM32GG11/textdisplay/bin/textdisplay.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Printf output on Sharp Memory LCD LS013B7DH06.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the EFM32 Giant Gecko 11B. In this case the
display is used as output from a regular printf in the application, as
an alternative to using LEUART or UART for text output.

The user can customize the behaviour of the DISPLAY driver by changing
configuration macros in displayconfigapp.h.

Board:  Silicon Labs SLSTK3701A Starter Kit
Device: EFM32GG11B810F2048
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg11.slstk3701a.demo.usbdhidkbd" label="SLSTK3701A usbdhidkbd">
    <property key="blurb" value="USB HID keyboard example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <property key="boardCompatibility" value="brd2204a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3701A_EFM32GG11/usbdhidkbd/bin/usbdhidkbd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB HID keyboard example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
and implements an USB HID class keyboard device (one button !).

PB0 is the keyboard button. Pressing this button will succesively write
&quot;Silicon Labs - &quot;.
The RGB color of LED1 will reflect keyboard Num, Caps and Scroll lock status.

Board:  Silicon Labs SLSTK3701A Starter Kit
Device: EFM32GG11B820F2048GL192
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg11.slstk3701a.demo.usbdvud" label="SLSTK3701A usbdvud">
    <property key="blurb" value="USB Vendor Unique Device example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <property key="boardCompatibility" value="brd2204a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3701A_EFM32GG11/usbdvud/bin/usbdvud.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Vendor Unique Device example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use the EFM32 USB Device protocol stack
and implements an USB Vendor Unique Device.

The example will toggle inidividual the LED's of the RGB leds when receiving
vendor unique class setup commands.

This example is intended to be used together with the &quot;libusb&quot; device driver,
and host application EFM32-LedApp.exe (a Windows application). Both libusb and
the application executable (including source code) are in the example &quot;host&quot;
folder.

The first time the USB device is connected to the host, you must tell the host
OS to install the &quot;libusb&quot; device driver.

On Windows, you can follow this procedure:
Insert the device, and manually direct Windows to look for drivers in the
directory where you have your copy of the &quot;EFM32_Vendor_Unique_Device.inf&quot; file.
This can be done with the new device &quot;Wizard&quot; which might pop up after device
insertion, or you can open &quot;Device Manager&quot;, left click on the new device and
select &quot;Update Driver Software...&quot;.

Some versions of Windows wont allow you to install unsigned drivers. If you
suspect this, reboot the PC into &quot;Disable Driver Signature Enforcement&quot; mode.
Win7:
Repeatedly push F8 during boot until the boot menu appears.
Select the &quot;Disable Driver Signature Enforcement&quot; option.
Win10:
Start Menu-&gt;Power button-&gt;Hold Shift key down and select Restart.
When computer has restarted into the options menu, select:
Troubleshoot-&gt;Advanced Option-&gt;Startup Settings-&gt;Restart-&gt;Disable driver signature enforcement
You should now be able to install an unsigned driver.

After libusb is installed, start EFM32-LedApp.exe.

This example will output some info on the VCOM serial port.

Board:  Silicon Labs SLSTK3701A Starter Kit
Device: EFM32GG11B820F2048GL192
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg11.slstk3701a.demo.usbhenum" label="SLSTK3701A usbhenum">
    <property key="blurb" value="USB device enumerator example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <property key="boardCompatibility" value="brd2204a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3701A_EFM32GG11/usbhenum/bin/usbhenum.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB device enumerator example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the USB host stack to implement
a simple device enumerator.

Connect a terminal to VCOM and then connect any USB device to the USB port of
the kit.

Info about the VID/PID and some string descriptors will be output on
the serial port. The connected USB device will not be configured.

Note that USB disk drives may fail, as some of them draw too much current
when attached.

Board:  Silicon Labs SLSTK3701A Starter Kit
Device: EFM32GG11B820F2048GL192
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg11.slstk3701a.demo.usbhhidkbd" label="SLSTK3701A usbhhidkbd">
    <property key="blurb" value="USB Host HID keyboard example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <property key="boardCompatibility" value="brd2204a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3701A_EFM32GG11/usbhhidkbd/bin/usbhhidkbd.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Host HID keyboard example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the USB host stack to implement
support for USB HID Keyboards.

Connect a terminal to VCOM and then connect a USB keyboard to the USB port of
the kit.

The example will flash keyboard leds (numlock, scrollock and capslock)
with a binary counting pattern.

Keyboard entry will be echoed on the VCOM port.

Board:  Silicon Labs SLSTK3701A Starter Kit
Device: EFM32GG11B820F2048GL192
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg11.slstk3701a.demo.usbhmsdfatcon" label="SLSTK3701A usbhmsdfatcon">
    <property key="blurb" value="USB Host mass storage device example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <property key="boardCompatibility" value="brd2204a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3701A_EFM32GG11/usbhmsdfatcon/bin/usbhmsdfatcon.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;USB Host mass storage device example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the USB host and the MSD modules in the
drivers directory to implement support for Mass Storage Device's (MSD).

Connect a terminal to VCOM and then connect a memory stick the USB port of the
kit.

Info about the MSD device will be output on the VCOM port. When a MSD device is
connected and detected as a valid, you can issue commands at the VCOM console to
list all files on the device (ls), type the content of a file (cat) and append
text to a file (echo).

Note that USB disk drives may fail, as some of them draw too much current
when attached.

NOTE:
This example is too large to be built with IDEs with 32KB size limits.

Board:  Silicon Labs SLSTK3701A Starter Kit
Device: EFM32GG11B820F2048GL192
&lt;/pre&gt;</description>
  </demo>
  <demo name="efm32gg11.slstk3701a.demo.vcom" label="SLSTK3701A vcom">
    <property key="blurb" value="VCOM communication example."/>
    <property key="partCompatibility" value="mcu.arm.efm32.gg11.*"/>
    <property key="boardCompatibility" value="brd2204a"/>
    <property key="imageFile" value="../app/mcu_example/SLSTK3701A_EFM32GG11/vcom/bin/vcom.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;VCOM communication example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS and EMLIB to demonstrates the
use of USART and LEUART communication on the SLSTK3701A Starter Kit 
using the virtual COM port.

Virtual COM port through USB is used in by default this example. Undefine 
&quot;RETARGET_VCOM&quot; in the project to use UART on EXP header pins. For EXP header 
UART communication, serial configuration 115200-8-N-1 is used on EXP pin 1 is GND, 
EXP pin 12 is USART0 Tx and EXP pin 14 is USART0 Rx.

If LEUART mode is configured by defining &quot;RETARGET_LEUART0&quot; as a build option,
terminal configuration is 9600-8-N-1 if &quot;RETARGET_VCOM&quot; is not defined, and
115200-8-N-1 if &quot;RETARGET_VCOM&quot; is defined.

Board:  Silicon Labs SLSTK3701A Starter Kit
Device: EFM32GG11B820F2048GL192
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6240a.demo.ezradio_direct_rx" label="SLWSTK6240A ezradio_direct_rx">
    <property key="blurb" value="EZRadio Direct Rx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <property key="boardCompatibility" value="brd4546a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_direct_rx/bin/ezradio_direct_rx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use this example together with the Direct Tx example
running on an other node, so the link functionality can be tested.

The user can start direct reception by pressing the PB0 button. 
Ceasing direct reception can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6240A_EZR32HG Development Kit
Device: EZR32HG320F64R68
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6240a.demo.ezradio_direct_tx" label="SLWSTK6240A ezradio_direct_tx">
    <property key="blurb" value="EZRadio Direct Tx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <property key="boardCompatibility" value="brd4546a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_direct_tx/bin/ezradio_direct_tx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use this example together with the Direct Rx example
running on an other node, so the link functionality can be tested.

The user can start direct transmission by pressing the PB0 button. 
Ceasing direct transmission can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6240A_EZR32HG Development Kit
Device: EZR32HG320F64R68
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6240a.demo.ezradio_pn9" label="SLWSTK6240A ezradio_pn9">
    <property key="blurb" value="EZRadio PN9 transmission example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <property key="boardCompatibility" value="brd4546a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_pn9/bin/ezradio_pn9.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

The user can start PN9 (pseudorandom binary where N=9) transmission by pressing
the PB0 button. Ceasing the transmission can be issued by pressing the PB0 
button again. 
See the EzRadio documentation for more information on PN9 transmission.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6240A_EZR32HG Development Kit
Device: EZR32HG320F64R68
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6240a.demo.ezradio_simple_trx" label="SLWSTK6240A ezradio_simple_trx">
    <property key="blurb" value="EZRadio simple TRx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <property key="boardCompatibility" value="brd4546a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_simple_trx/bin/ezradio_simple_trx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

The user can send one packet with the radio by pushing the PB0 button. The
data counter in the packet is incremented and shown on the LCD. If the
packet is received by the other device, the received data is shown on its
LCD. If the packet is received with CRC error this is printed as well.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6240A_EZR32HG Development Kit
Device: EZR32HG320F64R68
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6240a.demo.ezradio_trx_ack" label="SLWSTK6240A ezradio_trx_ack">
    <property key="blurb" value="EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <property key="boardCompatibility" value="brd4546a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_trx_ack/bin/ezradio_trx_ack.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt; device.

This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

The user can send one packet with the radio by pushing the PB0 button. The
data counter in the packet is incremented and shown on the LCD. If the
packet is received by the other device, the received data is shown on its
LCD. If the packet is received with CRC error this is printed as well. In case
the data is received properly the receiver automatically sends back an
acknowledge packet. The transmitted and received 'ACK' packet is shown on 
the LCD as well.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6240A_EZR32HG Development Kit
Device: EZR32HG320F64R68
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6240a.demo.ezradio_unmodulated_carrier" label="SLWSTK6240A ezradio_unmodulated_carrier">
    <property key="blurb" value="EZRadio Unmodulated Carrier transmission example using the EZRadio device in"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <property key="boardCompatibility" value="brd4546a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_unmodulated_carrier/bin/ezradio_unmodulated_carrier.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;the EZR32 device.

This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

The user can start CW transmission by pressing the PB0 button. 
Ceasing the transmission can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6240A_EZR32HG Development Kit
Device: EZR32HG320F64R68
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6240a.demo.blink" label="SLWSTK6240A blink">
    <property key="blurb" value="Blink example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <property key="boardCompatibility" value="brd4546a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6240A_EZR32HG/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use CMSIS and the EMLIB peripheral library to
demonstrate the use of the LED's on the starter kit. This example is intended as
a skeleton for new projects.

Board:  Silicon Labs SLWSTK6240A_EZR32HG Starter Kit
Device: EZR32HG320F64R61
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6240a.demo.clock" label="SLWSTK6240A clock">
    <property key="blurb" value="Analog and digital clock example using the Memory LCD on the SLWSTK6240A_EZR32HG."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <property key="boardCompatibility" value="brd4546a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6240A_EZR32HG/clock/bin/clock.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6240A_EZR32HG.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EFM32 CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the SLWSTK6240A_EZR32HG kit.

The user can switch between analog and digital clock modes by pushing
the PB0 button.

The user can increment the second count by pushing the PB1 button.
The minute count can be incremented by pushing the PB1 button for more
than 2 seconds.

The analog clock mode demonstrates the use of GLIB to draw hour, minute
and second pointers on the background which is a bitmap in flash memory.

The digital clock demonstrates the 16x20 font (including number characters
only) of the textdisplay driver.

Board:  Silicon Labs SLWSTK6240A_EZR32HG Starter Kit
Device: EZR32HG320F64R61
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6240a.demo.ezradio_per" label="SLWSTK6240A ezradio_per">
    <property key="blurb" value="EZRadio packet error rate (PER) example using the EZRadio device in the EZR32HG"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <property key="boardCompatibility" value="brd4546a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6240A_EZR32HG/ezradio_per/bin/ezradio_per.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio packet error rate (PER) example using the EZRadio device in the EZR32HG&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt; device.

This example project uses the EZR32HG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

This example bases on the standard TRx with auto acknowledge example. It is 
advised to study the original application first.
All the original functionalities can be turned on, however, the main purpose
of this example is to show how to implement transmission packet error rate (PER) 
and RSSI measurements in an application. The user can send either one (PB0) 
or multiple packets (PB1) with the transmitter node and study the PER and RSSI
values on the receiver node.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6240A_EZR32HG Development Kit
Device: EZR32HG320F64R68
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6240a.demo.humitemp" label="SLWSTK6240A humitemp">
    <property key="blurb" value="Humidity and temperature demo using the on-board si7021 sensor on the"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <property key="boardCompatibility" value="brd4546a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6240A_EZR32HG/humitemp/bin/humitemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;SLWSTK6240A_EZR32HG board.

This example project uses CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the
SLWSTK6240A_EZR32HG board.

Board:  Silicon Labs SLWSTK6240A_EZR32HG Starter Kit
Device: EZR32HG320F64R61
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32hg.slwstk6240a.demo.rs232" label="SLWSTK6240A rs232">
    <property key="blurb" value="VCOM/USART/LEUART RS232 output example."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.hg.*"/>
    <property key="boardCompatibility" value="brd4546a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6240A_EZR32HG/rs232/bin/rs232.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses CMSIS and EMLIB, to demonstrates the
use of LEUART, USART or VCOM  communication on the SLWSTK6240A_EZR32HG
wireless starter kit.

Serial port selection is done by defining any one of compiletime macros:
#define RETARGET_LEUART0
#define RETARGET_USART0
#define RETARGET_VCOM       (default)

If a USART is used set terminal configuration to 115200-8-N-1.
If the LEUART is used set terminal configuration to 9600-8-N-1.
For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.

Board:  Silicon Labs SLWSTK6240A_EZR32HG Starter Kit
Device: EZR32HG320F64R61
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6200a.demo.blink" label="SLWSTK6200A blink">
    <property key="blurb" value="Blink example. Template for new projects."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <property key="boardCompatibility" value="brd4502a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6200A_EZR32LG/blink/bin/blink.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Blink example. Template for new projects.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project use CMSIS and the EMLIB peripheral library to
demonstrate the use of the LED's on the starter kit. This example is intended as
a skeleton for new projects.

Board:  Silicon Labs SLWSTK6200A_EZR32LG Starter Kit
Device: EZR32LG330F256R60
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6200a.demo.clock" label="SLWSTK6200A clock">
    <property key="blurb" value="Analog and digital clock example using the Memory LCD on the SLWSTK6200A_EZR32LG."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <property key="boardCompatibility" value="brd4502a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6200A_EZR32LG/clock/bin/clock.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Analog and digital clock example using the Memory LCD on the SLWSTK6200A_EZR32LG.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display on the SLWSTK6200A_EZR32LG kit.

The user can switch between analog and digital clock modes by pushing
the PB0 button.

The user can increment the minute count by pushing the PB1 button.
The minute count can be incremented by pushing the PB1 button for more
than 0.5 seconds.

The analog clock mode demonstrates the use of GLIB to draw hour, minute
and second pointers on the background which is a bitmap in flash memory.

The digital clock demonstrates the 16x20 font (including number characters
only) of the textdisplay driver.

Board:  Silicon Labs SLWSTK6200A_EZR32LG Development Kit
Device: EZR32LG330F256R60
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6200a.demo.ezradio_direct_rx" label="SLWSTK6200A ezradio_direct_rx">
    <property key="blurb" value="EZRadio Direct Rx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <property key="boardCompatibility" value="brd4502a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6200A_EZR32LG/ezradio_direct_rx/bin/ezradio_direct_rx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Direct Rx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use this example together with the Direct Tx example
running on an other node, so the link functionality can be tested.

The user can start direct reception by pressing the PB0 button. 
Ceasing direct reception can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6200A_EZR32LG Development Kit
Device: EZR32LG330F256R60
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6200a.demo.ezradio_direct_tx" label="SLWSTK6200A ezradio_direct_tx">
    <property key="blurb" value="EZRadio Direct Tx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <property key="boardCompatibility" value="brd4502a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6200A_EZR32LG/ezradio_direct_tx/bin/ezradio_direct_tx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Direct Tx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use this example together with the Direct Rx example
running on an other node, so the link functionality can be tested.

The user can start direct transmission by pressing the PB0 button. 
Ceasing direct transmission can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6200A_EZR32LG Development Kit
Device: EZR32LG330F256R60
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6200a.demo.ezradio_pn9" label="SLWSTK6200A ezradio_pn9">
    <property key="blurb" value="EZRadio PN9 transmission example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <property key="boardCompatibility" value="brd4502a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6200A_EZR32LG/ezradio_pn9/bin/ezradio_pn9.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio PN9 transmission example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

The user can start PN9 (pseudorandom binary where N=9) transmission by pressing
the PB0 button. Ceasing the transmission can be issued by pressing the PB0 
button again. 
See the EzRadio documentation for more information on PN9 transmission.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6200A_EZR32LG Development Kit
Device: EZR32LG330F256R60
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6200a.demo.ezradio_simple_trx" label="SLWSTK6200A ezradio_simple_trx">
    <property key="blurb" value="EZRadio simple TRx example using the EZRadio device in the EZR32 device."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <property key="boardCompatibility" value="brd4502a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6200A_EZR32LG/ezradio_simple_trx/bin/ezradio_simple_trx.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio simple TRx example using the EZRadio device in the EZR32 device.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

The user can send one packet with the radio by pushing the PB0 button. The
data counter in the packet is incremented and shown on the LCD. If the
packet is received by the other device, the received data is shown on its
LCD. If the packet is received with CRC error this is printed as well.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6200A_EZR32LG Development Kit
Device: EZR32LG330F256R60
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6200a.demo.ezradio_trx_ack" label="SLWSTK6200A ezradio_trx_ack">
    <property key="blurb" value="EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <property key="boardCompatibility" value="brd4502a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6200A_EZR32LG/ezradio_trx_ack/bin/ezradio_trx_ack.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio TRx with auto acknowledge example using the EZRadio device in the EZR32&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt; device.

This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

It is advised to use two boards with same configuration and firmware, so
both packet transmission and reception functionality can be tested.

The user can send one packet with the radio by pushing the PB0 button. The
data counter in the packet is incremented and shown on the LCD. If the
packet is received by the other device, the received data is shown on its
LCD. If the packet is received with CRC error this is printed as well. In case
the data is received properly the receiver automatically sends back an
acknowledge packet. The transmitted and received 'ACK' packet is shown on 
the LCD as well.

The user can send specified or unlimited number of packets by pushing PB1.
The user can cease the transmission by pushing PB1 again.
The number of transmitted packets is configurable.

The application implements Packet Trace functionality, that means that the
user can observe transmitted and received packets with the Network Analyzer Tool
of Simplicity studio using the built-in default radio configuration header files.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6200A_EZR32LG Development Kit
Device: EZR32LG330F256R60
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6200a.demo.ezradio_unmodulated_carrier" label="SLWSTK6200A ezradio_unmodulated_carrier">
    <property key="blurb" value="EZRadio Unmodulated Carrier transmission example using the EZRadio device in"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <property key="boardCompatibility" value="brd4502a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6200A_EZR32LG/ezradio_unmodulated_carrier/bin/ezradio_unmodulated_carrier.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;EZRadio Unmodulated Carrier transmission example using the EZRadio device in&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;the EZR32 device.

This example project uses the EZR32LG CMSIS including EMLIB, emdrv and the
board support package support functions/drivers to demonstrate driving
the EZRadio or EZRadioPRO device in the EZR32 device.

The user can start CW transmission by pressing the PB0 button. 
Ceasing the transmission can be issued by pressing the PB0 button again.

The sample app is able to consume radio configuration header files generated
with either Simplicity Studio or Wireless Development Suite. The generated
configuration is consumed automatically in Simplicity Studio. In order to use
the generated header file instead of the default one with other toolchains enable
RADIO_USE_GENERATED_CONFIGURATION in ezradio_plugin_manager.h.

For more information please refer to the Quick Start Guide of the application.

Board:  Silicon Labs SLWSTK6200A_EZR32LG Development Kit
Device: EZR32LG330F256R60
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6200a.demo.humitemp" label="SLWSTK6200A humitemp">
    <property key="blurb" value="Humidity and temperature demo using the on-board si7021 sensor on the"/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <property key="boardCompatibility" value="brd4502a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6200A_EZR32LG/humitemp/bin/humitemp.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Humidity and temperature demo using the on-board si7021 sensor on the&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;SLWSTK6200A_EZR32LG board.

This example project uses CMSIS including EMLIB and the
board support package support functions/drivers to demonstrate driving
the Sharp Memory LCD display and the si7021 humidity and temperature sensor on the
SLWSTK6200A_EZR32LG board.

Board:  Silicon Labs SLWSTK6200A_EZR32LG starter kit.
Device: EZR32LG330F256R60
&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6200a.demo.rangeTest" label="SLWSTK6200A rangeTest">
    <property key="blurb" value="Range Test example."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <property key="boardCompatibility" value="brd4502a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6200A_EZR32LG/rangeTest/bin/rangeTest.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;Range Test example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
The Range Test application can be used to evaluate Silicon Laboratories radio
chips including performace, sensitivity or blocking measurements.

Range Test creates a radio link between two evaluation kits and sends 
predefined amount of packets from the transmitter side to the receiver.
The receiver calculates Packet Error Rate (PER) and Moving-Average (MA) of PER
based on the packets received. It also displays the current RSSI level in dBm
units and draws a chart of the RSSI historical data.
For long tests the transmitter can be set up to transmit continuously. It is not
necessary to start both sides synchronously.

*PLEASE NOTE* This example uses the radio extensively and could transmit at high
RF power levels that may result in higher peak current consumption. Due to the
peak current demand this example is not suited to run on a coin cell battery.
If standalone operation is required please consider the use of an external USB
connected battery or other power source.


Board:  Silicon Labs SLWSTK6200A_EZR32LG Starter Kit
Device: EZR32LG330F256R60&lt;/pre&gt;</description>
  </demo>
  <demo name="ezr32lg.slwstk6200a.demo.rs232" label="SLWSTK6200A rs232">
    <property key="blurb" value="VCOM/USART/LEUART RS232 output example."/>
    <property key="partCompatibility" value="mcu.arm.ezr32.lg.*"/>
    <property key="boardCompatibility" value="brd4502a"/>
    <property key="imageFile" value="../app/mcu_example/SLWSTK6200A_EZR32LG/rs232/bin/rs232.bin"/>
    <description>&lt;h1&gt;&lt;b&gt;VCOM/USART/LEUART RS232 output example.&lt;/b&gt;&lt;/h1&gt;
&lt;pre&gt;
This example project uses CMSIS and EMLIB, to demonstrates the
use of LEUART, USART or VCOM  communication on the SLWSTK6200A_EZR32LG
development kit.

Serial port selection is done by defining any one of compiletime macros:
#define RETARGET_LEUART0
#define RETARGET_USART1
#define RETARGET_USART2
#define RETARGET_VCOM       (default)

If a USART is used set terminal configuration to 115200-8-N-1.
If the LEUART is used set terminal configuration to 9600-8-N-1.
For the default VCOM communication mode, serial port settings are &quot;dont care&quot;.

Board:  Silicon Labs SLWSTK6200A_EZR32LG Development Kit
Device: EZR32LG330F256R60
&lt;/pre&gt;</description>
  </demo>
</demos>
