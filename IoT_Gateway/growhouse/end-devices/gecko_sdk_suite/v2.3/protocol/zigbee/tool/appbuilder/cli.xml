<?xml version="1.0"?>
<cli>
  <group id="general" name="General">
    <description>
      General commands that are applicable to the node regardless of clusters or plugins.
    </description>
  </group>
  <group id="zcl-global" name="Global ZCL">
    <description>
      All the ZCL global commands defined in the ZigBee Cluster Library Specification. These command line commands can be used to send messages over the air to, for instance, read and write attributes to devices on the network.
    </description>
  </group>
  <group id="test" name="Test Harness">
    <description>
      All commands related to the testing of a device.
    </description>
  </group>
  <group id="info" name="Informational">
    <description>
      The Informational command set provides commands for displaying information about the device. These commands include things like printing out the attribute tablerr
    </description>
  </group>
  <group id="network" name="Network">
    <description>
      The Network command set provides commands for interacting with the network. This includes building as well as sending ZigBee commands out on to the network.
    </description>
  </group>
  <group id="security" name="Security">
    <description>
      The Security command set includes all of the commands related to security configuration on the device.
    </description>
  </group>
  <group id="build-send-msg" name="Building and Sending Messages">
    <description>
      Commands for building and sending messages out onto the network.
    </description>
  </group>
  <group id="attribute" name="Attribute Management">
    <description>
      Commands related to reading and writing attributes locally on a device.
    </description>
  </group>
  <group id="zdo" name="ZigBee Device Object Commands (ZDO)">
    <description>
      Commands related to the management of a ZigBee device including device discovery and commissioning.
    </description>
  </group>
  <group id="endpoint" name="Endpoint Manipulation">
    <description>
      Commands related to the manipulation of endpoints.
    </description>
  </group>

  <command cli="zcl global read" functionName="zclGlobalReadCommand" group="zcl-global">
    <description>
      Creates a global read command message to read from the cluster and attribute specified
    </description>
    <arg name="cluster" type="INT16U" description="The cluster id of the cluster to read from." />
    <arg name="attributeId" type="INT16U" description="The attribute id of the attribute to read." />
  </command>
  <command cli="zcl global write" functionName="zclGlobalWriteCommand" group="zcl-global">
    <description>
      Creates a global write command message to write to the cluster and attribute specified
    </description>
    <arg name="cluster" type="INT16U" description="The cluster id of the cluster to write to." />
    <arg name="attributeId" type="INT16U" description="The attribute id of the attribute to write." />
    <arg name="type" type="INT32U" description="The type of the attribute to write." />
    <arg name="data" type="OCTET_STRING" description="The data to be written." />
  </command>
  <command cli="zcl global uwrite" functionName="zclGlobalWriteCommand" group="zcl-global">
    <description>
      Creates a global write undivided command message to write to the cluster and attribute specified
    </description>
    <arg name="cluster" type="INT16U" description="The cluster id of the cluster to write to." />
    <arg name="attributeId" type="INT16U" description="The attribute id of the attribute to write." />
    <arg name="type" type="INT8U" description="The type of the attribute to write." />
    <arg name="data" type="OCTET_STRING" description="The data to be written." />
  </command>
  <command cli="zcl global nwrite" functionName="zclGlobalWriteCommand" group="zcl-global">
    <description>
      Creates a global write command message to write to the cluster and attribute specified
    </description>
    <arg name="cluster" type="INT16U" description="The cluster id of the cluster to read from." />
    <arg name="attributeId" type="INT16U" description="The attribute id of the attribute to read." />
    <arg name="type" type="INT8U" description="The type of the attribute to write." />
    <arg name="data" type="OCTET_STRING" description="The data to be written." />
  </command>
  <command cli="zcl global discover" functionName="zclGlobalDiscoverCommand" group="zcl-global">
    <description>
      Creates discovery message for devices with the associated cluster and attribute specified.
    </description>
    <arg name="cluster" type="INT16U" description="The cluster id of the cluster to discover." />
    <arg name="attributeId" type="INT16U" description="The attribute id of the attribute to read during discovery." />
    <arg name="max" type="INT8U" description="Max number of discovery responses." />
  </command>
  <command cli="zcl global report" functionName="zclGlobalReportCommand" group="zcl-global">
    <description />
    <arg name="endpoint" type="INT8U" description="The desired endpoint." />
    <arg name="clusterId" type="INT16U" description="The cluster id." />
    <arg name="attributeId" type="INT16U" description="The attribute id." />
    <arg name="mask" type="INT8U" description="The mask." />
  </command>
  <command cli="zcl global report-read" functionName="zclGlobalReportReadCommand" group="zcl-global">
    <description>
      Creates a global read reporting command for the associated cluster, attribute and server/client direction.
    </description>
    <arg name="cluster" type="INT16U" description="The cluster id to read from." />
    <arg name="attributeId" type="INT16U" description="The attribute id to read from." />
    <arg name="direction" type="INT8U" description="0 for client-to-server, 1 for server-to-client." />
  </command>
  <command cli="zcl global send-me-a-report" functionName="zclGlobalSendMeAReportCommand" group="zcl-global">
    <description>
       Creates a global send me a report command for the associated values.
    </description>
    <arg name="cluster" type="INT16U" description="The cluster id of the requested report." />
    <arg name="attributeId" type="INT16U" description="The attribute id for requested report." />
    <arg name="dataType" type="INT8U" description="The two byte ZigBee type value for the requested report." />
    <arg name="minReportTime" type="INT16U" description="Minimum number of seconds between reports." />
    <arg name="maxReportTime" type="INT16U" description="Maximum number of seconds between reports." />
    <arg name="reportableChange" type="OCTET_STRING" description="Amount of change to trigger a report." />
  </command>
  <command cli="zcl global expect-report-from-me" functionName="zclGlobalExpectReportFromMeCommand" group="zcl-global">
    <description>
      Create a expect-report-from-me message with associated values.
    </description>
    <arg name="cluster" type="INT16U" description="The cluster id for the requested report." />
    <arg name="attributeId" type="INT16U" description="The attribute id for the requested report." />
    <arg name="timeout" type="INT16U" description="Maximum amount of time between reports." />
  </command>
  <command cli="zcl global direction" functionName="zclGlobalDirectionCommand" group="zcl-global">
    <description>
      Sets the direction for global commands, either client to server or server to client.
    </description>
    <arg name="direction" type="INT8U" description="The direction for global commands, 0 = client to server, 1 = server to client." />
  </command>
  <command cli="zcl global disc-com-gen" functionName="zclGlobalCommandDiscoveryCommand" group="zcl-global">
    <description>
	  Create a Discover Commands Generated command with associated values.
    </description>
    <arg name="clusterId" type="INT16U" description="The cluster to find commands on." />
    <arg name="startCommandId" type="INT8U" description="The command id to start the command search on." />
    <arg name="maxCommandId" type="INT8U" description="Max command ids to search for." />
  </command>
  <command cli="zcl global disc-com-rec" functionName="zclGlobalCommandDiscoveryCommand" group="zcl-global">
    <description>
	  Create a Discover Commands Received command with associated values.
    </description>
    <arg name="clusterId" type="INT16U" description="The cluster to find commands on." />
    <arg name="startCommandId" type="INT8U" description="The command id to start the command search on." />
    <arg name="maxCommandId" type="INT8U" description="Max command ids to search for." />
  </command>
  <command cli="zcl test response on" functionName="zclTestResponseOnCommand" group="test">
    <description>
      Sets a flag so that the application framework WILL respond to the next ZCL message that comes in over the air.
    </description>
  </command>
  <command cli="zcl test response off" functionName="zclTestResponseOffCommand" group="test">
    <description>
      Sets a flag so that the application framework WILL NOT respond to the next ZCL message that comes in over the air.
    </description>
  </command>

  <!--
  <command cli="zcl attr-read-frag-response" functionName="attributeReadCausingFragmentedResponseCommand" group="test">
    <description>
      This is a command used for testing that generates an attribute read command which requests so many attributes that the returned response is fragmented.
    </description>
  </command>

  <command cli="test-harness status" functionName="printStatus" group="test">
    <description>
      Prints the current mode of the test harness.
    </description>
  </command>
  <command cli=" test-harness aps-sec-for-clust on" functionName="setApsSecurityForCluster" group="test">
    <description>
      This turns on indication that the specified cluster requires APS security. This does not override the normal rules by the SE profile for security.  It simply supplements the rules with one additional cluster that requires APS security.
    </description>
    <arg name="clusterId" type="INT16U" description="The cluster to be turned on requiring APS security." />
  </command>
  <command cli="test-harness aps-sec-for-clust off" functionName="setApsSecurityForCluster" group="test">
    <description>
      This turns off indication that the specified cluster requires APS security. This does not override the normal rules by the SE profile for security.  It simply supplements the rules with one additional cluster that requires APS security.
    </description>
  </command>
  <command cli="test-harness registration on" functionName="setRegistration" group="test">
    <description>
      Turns on automatic Smart Energy Registration after joining or reboot.  Default is on.
    </description>
  </command>
  <command cli="test-harness registration off" functionName="setRegistration" group="test">
    <description>
      Turns off automatic Smart Energy Registration after joining or reboot.  Default is on.
    </description>
  </command>

  <command cli="test-harness ke normal-mode" functionName="setMode" group="test">
    <description>
      Sets normal mode for key establishment on the test harness, which suppresses any bad behavior and allows normal KE operation.
    </description>
  </command>
  <command cli="test-harness ke no-resources" functionName="setMode" group="test">
    <description>
      The device will send a "Terminate Key Estabilshment Message (No resources)" in response to any attempt to initiate KE with it.  As a client, it will send a Terminate message after receiving the Initiate Key establishment response.
    </description>
  </command>
  <command cli="test-harness ke default-resp" functionName="setMode" group="test">
    <description>
      The device will send a "Default Response (Failure)" in response to any attempt to initiate KE with it.  As a client, it will send a Default Response after receiving the Initiate Key establishment response.
    </description>
  </command>
  <command cli="test-harness out-of-sequence" functionName="setMode" group="test">
    <description>
      This command will send an out-of-sequence message during key establishment. It will look for the local device to send the command with the passed 'ID' and will send a different command ID.  So if the outgoing command is  Initiate KE (ID 0) and the passed ID = 0, then it will send an Ephemeral Data Command (ID 1) instead.
    </description>
    <arg name="commandId" type="INT16U" description="The command id that the test harness is looking for." />
  </command>
  <command cli="test-harness ke timeout" functionName="setMode" group="test">
    <description>
      This command will induce a timeout by dropping the outgoing message instead of sending it.  This will occur for every command, except when the device is a KE client sending the first message.  In that case it will induce a timeout on the second message (ephemeral data request).
    </description>
  </command>
  <command cli="test-harness ke delay-cbke" functionName="setMode" group="test">
    <description>
      This command causes the test harness to introduce artificial delays to the ephemeral key and confirm key generation time.  It will delay generation by 'delay-time-seconds' so it takes longer than normal. Thus the ephemeral data request/response message will be delayed. The 'advertised-delay-seconds' is the amount of time that the local device tells the partner it will take them (in the Initiate KE message). If the delay-time-seconds &lt;= advertised-delay-seconds, then key establishment should complete successfully but just be delayed.  If delay-time-seconds > advertised-delay-seconds then the partner device should timeout the operation as the local device will take longer than expected.  However the local device will still send the ephemeral data message in an attempt to continue key establishment.  It is expected that the partner will reject this attempt and send back a Terminate  message.
    </description>
    <arg name="delayTimeInSeconds" type="INT16U" description="The number of seconds to delay." />
    <arg name="advertisedDelayInSeconds" type="INT16U" description="The advertised delay time in seconds." />
  </command>

  <command cli="test-harness ke cert-mangle length" functionName="setCertMangleType" group="test">
    <description>
      This will modify the initiate key establishment message length by +/- 'signed-length' bytes.
    </description>
    <arg name="signedLength" type="INT8S" description="The number of bytes to add or remove on th einitiate ke message." />
  </command>
  <command cli="test-harness ke cert-mangle issuer" functionName="setCertMangleType" group="test">
    <description>
      This will rewrite the issuer field of the certificate with the 'new-issuer-value' when the initiate key establishment message is sent out.
    </description>
    <arg name="newIssuerValue" type="OCTET_STRING" description="The new issuer value." />
  </command>
  <command cli="test-harness ke cert-mangle subject" functionName="setCertMangleType" group="test">
    <description>
      This will rewrite the subject field (EUI64) of the certificate with the 'new-subject-value' when the initiate key establishment message is sent out.
    </description>
    <arg name="newSubjectValue" type="OCTET_STRING" description="The new subject value." />
  </command>
  <command cli="test-harness ke cert-mangle corrupt" functionName="setCertMangleType" group="test">
    <description>
      This will rewrite the 'index' byte of the certificate field of the initiate key establishment message to corrupt the certificate. It will bit-flip the 'index' byte to change its value.
    </description>
    <arg name="index" type="INT8U" description="The new index byte of the certificate field." />
  </command>
  <command cli="test-harness ke new-key-policy" functionName="setCertMangleType" group="test">
    <description>
      This will change the policy of whether the TC allows new link keys into its table.  Normally all devices are pre-configured in the TC with an install code and so the TC must have prior knowledge of the device in order to allow CBKE with it.  However when running in the SE_TEST security mode the TC uses a global link key and so there is no prior knowledge.
    </description>
    <arg name="policyFlag" type="INT8U" description="New policy bool value." />
  </command>
  <command cli="test-harness price send-new-fields" functionName="setCertMangleType" group="test">
    <description>
      This will tell the price server whether or not it should send publish price commands with the new SE 1.1 fields: Number of Block Threshholds and Price Control.  Defaults to true.
    </description>
    <arg name="sendPublishPriceCmd" type="INT8U" description="New policy bool value for the sending of publish price commands." />
  </command>
  <command cli="test-harness tc-keepalive send" functionName="tcKeepaliveSendCommand" group="test">
    <description>
      This command will cause the device to immediatley send a Trust Center Keepalive message.
    </description>
  </command>
  <command cli="test-harness tc-keepalive stop" functionName="tcKeepaliveStartStopCommand" group="test">
    <description>
      Turn off the keepalive state machine so it does not periodically send keepalive messages.
    </description>
  </command>
  <command cli="test-harness tc-keepalive start" functionName="tcKeepaliveStartStopCommand" group="test">
    <description>
      Turn on the keepalive state machine so starts periodically sending keepalive messages.
    </description>
  </command>
  <command cli="test-harness ota image-mangle" functionName="corruptOtaImageCommand" group="test">
    <description>
      This will mangle the image stored in the OTA Simple Storage RAM Driver. Only available when the OTA Simple Storage RAM driver plugin is enabled. This is really only useful in simulated testing.  For testing on real hardware it is better to use a Linux box with a set of images, one of which is corrupted.
    </description>
  </command>
  <command cli="test-harness key-update unicast" functionName="keyUpdateCommand" group="test">
    <description>
      This command will set the key-update method to use unicast (as opposed to broadcast) to individually update devices with the new NWK key.
    </description>
  </command>
  <command cli="test-harness key-update broadcast" functionName="keyUpdateCommand" group="test">
    <description>
      This command will set the key-update method to use broadcast (as opposed to unicast) to update all devices at the same time with the new NWK key.
    </description>
  </command>
  <command cli="test-harness key-update now" functionName="keyUpdateCommand" group="test">
    <description>
      Start the NWK key update process now.
    </description>
  </command>
  -->
  <command cli="zcl mfg-code" functionName="zclMfgCodeCommand" group="general">
    <description>
      Sets the two byte manufacturer specific identifier to use for the next command if the command is not already built.
    </description>
    <arg name="mfgSpecificId" type="INT16U" description="Manufacturer Specific Id" />
  </command>
  <command cli="zcl x-default-resp" functionName="zclXDefaultRespCommand" group="general">
    <description>
      Sets the Disable Default Response Frame Control bit to use for the next command if the command is not already built.
    </description>
    <arg name="disableDefaultResponse" type="BOOLEAN" description="bool value indicating whether the disable default response bit is set(1) or not (0)." />
  </command>
  <command cli="zcl use-next-sequence" functionName="zclUseNextSequenceCommand" group="general">
    <description>
      Sets the flag to use the incremented sequence number from the framework for the next raw command.
    </description>
    <arg name="useNextSequence" type="BOOLEAN" description="bool value indicating whether raw command will use the incremented seq number from framework, set(1) or not(0)." />
  </command>
  <command cli="zcl time" functionName="zclTimeCommand" group="general">
    <description>
      Cli command to call emberAfSetTime function documented in af.h
    </description>
    <arg name="utcTime" type="INT32U" description="ZigBee UTC time, number of seconds since the year 2000" />
  </command>
  <command cli="zcl identify on" source="server" functionName="zclIdentifyOnOffCommand" group="identify">
    <description>
      Writes the IdentifyTime attribute
    </description>
    <arg name="endpoint" type="INT8U" description="The endpoint on the device which should begin identifying" />
    <arg name="time" type="INT16U" description="The number of seconds to spend identifying" />
  </command>
  <command cli="zcl identify off" source="server" functionName="zclIdentifyOnOffCommand" group="identify">
    <description>
      Writes the IdentifyTime attribute
    </description>
    <arg name="endpoint" type="INT8U" description="The endpoint on which to stop identifying" />
  </command>
  <command cli="zcl drlc lce" source="server" functionName="zclDrlcLoadControlEventCommand" group="demand-response-and-load-control">
    <description>
      Populate a buffer to send a static load control event with the following values:
      all device classes, all uegs, criticality level: normal, 1.1c cooling temp offset,
      1.1c heating temp offset, cool temp set point 23.3c, heat temp set point,
      -10% avg load percent, duty cycle
    </description>
    <arg name="eventId" type="INT32U" description="4 byte event id for the load control event" />
    <arg name="utilityEnrollmentGroup" type="INT8U" description="UEG of the load control event" />
    <arg name="start" type="INT32U" description="Start time for the load control event" />
    <arg name="duration" type="INT16U" description="Duration for the load control event" />
    <arg name="eventControl" type="INT8U" description="Control byte for the load control event" />
  </command>
  <command cli="zcl bacnet transfer-npdu whois" source="client" functionName="zclBacnetTransferWhoisCommand" group="bacnet-protocol-tunnel">
    <description>
      Send a sample whois command.
    </description>
  </command>
  <command cli="zcl tunneling random-to-server" source="client" functionName="zclTunnelingRandomToServerCommand" group="tunneling">
    <description>
      Send a random amount of data through a tunnel to the server (used for testing)
    </description>
    <arg name="tunnel-id" type="INT16U" description="The two byte tunnel id" />
    <arg name="length" type="INT16U" description="The two byte length of the random data to send" />
  </command>
  <command cli="zcl tunneling transfer-to-server" source="client" functionName="zclTunnelingTransferToServerCommand" group="tunneling">
    <description>
      Transfer data through a tunnel to the server.
    </description>
    <arg name="tunnel-id" type="INT16U" description="The two byte tunnel id" />
    <arg name="data" type="OCTET_STRING" description="data to transfer to the client" />
  </command>
  <command cli="zcl tunneling transfer-to-client" source="server" functionName="zclTunnelingTransferToClientCommand" group="tunneling">
    <description>
      Transfer data through a tunnel to the client (used for testing)
    </description>
    <arg name="tunnel-id" type="INT16U" description="The two byte tunnel id" />
    <arg name="data" type="OCTET_STRING" description="data to transfer to the client" />
  </command>
  <command cli="zcl tunneling random-to-client" source="server" functionName="zclTunnelingRandomToClientCommand" group="tunneling">
    <description>
      Send a random amount of data through a tunnel to the server (used for testing)
    </description>
    <arg name="tunnel-id" type="INT16U" description="The two byte tunnel id" />
    <arg name="length" type="INT16U" description="the length of random data to send to the client" />
  </command>
  <command cli="send" functionName="emAfCliSendCommand" group="build-send-msg">
    <description>
      Send a pre-buffered message from a given endpoint to an endpoint on a device with a given short address.
    </description>
    <arg name="id" type="INT16U" description="short id of the device to send the message to" />
    <arg name="src-endpoint" type="INT8U" description="The endpoint to send the message from" />
    <arg name="dst-endpoint" type="INT8U" description="The endpoint to send the message to" />
  </command>
  <command cli="send_multicast" functionName="emAfCliSendCommand" group="build-send-msg">
    <description>
      Send a pre-buffered multicast message to a given group id from a given endpoint.
    </description>
    <arg name="groupId" type="INT16U" description="group id of the multicast group to send the message to" />
    <arg name="src-endpoint" type="INT8U" description="The endpoint to send the message from" />
  </command>
  <command cli="send-using-multicast-binding" functionName="emAfCliSendUsingMulticastBindingCommand" group="build-send-msg">
    <description>
      When sending using a binding, specify whether a multicast binding should be used.
    </description>
    <arg name="useMulticastBinding" type="BOOLEAN" description="Whether to send via a multicast binding"/>
  </command>
  <command cli="bsend" functionName="emAfCliBsendCommand" group="build-send-msg">
    <description>
      Send using a binding based on the clusterId in the globalApsFrame and the srcEndpoint specified (if the src endpoint is zero it only sends based on the clusterId)
    </description>
    <arg name="srcEndpoint" type="INT8U" description="Source endpoint to send a binding based message from"/>
  </command>
  <command cli="timesync" functionName="emAfCliTimesyncCommand" group="build-send-msg">
    <description>
      This sends a read attr for the time of the device specified. It sets a flag so when it gets the response it writes the time to its own time attr
    </description>
    <arg name="id" type="INT16U" description="two byte short id of the time server" />
    <arg name="srcEndpoint" type="INT8U" description="source endpoint to send time sync from" />
    <arg name="destEndpoint" type="INT8U" description="destination endpoint to expect response on" />
  </command>
  <command cli="raw" functionName="emAfCliRawCommand" group="build-send-msg">
    <description>
      Creates a message by specifying the raw bytes. Use "send" to send the message once it has been created. Ex: raw 0x000F {00 0A 00 11 22 33 44 55} sends a message to cluster 15 (0x000F) of length 8 which includes the ZCL header.
    </description>
    <arg name="clusterId" type="INT16U" description="two byte cluster id" />
    <arg name="data" type="OCTET_STRING" description="ZCL message, including ZCL header and payload" />
  </command>
  <command cli="interpan group" functionName="interpanCommand" group="build-send-msg">
    <description>
      send an interpan message to a group id.
    </description>
    <arg name="groupId" type="INT16U" description="group id to send to" />
    <arg name="destPan" type="INT16U" description="destination pan id" />
    <arg name="destprofileID" type="INT16U" description="destination profile ID" />
  </command>
  <command cli="interpan short" functionName="interpanCommand" group="build-send-msg">
    <description>
      Send an interpan message to a short id.
    </description>
    <arg name="shortId" type="INT16U" description="group id to send to" />
    <arg name="destPan" type="INT16U" description="destination pan id" />
    <arg name="destprofileID" type="INT16U" description="destination profile ID" />
  </command>
  <command cli="interpan long" functionName="interpanLongCommand" group="build-send-msg">
    <description>
      Send an interpan message to a long address (8 byte eui64)
    </description>
    <arg name="longId" type="IEEE_ADDRESS" description="long ieee address to send the interpan message to" />
    <arg name="destPAN" type="INT16U" description="two byte destination PA ID" />
    <arg name="destProfileID" type="INT16U" description="two byte destination profile ID" />
    <arg name="options" type="INT16U" description="two byte options" />
  </command>
  <command cli="read" functionName="emAfCliReadCommand" group="attribute">
    <description>
      Read an attribute from the local attribute table. The attribute is displayed on the command line.
    </description>
    <arg name="endpoint" type="INT8U" description="endpoint of the attribute to read" />
    <arg name="cluster" type="INT16U" description="cluster id of the attribute to read" />
    <arg name="attribute" type="INT16U" description="attribute id of the attribute to read" />
    <arg name="mask" type="INT8U" description="direction mask of the attribute to read (client=0 or server=1)" />
  </command>
  <command cli="write" functionName="emAfCliWriteCommand" group="attribute">
    <description>
      Write an attribute value into the local attribute table
    </description>
    <arg name="endpoint" type="INT8U" description="endpoint of the attribute to write" />
    <arg name="cluster" type="INT16U" description="cluster id of the attribute to write" />
    <arg name="attribute" type="INT16U" description="attribute id of the attribute to write" />
    <arg name="mask" type="INT8U" description="direction mask of the attribute to write (client=0 or server=1)" />
    <arg name="dataType" type="INT8U" description="the attribute type as listed in the generated file attribute-type.h" />
    <arg name="dataBytes" type="OCTET_STRING" description="string of bytes you wish to write into the attribute table." />
  </command>
  <command cli="info" functionName="emAfCliInfoCommand" group="info">
    <description>
      Gives information about the local node
    </description>
  </command>
  <command cli="libs" functionName="printAllLibraryStatus" group="info">
    <description>
      Lists which optional libraries of the stack are implemented on this device
    </description>
  </command>
  <command cli="option print-rx-msgs enable" functionName="optionPrintRxCommand" group="info">
    <description>
      Enable the printing of received messages.
    </description>
  </command>
  <command cli="option print-rx-msgs disable" functionName="optionPrintRxCommand" group="info">
    <description>
      Disable the printing of received messages.
    </description>
  </command>
  <command cli="option register" functionName="optionRegisterCommand" group="security">
    <description>
      Initiates Smart Energy Registration including Key Establishment. This command expects that the device has already joined a smart energy network.
    </description>
  </command>
  <command cli="option disc" functionName="optionDiscoverCommand" group="network">
    <description>
      Sends a ZDO Match Descriptor Request for the server side of the specified cluster from the specified application profile. Match Descriptor Responses received are printed to the serial output.
    </description>
    <arg name="profileId" type="INT16U" description="the profile id to send with the discovery message" />
    <arg name="clusterId" type="INT16U" description="cluster id to send with the discovery message" />
  </command>
  <command cli="option edb" functionName="optionEndDeviceBindCommand" group="network">
    <description>
      Sends a ZDO End Device Bind Request using the given local endpoint.
    </description>
    <arg name="endpoint" type="INT8U" description="The local endpoint whose simple descriptor will be used to create the request" />
  </command>
  <command cli="option binding-table print" functionName="optionBindingTablePrintCommand" group="info">
    <description>
      Prints out the binding table to the command line.
    </description>
  </command>
  <command cli="option binding-table clear" functionName="optionBindingTableClearCommand" group="network">
    <description>
      Clear the binding table
    </description>
  </command>
  <command cli="option binding-table set" functionName="optionBindingTableSetCommand" group="network">
    <description>
      Set a binding table entry for the arguments specified.
    </description>
    <arg name="bindingTableIndex" type="INT8U" description="one byte index into the binding table" />
    <arg name="clusterId" type="INT16U" description="cluster id to send with the discovery message" />
    <arg name="localEndpoint" type="INT8U" description="local endpoint to bind" />
    <arg name="remoteEndpoint" type="INT8U" description="remote endpoint to bind" />
    <arg name="ieeeAddress" type="IEEE_ADDRESS" description="8 byte IEEE address provided big endian" />
  </command>
  <command cli="option apsretry on" functionName="optionApsRetryCommand" group="network">
    <description>
      Forces the AppFramework to set/clear the APS Retry option (in APS Frame options mask) for all subsequent outgoing messages; Turns APS retry on.
    </description>
  </command>
  <command cli="option apsretry off" functionName="optionApsRetryCommand" group="network">
    <description>
      Forces the AppFramework to set/clear the APS Retry option (in APS Frame options mask) for all subsequent outgoing messages; Turns APS retry off
    </description>
  </command>
  <command cli="option apsretry default" functionName="optionApsRetryCommand" group="network">
    <description>
      Forces the AppFramework to set/clear the APS Retry option (in APS Frame options mask) for all subsequent outgoing messages; a value of "default" allows the AppFramework to use its own default logic to determine when the APS Retry option should be used.
    </description>
  </command>
  <command cli="option security aps off" functionName="optionApsSecurityCommand" group="security">
    <description>
      Turns aps security off
    </description>
  </command>
  <command cli="option security aps on" functionName="optionApsSecurityCommand" group="security">
    <description>
      Turns aps security on
    </description>
  </command>
  <command cli="option security set-allow-trust-center-rejoin-using-well-known-key" functionName="optionSecurityAllowTrustCenterRejoinUsingWellKnownKey" group="security">
    <description>
      Set whether or not a Trust Center application will allow trust center rejoins for devices using the well-known key.
    </description>
    <arg name="allowTrustCenterRejoinUsingWellKnownKey" type="BOOLEAN" description="Whether or not the Trust Center should allow trust center rejoins for devices using the well-known key." />
  </command>
  <command cli="option security set-allow-trust-center-rejoin-using-well-known-key-timeout" functionName="optionSecurityAllowTrustCenterRejoinUsingWellKnownKeyTimeout" group="security">
    <description>
      Sets the number of seconds to allow trust center rejoins for devices using the well-known key. A value of 0 means the policy should not be changed after a timeout. This must be called prior to forming or joining a network.
    </description>
    <arg name="trustCenterRejoinUsingWellKnownKeyTimeout" type="INT16U" description="The number of seconds that trust center rejoins will be responded to using the well-known link key." />
  </command>
  <command cli="option link" functionName="optionLinkCommand" group="security">
    <description>
      Sets a link key in the link key table. Example: option link 0x00 { 06 00 ab 41 64 30 00 0a } {aa bb cc dd ee ff aa bb cc dd ee ff aa bb cc dd}
    </description>
    <arg name="keyTableIndex" type="INT8U" description="index into the link key table" />
    <arg name="ieeeAddress" type="IEEE_ADDRESS" description="IEEE address to enter into the link key table" />
    <arg name="linkKey" type="OCTET_STRING" description="link key to enter into the table" />
  </command>
  <command cli="option install-code" functionName="optionInstallCodeCommand" group="security" restriction="!defined(EMBER_AF_HAS_SECURITY_PROFILE_NONE)">
    <description>
      Derives a link key from an install code and sets it in the link key table.
    </description>
    <arg name="keyTableIndex" type="INT8U" description="index into the link key table" />
    <arg name="ieeeAddress" type="IEEE_ADDRESS" description="IEEE address to enter into the link key table" />
    <arg name="installCode" type="OCTET_STRING" description="install code including two-byte, little-endian CRC" />
  </command>
  <command cli="security mfg-token get" functionName="getSetMfgToken" group="security" restriction="!defined(EMBER_AF_HAS_SECURITY_PROFILE_NONE)">
    <description>
    </description>
  </command>
  <command cli="security mfg-token set" functionName="getSetMfgToken" group="security" restriction="!defined(EMBER_AF_HAS_SECURITY_PROFILE_NONE)">
    <description>
    </description>
    <arg name="magicNumber" type="INT32U" description="" />
    <arg name="value" type="INT16U" description="" />
  </command>
  <command cli="keys clear" functionName="keysClearCommand" group="security">
    <description>
      Clear all security keys
    </description>
  </command>
  <command cli="keys print" functionName="keysPrintCommand" group="security">
    <description>
      Print all security keys out to the command line.
    </description>
  </command>
  <command cli="keys delete" functionName="keysDeleteCommand" group="security">
    <description>
      Delete a security key from a given index
    </description>
    <arg name="index" type="INT8U" description="index into the security key table" />
  </command>
  <!-- TODO: GENERATED CLI
  <command cli="att-read-frag-resp" functionName="attributeReadCausingFragmentedResponseCommand" group="general">
    <description>
      A test command which solicits an attribute read which will force the responding node to send a response that uses fragmentation.
    </description>
  </command>
  -->
  <command cli="print attr" functionName="emberAfPrintAttributeTable" group="info">
    <description>
      Print the attribute table.
    </description>
  </command>
  <command cli="print time" functionName="printTimeCommand" group="info">
    <description>
      Print out the time information
    </description>
  </command>
  <command cli="debugprint status" functionName="emberAfPrintStatus" group="info">
    <description>
      Prints out the current settings for debug printing on the device
    </description>
  </command>
  <command cli="debugprint all_on" functionName="emberAfPrintAllOn" group="info">
    <description>
      Turns on all compiled in debug printing
    </description>
  </command>
  <command cli="debugprint all_off" functionName="emberAfPrintAllOff" group="info">
    <description>
      Turns off all debug printing
    </description>
  </command>
  <command cli="debugprint on" functionName="printOnCommand" group="info">
    <description>
      Turns on compiled in debug printing for a specific debug printing area. Debug print areas are defined in the generated &lt;application&gt;.h header file.
    </description>
     <arg name="area" type="INT8U" description="The debug area mask listed in the &lt;application&gt;.h file" />
  </command>
  <command cli="debugprint off" functionName="printOffCommand" group="info">
    <description>
      Turns off compiled in debug printing for a specific debug printing area. Debug print areas are defined in the generated &lt;application&gt;.h header file.
    </description>
    <arg name="area" type="INT8U" description="The debug area mask listed in the &lt;application&gt;.h file" />
  </command>
  <command cli="version" functionName="emAfCliVersionCommand" group="info">
    <description>
      Shows the version of the software
    </description>
  </command>
  <command cli="help" functionName="helpCommand" group="info">
    <description>
      Prints out the cli command options for the device
    </description>
  </command>
  <command cli="reset" functionName="resetCommand" group="general">
    <description>
      resets the device
    </description>
  </command>
  <command cli="echo" functionName="echoCommand" group="general">
    <description>
      Turns echo on the command line on or off depending on the argument
    </description>
    <arg name="echoOn" type="INT8U" description="bool indicating whether to turn echo on (1) or off (0)" />
  </command>
  <command cli="events" functionName="printEvents" group="general">
    <description>
      Print the list of timer events.
    </description>
  </command>
  <!-- Removed until we figure out what to do with gateway-cli.
  <command cli="time-sync-local" functionName="timeSyncLocalCommand" group="general">
    <description>
      Used on a Unix based gateway or large host to sync current time known to the application with Unix time known to the host.
    </description>
  </command>
  -->
  <command cli="network form" functionName="networkFormCommand" group="network">
    <description>
      Create a network on the given channel, power and panId.
    </description>
    <arg name="channel" type="INT8U" description="The channel on which to form the network" />
    <arg name="power" type="INT8S" description="One byte signed value indicating the TX power that the radio should be set to" />
    <arg name="panId" type="INT16U" description="Two byte pan id for the network" />
  </command>
  <command cli="network multi-phy-start" functionName="networkMultiPhyStartCommand" group="network">
    <description>
      To start multi phy interface other than native and form the network. The stack uses same PanId as native radio network.
    </description>
    <arg name="page" type="INT8U" description="The page on which to form the network." />
    <arg name="channel" type="INT8U" description="The channel on which to form the network." />
    <arg name="power" type="INT8S" description="One byte signed value indicating the TX power that the radio should be set to" array="true" />
  </command>
  <command cli="network multi-phy-stop" functionName="networkMultiPhyStopCommand" group="network">
    <description>
      Terminates the multi phy interface
    </description>
  </command>
  <command cli="network join" functionName="networkJoinCommand" group="network">
    <description>
      Join an existing network on the given channel, power and panId.
    </description>
    <arg name="channel" type="INT8U" description="The channel on which to form the network" />
    <arg name="power" type="INT8S" description="One byte signed value indicating the TX power that the radio should be set to" />
    <arg name="panId" type="INT16U" description="Two byte pan id for the network" />
  </command>
  <command cli="network init" functionName="networkInitCommand" group="network">
    <description>
      Initialize a network; this is a test command used for tc-swap-out testing.
    </description>
  </command>
  <command cli="network rejoin" functionName="networkRejoinCommand" group="network">
    <description>
      Rejoin an existing network in a secure or insecure manner.
    </description>
    <arg name="haveCurrentNetworkKey" type="INT8U" description="Boolean indicating whether the device can rejoin secure or not. 1=rejoin with encryption, 0=rejoin without encryption" />
    <arg name="channelMask" type="INT32U" description="4 byte channel mask which should be used to search for the network to rejoin." />
  </command>
  <command cli="network rejoin-diff-device-type" functionName="networkRejoinDiffDeviceTypeCommand" group="network">
    <description>
      Rejoin an existing network in a secure or insecure manner with a different device type.
    </description>
    <arg name="haveCurrentNetworkKey" type="INT8U" description="Boolean indicating whether the device can rejoin secure or not. 1=rejoin with encryption, 0=rejoin without encryption" />
    <arg name="channelMask" type="INT32U" description="4 byte channel mask which should be used to search for the network to rejoin." />
    <arg name = "nodeType" type="INT8U" description="An enumeration indicating the device type to rejoin as.The stack only accepts EMBER_END_DEVICE and EMBER_SLEEPY_END_DEVICE." />
  </command>
  <command cli="network leave" functionName="networkLeaveCommand" group="network">
    <description>
      Leave the current network.
    </description>
  </command>
  <command cli="network pjoin" functionName="networkPermitJoinCommand" group="network">
    <description>
      Permit joining on the network for a given number of seconds
    </description>
    <arg name="seconds" type="INT8U" description="Number of seconds during which devices will be allowed to join the network. A value of 0xff turns permit joining on permanently" />
  </command>
  <command cli="network broad-pjoin" functionName="networkPermitJoinCommand" group="network">
    <description>
      Permit joining on the network for a given number of seconds AND broadcast a ZDO Mgmt Permit Joining request to all routers.
    </description>
    <arg name="seconds" type="INT8U" description="Number of seconds during which devices will be allowed to join the network. A value of 0xff turns permit joining on permanently" />
  </command>
  <command cli="network extpanid" functionName="networkExtendedPanIdCommand" group="network">
    <description>
      Write the extended pan id for the device.
    </description>
    <arg name="extPanId" type="OCTET_STRING" description="The bytes for the extended pan id" />
  </command>
  <command cli="network find unused" functionName="findUnusedPanIdCommand" group="network">
    <description>
      Begin a search for an unused Channel and Pan Id. Will automatically form a network on the first unused Channel and Pan Id it finds.
    </description>
  </command>
  <command cli="network find joinable" functionName="findJoinableNetworkCommand" group="network">
    <description>
      Begin a search for a joinable network. Will automatically attempt to join the first network that it finds.
    </description>
  </command>
  <command cli="network change-channel" functionName="networkChangeChannelCommand" group="network">
    <description>
      Attempts to change device over to a different channel given in the channel argument.
    </description>
    <arg name="channel" type="INT8U" description="The channel to change to." />
  </command>
  <command cli="network set" functionName="networkSetCommand" group="network">
    <description>
      Set the network index used by all future CLI commands.  Before executing a CLI command, the framework will switch to this network.  After the command finishes executing, the framework will switch back to the previous network.  The CLI uses the same network index until the device resets or it is changed through this command.
    </description>
    <arg name="networkIndex" type="INT8U" description="The network index to use for CLI commands" />
  </command>
  <command cli="network id" functionName="networkIdCommand" group="network">
    <description>
      Prints the current Node ID, EUI64, and Pan ID.
    </description>
  </command>
     <command cli="changekey link" functionName="changeKeyCommand" group="security">
       <description>
         Change the link key to the one provided in the 16 byte array argument for this command.
       </description>
       <arg name="key" type="OCTET_STRING" description="The link key provided as a 16 byte array" />
     </command>
     <command cli="changekey network" functionName="changeKeyCommand" group="security">
       <description>
         Change the network key to the 16 byte array provided as an argument to this command.
       </description>
       <arg name="key" type="OCTET_STRING" description="The network key provided as a 16 byte array" />
     </command>
       <command cli="zdo in-cl-list add" functionName="zdoAddClusterCommand" group="zdo">
         <description>
           Add clusters to the known server (in) clusters on this device.
         </description>
         <arg name="clusterId" type="INT16U" description="Server cluster id" />
       </command>
       <command cli="zdo in-cl-list clear" functionName="zdoClearClusterCommand" group="zdo">
         <description>
           Clear the ZDO list of server (in) clusters.
         </description>
       </command>
       <command cli="zdo out-cl-list add" functionName="zdoAddClusterCommand" group="zdo">
          <description>
            Add clusters to the known client (out) clusters on this device.
          </description>
          <arg name="clusterId" type="INT16U" description="Client cluster ids" />
        </command>
        <command cli="zdo out-cl-list clear" functionName="zdoClearClusterCommand" group="zdo">
          <description>
            Clear the ZDO list of client (out) clusters.
          </description>
        </command>
       <command cli="zdo nwk-upd chan" functionName="zdoNetworkUpdateChannelCommand" group="zdo">
         <description>
           Sends an update channel request.
         </description>
         <arg name="channel" type="INT8U" description="One byte channel to change to." />
       </command>
       <command cli="zdo nwk-upd chanPg" functionName="zdoNetworkUpdateChannelCommand" group="zdo">
         <description>
           Sends an update channel page request. The stack shall send network enhanced update request if page is non-zero.
         </description>
         <arg name="channel" type="INT8U" description="One byte channel to change to." />
         <arg name="page" type="INT8U" description="One byte page to change to." />
       </command>
       <command cli="zdo nwk-upd scan" functionName="zdoNetworkUpdateScanCommand" group="zdo">
         <description>
           Performs an energy scan.
         </description>
         <arg name="targetNodeId" type="INT16U" description="Two byte short id of the target device" />
         <arg name="scanDuration" type="INT8U" description="One byte scan duration. Must be in range 0 - 5" />
         <arg name="scanCount" type="INT16U" description="Number of scans to perform. Must be in range 1 - 8" />
       </command>
       <command cli="zdo nwk-upd scan-chan-mask" functionName="zdoNetworkUpdateScanCommand" group="zdo">
         <description>
           Performs an energy scan on given channel mask. This can be used to perform scanning with page number embedded in channel mask, it mainly used for subghz network. The stack shall send network enhanced update request if page is non-zero.
         </description>
         <arg name="targetNodeId" type="INT16U" description="Two byte short id of the target device" />
         <arg name="scanDuration" type="INT8U" description="One byte scan duration. Must be in range 0 - 5" />
         <arg name="scanCount" type="INT16U" description="Number of scans to perform. Must be in range 1 - 8" />
         <arg name="channelMask" type="INT32U" description="Four byte channel mask" />
       </command>
       <command cli="zdo nwk-upd set" functionName="zdoNetworkUpdateSetCommand" group="zdo">
         <description>
           Broadcasts the ID of the new network manager and active channels.
         </description>
         <arg name="nwkMgrId" type="INT16U" description="Two byte network manager id" />
         <arg name="channelMask" type="INT32U" description="Four byte channel mask" />
       </command>
     <command cli="zdo nwk" functionName="zdoNwkAddressRequestCommand" group="zdo">
       <description>
         Sends a network address request for the given IEEE address.
       </description>
       <arg name="ieee" type="IEEE_ADDRESS" description="IEEE address for which a short address is being requested" />
     </command>
     <command cli="zdo ieee" functionName="zdoIeeeAddressRequestCommand" group="zdo">
       <description>
         Request an ieee address based on a given node id.
       </description>
       <arg name="nodeId" type="INT16U" description="Short address of the device for which a long address is requested" />
     </command>
     <command cli="zdo simple" functionName="zdoSimpleCommand" group="zdo">
       <description>
         Sends out a simple descriptor request for the short address and endpoint specified.
       </description>
       <arg name="dest" type="INT16U" description="Short address of the device where the simple descriptor request should be sent" />
       <arg name="targetEndpoint" type="INT8U" description="The endpoint on the target device where the simple descriptor request will be sent" />
     </command>
     <command cli="zdo node" functionName="zdoNodeCommand" group="zdo">
       <description>
         Sends a node descriptor request to a given target device
       </description>
       <arg name="target" type="INT16U" description="Two byte address for the target device." />
     </command>
     <command cli="zdo match" functionName="zdoMatchCommand" group="zdo">
       <description>
         Sends a matchDescriptorsRequest to the given destination with the given profile.
       </description>
       <arg name="nodeId" type="INT16U" description="Two byte node id indicating wher" />
       <arg name="profile" type="INT16U" description="Two byte profile id for the match descriptor request" />
     </command>
     <command cli="zdo bind" functionName="zdoBindCommand" group="zdo">
       <description>
         Send a ZDO Bind command to a device specified in the command arguments.
       </description>
       <arg name="destination" type="INT16U" description="Two byte destination node id" />
       <arg name="source Endpoint" type="INT8U" description="Remote device's source endpoint to bind" />
       <arg name="destEndpoint" type="INT8U" description="Remote endpoint to bind" />
       <arg name="cluster" type="INT16U" description="Cluster on which to bind" />
       <arg name="remoteEUI64" type="IEEE_ADDRESS" description="Remote node EUI64" />
       <arg name="destEUI64" type="IEEE_ADDRESS" description="Binding's dest EUI64.  Usually the local node's EUI64" />
     </command>
     <command cli="zdo active" functionName="zdoActiveEpCommand" group="zdo">
       <description>
         Send an active endpoint request to the device with the given short id.
       </description>
       <arg name="nodeId" type="INT16U" description="Two byte short id, destination for the active endpoint request" />
     </command>

     <command cli="zdo unbind unicast" functionName="zdoUnbindUnicastCommand" group="zdo">
       <description>
          Sends an unbind request for a unicast binding to the target device.
       </description>
       <arg name="target" type="INT16U" description="Target node ID"/>
       <arg name="source eui64" type="IEEE_ADDRESS" description="The source EUI64 of the binding (the remote device's EUI64)"/>
       <arg name="source endpoint" type="INT8U" description="The source endpoint of the binding."/>
       <arg name="clusterID" type="INT16U" description="The cluster ID to unbind."/>
       <arg name="destinationEUI64" type="IEEE_ADDRESS" description="The destination EUI64 in the binding (usually the local node's EUI64"/>
       <arg name="destEndpoint" type="INT8U" description="The destination endpoint of the binding"/>
     </command>

     <command cli="zdo unbind group" functionName="zdoUnbindGroupCommand" group="zdo">
       <description>
          Sends an unbind request for a multicast binding to the target device.
       </description>
       <arg name="target" type="INT16U" description="Target node ID"/>
       <arg name="source eui64" type="IEEE_ADDRESS" description="The source EUI64 of the binding (the remote device's EUI64)"/>
       <arg name="source endpoint" type="INT8U" description="The source endpoint of the binding."/>
       <arg name="clusterID" type="INT16U" description="The cluster ID to unbind."/>
       <arg name="groupAddress" type="INT16U" description="The group address in the binding"/>
     </command>

     <command cli="zdo leave" functionName="zdoLeaveRequestCommand" group="zdo">
      <description>
        Send a ZDO Management Leave command to the target device.
      </description>
      <arg name="target" type="INT16U" description="Target node ID"/>
      <arg name="removeChildren" type="BOOLEAN" description="Remove children"/>
      <arg name="rejoin" type="BOOLEAN" description="Rejoin after leave"/>
    </command>

     <command cli="zdo mgmt-bind" functionName="zdoMgmtBindCommand" group="zdo">
      <description>
        Send a ZDO MGMT-Bind (Binding Table) Request to the target device.
      </description>
      <arg name="target" type="INT16U" description="Target node ID"/>
      <arg name="startIndex" type="INT8U" description="Starting index into table query"/>
    </command>

     <command cli="zdo mgmt-lqi" functionName="zdoMgmtLqiCommand" group="zdo">
      <description>
        Send a ZDO MGMT-LQI (LQI Table) Request to the target device.
      </description>
      <arg name="target" type="INT16U" description="Target node ID"/>
      <arg name="startIndex" type="INT8U" description="Starting index into table query"/>
    </command>

     <command cli="zdo power" functionName="zdoPowerDescriptorRequestCommand" group="zdo">
      <description>
        Send a ZDO Power Descriptor Request to the target device.
      </description>
      <arg name="target" type="INT16U" description="Target node ID"/>
    </command>

    <command cli="zdo route" functionName="zdoRouteRequestCommand" group="zdo">
      <description>
        Send a ZDO route request command to the target.
      </description>
      <arg name="target" type="INT16U" description="Target node ID"/>
      <arg name="index"  type="INT8U"  description="The index of the remote node's routing table to request."/>
    </command>


     <command cli="endpoint print" functionName="endpointPrint" group="endpoint">
       <description>
         Print the status of all the endpoints.
       </description>
     </command>
     <command cli="endpoint enable" functionName="enableDisableEndpoint" group="endpoint">
       <description>
         Enable the endpoint for processing ZCL messages.
       </description>
       <arg name="endpoint" type="INT8U" description="Endpoint in question." />
     </command>
     <command cli="endpoint disable" functionName="enableDisableEndpoint" group="endpoint">
       <description>
         Disable the endpoint for processing ZCL messages.
       </description>
       <arg name="endpoint" type="INT8U" description="Endpoint in question." />
     </command>
</cli>
