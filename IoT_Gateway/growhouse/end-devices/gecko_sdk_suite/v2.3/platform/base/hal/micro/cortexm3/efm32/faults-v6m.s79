//------------------------------------------------------------------------------
// @file hal/micro/cortexm3/faults-v6m.s79
// @brief PRIV
// 
//
// Copyright 2016 Silicon Laboratories, Inc. All rights reserved.           *80*
//------------------------------------------------------------------------------

#include "../compiler/asm.h"

        __IMPORT__ halInternalCrashHandler
        __IMPORT__ halInternalSysReset

// define the values the link register can have on entering an exception
__EQU__(EXC_RETURN_HANDLER_MSP, 0xFFFFFFF1)
__EQU__(EXC_RETURN_THREAD_MSP,  0xFFFFFFF9)
__EQU__(EXC_RETURN_THREAD_PSP,  0xFFFFFFFD)

// define stack bytes needed by halCrashHandler()
__EQU__(CRASH_STACK_SIZE, 64)

//------------------------------------------------------------------------------
//
// Various types of crashes generate NMIs, hard, bus, memory, usage and debug 
// monitor faults that vector to the routines defined here. 
//
// Although all of these could vector directly to the common fault handler,
// each is given its own entry point to allow setting a breakpoint for a 
// particular type of crash.
//
//------------------------------------------------------------------------------


#ifndef EMBER_INTERRUPT_TEST
        __CODE__
        __THUMB__
        __EXPORT__ halNmiIsr
halNmiIsr:
        b.n fault
#endif


#ifndef EMBER_ACCESS_TEST
        __CODE__
        __THUMB__
        __EXPORT__ halHardFaultIsr
halHardFaultIsr:
        b.n fault

        __CODE__
        __THUMB__
        __EXPORT__ halBusFaultIsr
halBusFaultIsr:
        b.n fault

        __CODE__
        __THUMB__
        __EXPORT__ halMemoryFaultIsr
halMemoryFaultIsr:
        b.n fault

        __CODE__
        __THUMB__
        __EXPORT__ halUsageFaultIsr
halUsageFaultIsr:
        b.n fault
#endif

        __CODE__
        __THUMB__
        __EXPORT__ halDebugMonitorIsr
halDebugMonitorIsr:
        b.n fault

        __CODE__
        __THUMB__
        __EXPORT__ uninitializedIsr
uninitializedIsr:
        b.n fault


//------------------------------------------------------------------------------
// Common fault handler prolog processing
//
//   determines which of the three possible EXC_RETURN values is in lr,
//   then uses lr to save processor registers r0-r12 to the crash info area
//
//   restores lr's value, and then saves lr, msp and psp to the crash info area
//
//   checks the stack pointer to see if it is valid and won't overwrite the crash
//   info area - if needed, resets the stack pointer to the top of the stack
//   
//   calls halInternalCrashHandler() to continue saving crash data. This 
//   C function can finish crash processing without risking further faults.
//   It returns the fault reason, and this is passed to halInternalSysReset() 
//   that forces a processor reset.
//
//------------------------------------------------------------------------------
        __CODE__
        __THUMB__
        __EXPORT__ fault
fault:
        cpsid   i               // in case the fault priority is low
        // Sadly, we're losing r0 because of stupid 16bit Thumb
        // But in return, we don't have to check the LR anymore since it sticks around
        // throughout this routine.
        ldr     r0, =__BEGIN_RESETINFO__(4)
        
        stmia   r0!, {r0-r7}
        mov     r1, r8
        mov     r2, r9
        mov     r3, r10
        mov     r4, r11
        mov     r5, r12
        stmia   r0!, {r1-r5}

fault_continue:
        mov     r1, lr
        mov     r2, sp
        mrs     r3, PSP
        stm     r0!, {r1-r3}

fault_check_sp:
        //  make sure that the current stack pointer is within the minimum region
        //  that must be occupied by the stack and that there is some headroom
        //  for the crash handler's stack.
        ldr     r0, =__BEGIN_STACK__(CRASH_STACK_SIZE)
        ldr     r4, =__END_STACK__(0)
        cmp     sp, r0
        blo.n   fault_fix_sp
        // compare to make sure SP otherwise looks valid
        cmp     sp, r4
        blo.n   fault_sp_okay
fault_fix_sp:
        msr     msp, r4
fault_sp_okay:
        bl.w    halInternalCrashHandler // saves rest of data, returns reason
        msr     msp, r4                 // set sp to top of stack segment
        bl.w    halInternalSysReset     // call with reset reason in R0     

        __END__
