bootloader-uart-xmodem {
  name=UART XMODEM Bootloader
  dir=bootloader-uart-xmodem/
  isc=bootloader-uart-xmodem/bootloader-uart-xmodem.isc
  architecture=efr32~series[1],efr32~series[2],efm32~series[1]
  
  Standalone Bootloader using XMODEM-CRC over UART. The bootloader shows a menu, where an XMODEM transfer can be started by sending ASCII '1', or the application can be started by sending ASCII '2'. This is the recommended UART bootloader for the EmberZNet, Thread and Flex protocol stacks.
}
bootloader-uart-bgapi {
  name=BGAPI UART DFU Bootloader
  dir=bootloader-uart-bgapi/
  isc=bootloader-uart-bgapi/bootloader-uart-bgapi.isc
  architecture=efr32~series[1],efr32~series[2]
  
  Standalone Bootloader using the BGAPI protocol for UART DFU. This is the recommended UART bootloader for the BLE protocol stack.
}
bootloader-spi-ezsp {
  name=EZSP SPI Bootloader
  dir=bootloader-spi-ezsp/
  isc=bootloader-spi-ezsp/bootloader-spi-ezsp.isc
  architecture=efr32~series[1],efr32~series[2]
  
  Standalone Bootloader using the EZSP protocol over SPI. This is the recommended SPI bootloader for the EmberZNet, Thread and Flex protocol stacks.
}
bootloader-storage-spiflash {
  name=SPI Flash Storage Bootloader (multiple images)
  dir=bootloader-storage-spiflash/
  isc=bootloader-storage-spiflash/bootloader-storage-spiflash.isc
  architecture=efr32~series[1],efr32~series[2]
  
  Application Bootloader for all EFR32 devices, using an external SPI flash to store upgrade images received by the application over the air in an application specific way. This sample configuration supports storing multiple firmware update images simultaneously by configuring multiple storage slots.
}
bootloader-storage-spiflash-single {
  name=SPI Flash Storage Bootloader (single image)
  dir=bootloader-storage-spiflash-single/
  isc=bootloader-storage-spiflash-single/bootloader-storage-spiflash-single.isc
  architecture=efr32~series[1],efr32~series[2],efm32~series[1]
  
  Application Bootloader for all EFR32 and EFM32 Series 1 devices, using an external SPI flash to store upgrade images received by the application in an application specific way, such as OTA, USB, Ethernet, etc. This sample configuration supports storing a single firmware update image at a time, and is plug-and-play compatible with the default configuration of the OTA Client in Zigbee sample applications.
}
bootloader-storage-internal {
  name=Internal Storage Bootloader (multiple images on 1MB device)
  dir=bootloader-storage-internal/
  isc=bootloader-storage-internal/bootloader-storage-internal.isc
  architecture=efr32~series[1],efr32~series[2]
  
  Application Bootloader for all EFR32 devices, using the internal flash memory to store upgrade images received by the application over the air in an application specific way. This sample configuration supports storing multiple firmware update images simultaneously by configuring multiple storage slots. The storage layout is designed for 1024 kB EFR32xG12 devices, and the layout of the storage should be modified before being run on other devices.
}
bootloader-storage-internal-single {
  name=Internal Storage Bootloader (single image on 1MB device)
  dir=bootloader-storage-internal-single/
  isc=bootloader-storage-internal-single/bootloader-storage-internal-single.isc
  architecture=efr32~series[1]~device_configuration[2],efr32~series[2],efm32~series[1]~family[G]
  
  Application Bootloader for EFR32xG12, EFR32xG21 and EFM32GG1x devices, using the internal flash memory to store upgrade images received by the application in an application specific way, such as OTA, USB, Ethernet, etc. This sample configuration supports storing a single firmware update image at a time, and is plug-and-play compatible with the "Local Storage Bootloader" configuration of EmberZNet, Silicon Labs Thread and Flex sample applications on 1024 kB EFR32xG12 devices. The layout of the storage should be modified before being run on other devices.
}
bootloader-storage-internal-single-512k {
  name=Internal Storage Bootloader (single image on 512kB device)
  dir=bootloader-storage-internal-single-512k/
  isc=bootloader-storage-internal-single-512k/bootloader-storage-internal-single-512k.isc
  architecture=efr32~series[1],efr32~series[2],efm32~series[1]
  
  Application Bootloader for all EFR32 and EFM32 Series 1 devices, using the internal flash memory to store upgrade images received by the application in an application specific way, such as OTA, USB, Ethernet, etc. This sample configuration supports storing a single firmware update image at a time, and is plug-and-play compatible with the "Local Storage Bootloader" configuration of EmberZNet, Silicon Labs Thread and Flex sample applications on 512 kB EFR32xG13 devices. The layout of the storage should be modified before being run on other devices.
}
bootloader-storage-internal-single-lzma {
  name=Internal Storage Bootloader (single image with LZMA compression, 1MB flash)
  dir=bootloader-storage-internal-single-lzma/
  isc=bootloader-storage-internal-single-lzma/bootloader-storage-internal-single-lzma.isc
  architecture=efr32~series[1]~device_configuration[2],efr32~series[2],efm32~series[1]~family[G]
  
  Application Bootloader for EFR32xG12, EFR32xG21 and EFM32GG1x devices, using the internal flash memory to store upgrade images received by the application in an application specific way, such as OTA, USB, Ethernet, etc. This sample configuration supports storing a single firmware update image at a time, and is plug-and-play compatible with the "Local Storage Bootloader" configuration of EmberZNet, Silicon Labs Thread and Flex sample applications on 1024 kB EFR32xG12 devices. The layout of the storage should be modified before being run on other devices.
}
bootloader-storage-internal-ble {
  name=Bluetooth in-place OTA DFU Bootloader
  dir=bootloader-storage-internal-ble/
  isc=bootloader-storage-internal-ble/bootloader-storage-internal-ble.isc
  architecture=efr32~series[1]~family[B]~flash[256K],efr32~series[1]~family[M]~flash[256K]
  
  Application Bootloader for in-place OTA DFU with the Bluetooth stack on EFR32 devices with 256kB flash parts. Thie sample application is using internal flash to store stack and app upgrade images received OTA in a two-stage process.
}
