{% set app = context["SAMPLE_APP_ID"] %}
{% set arch = context["ARCHITECTURE_ID"].split("+") %}
/***************************************************************************//**
 * @file
 * @brief Led control for managing led hardware
 *******************************************************************************
 * # License
 * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 ******************************************************************************/

{% if arch[1] != "brd4166a" %}
#include "led_control.h"

#include "em_gpio.h"
#include "em_timer.h"
#include "em_cmu.h"

#include "hal-config.h"

/* board specific route locations to map timer PWM outputs to right pins */
#include "led_routeloc.h"

/***********************************************************************************************//**
 * @addtogroup LED
 * @{
 **************************************************************************************************/

/***********************************************************************************************//**
 * @addtogroup led_control
 * @{
 **************************************************************************************************/

/* LED polarity is active-low in those radio boards that share same pin for BUTTON/LED */
#ifdef FEATURE_LED_BUTTON_ON_SAME_PIN
#define LED_ACTIVE_LOW
#define LED_OFF_STATE 1
#define LED_ON_STATE  0
#else
#define LED_OFF_STATE 0
#define LED_ON_STATE  1
#endif

/***************************************************************************//**
 * Initialize TIMER0 as PWM source for LEDs.
 ******************************************************************************/
static void pwm_timer_init(void)
{
  TIMER_Init_TypeDef sTimerInit = TIMER_INIT_DEFAULT;
  TIMER_InitCC_TypeDef sInitCC = TIMER_INITCC_DEFAULT;
  CMU_ClockEnable(cmuClock_TIMER0, true);
  TIMER_Init(TIMER0, &sTimerInit);
  #if defined(LED0_ROUTELOC)
  TIMER0->ROUTELOC0 = LED0_ROUTELOC | LED1_ROUTELOC;
  TIMER0->ROUTEPEN = TIMER_ROUTEPEN_CC0PEN | TIMER_ROUTEPEN_CC1PEN;
  #else
  GPIO->TIMERROUTE[0].ROUTEEN = GPIO_TIMER_ROUTEEN_CC0PEN | GPIO_TIMER_ROUTEEN_CC1PEN;
  GPIO->TIMERROUTE[0].CC0ROUTE =
    (LED0_PORT << _GPIO_TIMER_CC0ROUTE_PORT_SHIFT)
    | (LED0_PIN << _GPIO_TIMER_CC0ROUTE_PIN_SHIFT);
  GPIO->TIMERROUTE[0].CC1ROUTE =
    (LED1_PORT << _GPIO_TIMER_CC1ROUTE_PORT_SHIFT)
    | (LED1_PIN << _GPIO_TIMER_CC1ROUTE_PIN_SHIFT);
  #endif
  sInitCC.mode = timerCCModePWM;
  TIMER_InitCC(TIMER0, 0, &sInitCC);
  TIMER_InitCC(TIMER0, 1, &sInitCC);

#ifdef LED_ACTIVE_LOW
  TIMER_CompareSet(TIMER0, 0, MAX_BRIGHTNESS);
  TIMER_CompareSet(TIMER0, 1, MAX_BRIGHTNESS);
#else
  TIMER_CompareSet(TIMER0, 0, MIN_BRIGHTNESS);
  TIMER_CompareSet(TIMER0, 1, MIN_BRIGHTNESS);
#endif

  TIMER_TopSet(TIMER0, 0xFFFF);

  TIMER_Enable(TIMER0, 1);
}

/*******************************************************************************
 * Initialize LEDs hardware.
 ******************************************************************************/
void LEDS_control_init(void)
{
  // configure LED pins
  GPIO_PinModeSet(BSP_LED0_PORT, BSP_LED0_PIN, gpioModePushPull, LED_OFF_STATE);
  GPIO_PinModeSet(BSP_LED1_PORT, BSP_LED1_PIN, gpioModePushPull, LED_OFF_STATE);
  pwm_timer_init();
}

{% if app != "soc-btmesh-hsl" %}
/*******************************************************************************
 * Set LED color based on lightness and temperature.
 *
 * @param[in] level        Lightness level.
 * @param[in] temperature  Color temperature in Kelvins.
 *
 * @note On single color LEDs only lightness is changed.
 ******************************************************************************/
void LEDS_SetColor(uint16_t level, uint16_t temperature)
{% else %}
/*******************************************************************************
 * Set LED color based on lightness, hue and saturation.
 *
 * @param[in] level       Lightness level.
 * @param[in] hue         Hue level.
 * @param[in] saturation  Saturation level.
 *
 * @note On single color LEDs only lightness is changed.
 ******************************************************************************/
void LEDS_SetColor(uint16_t level, uint16_t hue, uint16_t saturation)
{% endif %}
{
  /* all LED adjustments go trough this function. The polarity is taken into account by
   * flipping the level setting for boards with active-low LED control */
#ifdef LED_ACTIVE_LOW
  level = 0xFFFF - level;
#endif

  /* for simplicity, LEDs are driven with PWM in all states, even 0% and 100%.
   * Therefore need to limit the min/max value used for the timer CC register */
  if (level < MIN_BRIGHTNESS) {
    level = MIN_BRIGHTNESS;
  } else if (level > MAX_BRIGHTNESS) {
    level = MAX_BRIGHTNESS;
  }

  TIMER_CompareSet(TIMER0, 0, level);
  TIMER_CompareSet(TIMER0, 1, level);
}
{% else %}
#include <math.h>

#include "led_control.h"

#include "thunderboard/board.h"

/***********************************************************************************************//**
 * @addtogroup LED
 * @{
 **************************************************************************************************/

/***********************************************************************************************//**
 * @addtogroup led_control
 * @{
 **************************************************************************************************/

/// Color representation in RGB space
typedef struct {
  uint8_t R;  ///< Red value
  uint8_t G;  ///< Green value
  uint8_t B;  ///< Blue value
}RGB_t;

{% if app != "soc-btmesh-hsl" %}
/***************************************************************************//**
 * Convert temperature to RGB color using approximation functions.
 *
 * @param[in] temperature  Color temperature in Kelvins.
 *
 * @return RGB color representing given temperature.
 ******************************************************************************/
RGB_t Temperature_to_RGB(uint16_t temperature)
{
  RGB_t color;
  double temp_R, temp_G, temp_B;

  //approximation of temperature using RGB
  if (temperature < 6563) {
    temp_R = 255;
    if (temperature < 1925) {
      temp_B = 0;
    } else {
      temp_B = temperature - 1918.74282;
      temp_B = 2.55822107 * pow(temp_B, 0.546877914);
    }
    if ( temperature < 909) {
      temp_G = 0;
    } else {
      temp_G = temperature - 636.62578769;
      temp_G = 73.13384712 * log(temp_G) - 383.76244858;
    }
  } else {
    temp_R = temperature - 5882.02392431;
    temp_R = -29.28670147 * log(temp_R) + 450.50427359;
    temp_R = temp_R + 0.5;
    temp_G = temperature - 5746.13180276;
    temp_G = -18.69512921 * log(temp_G) + 377.39334366;
    temp_B = 255;
  }

  color.R = temp_R > 255 ? 255 : (temp_R >= 0 ? (int)(temp_R + 0.5) : 0);
  color.G = temp_G > 255 ? 255 : (temp_G >= 0 ? (int)(temp_G + 0.5) : 0);
  color.B = temp_B > 255 ? 255 : (temp_B >= 0 ? (int)(temp_B + 0.5) : 0);

  return color;
}

/***************************************************************************//**
 * Change lightness of given color temperature.
 *
 * @param[in] color  RGB color representing color temperature.
 * @param[in] level  Lightness level of given color.
 *
 * @return RGB color representing given temperature and lightness level.
 ******************************************************************************/
RGB_t RGB_to_LightnessRGB(RGB_t color, uint16_t level)
{
  uint32_t temp_level;
  RGB_t new_color;

  temp_level = color.R * (uint32_t) level / 65535;
  new_color.R = temp_level;
  temp_level = color.G * (uint32_t) level / 65535;
  new_color.G = temp_level;
  temp_level = color.B * (uint32_t) level / 65535;
  new_color.B = temp_level;

  return new_color;
}
{% else %}
/***************************************************************************//**
 * Helper function for calculating RGB values from hue using helper variables.
 * If hue value passed to the function is increased by 1/3 it returns red value.
 * If hue value passed to the function is unchanged it returns green value.
 * If hue value passed to the function is decreased by 1/3 it returns blue value.
 *
 * @param[in] v1  First helper variable (range 0 to 1).
 * @param[in] v2  Second helper variable (range 0 to 1).
 * @param[in] vH  Hue value.
 *
 * @return Value of red or green or blue.
 ******************************************************************************/
double Hue_to_RGB(double v1, double v2, double vH)
{
  if ( vH < 0) {
    vH += 1;
  }
  if ( vH > 1) {
    vH -= 1;
  }
  if ( (6 * vH) < 1) {
    return (v1 + (v2 - v1) * 6 * vH);
  }
  if ((2 * vH) < 1) {
    return (v2);
  }
  if ((3 * vH) < 2) {
    return (v1 + (v2 - v1) * (2.0 / 3 - vH) * 6);
  }
  return (v1);
}

/***************************************************************************//**
 * Convert color from HSL space to RGB space
 *
 * @param[in] hue        Hue value.
 * @param[in] saturation Saturation value.
 * @param[in] lightness  Lightness value.
 *
 * @return RGB color converted from HSL space.
 ******************************************************************************/
RGB_t HSL_to_RGB(uint16_t hue, uint16_t saturation, uint16_t lightness)
{
  RGB_t color;
  double R, G, B;
  double H, S, L;
  double var_1, var_2;

  /* Change the range to (0-1) */
  H = (double)hue / 65535;
  S = (double)saturation / 65535;
  L = (double)lightness / 65535;

  if (S == 0) {
    R = L;
    G = L;
    B = L;
  } else {
    if (L < 0.5) {
      var_2 = L * (1 + S);
    } else {
      var_2 = (L + S) - (S * L);
    }

    var_1 = 2 * L - var_2;

    R = Hue_to_RGB(var_1, var_2, H + 1.0 / 3);
    G = Hue_to_RGB(var_1, var_2, H);
    B = Hue_to_RGB(var_1, var_2, H - 1.0 / 3);
  }

  color.R = (uint8_t)(255.0 * R + 0.5);
  color.G = (uint8_t)(255.0 * G + 0.5);
  color.B = (uint8_t)(255.0 * B + 0.5);
  return color;
}
{% endif %}

/*******************************************************************************
 * Initialize LEDs hardware.
 ******************************************************************************/
void LEDS_control_init(void)
{
  // configure Thunderboard RGB LEDs
  BOARD_init();
  BOARD_rgbledEnable(true, 0x0F);
  BOARD_rgbledSetRawColor(0, 0, 0);
}

{% if app != "soc-btmesh-hsl" %}
/*******************************************************************************
 * Set LED color based on lightness and temperature.
 *
 * @param[in] level        Lightness level.
 * @param[in] temperature  Color temperature in Kelvins.
 ******************************************************************************/
void LEDS_SetColor(uint16_t level, uint16_t temperature)
{
  RGB_t color = Temperature_to_RGB(temperature);
  color = RGB_to_LightnessRGB(color, level);

  BOARD_rgbledSetColor(color.R, color.G, color.B);
}
{% else %}
/*******************************************************************************
 * Set LED color based on lightness, hue and saturation.
 *
 * @param[in] level       Lightness level.
 * @param[in] hue         Hue level.
 * @param[in] saturation  Saturation level.
 ******************************************************************************/
void LEDS_SetColor(uint16_t level, uint16_t hue, uint16_t saturation)
{
  RGB_t color = HSL_to_RGB(hue, saturation, level);

  BOARD_rgbledSetColor(color.R, color.G, color.B);
}
{% endif %}
{% endif %}

/** @} (end addtogroup led_control) */
/** @} (end addtogroup LED) */

