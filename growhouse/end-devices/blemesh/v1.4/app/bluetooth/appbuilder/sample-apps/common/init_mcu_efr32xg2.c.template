{% set arch = context["ARCHITECTURE_ID"].split("+") %}
{% set boards = {} %}
{% for d in context["CODEGEN"] %}
  {% if "boards" in d %}
    {% do boards.update(d["boards"]) %}
  {% endif %}
{% endfor %}
{% set board = arch[1]|upper %}
{% if board == "NONE" %}
  {% set features = ["DCDC", "LFXO"] %}
{% else %}
  {% set features = boards[board]["Features"] %}
{% endif %}
{% set dumbo_arch = "efr32~series[1]~device_configuration[1]" %}
/***************************************************************************//**
 * @file
 * @brief init_mcu_efr32xg2.c
 *******************************************************************************
 * # License
 * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 ******************************************************************************/

#if defined(HAL_CONFIG)
#include "bsphalconfig.h"
#include "hal-config.h"
#else
#include "bspconfig.h"
#endif

#include "board_features.h"

#include "em_chip.h"
#include "em_cmu.h"
#include "em_emu.h"
#include "em_rtcc.h"

#include "bsp.h"

#include "init_mcu.h"

{% if dumbo_arch|isarchcompatible(context["ARCHITECTURE_ID"]) %}
#include "tempdrv.h"
{% endif %}

// Bit [19] in MODULEINFO is the HFXOCALVAL:
// 1=No factory cal, use default XO tunning value in FW
// 0=Factory Cal, use XO tunning value in DI 
#define DEVINFO_MODULEINFO_HFXOCALVAL_MASK  0x00080000UL
// Calibration value for HFXO CTUNE is at DEVINFO Offset 0x08
#define DEVINFO_HFXOCTUNE  (*((uint16_t *) DEVINFO_BASE+0x8UL))

static void initMcu_clocks(void);

void initMcu(void)
{
  // Device errata
  CHIP_Init();

  // Set up clocks
  initMcu_clocks();

  RTCC_Init_TypeDef rtccInit = RTCC_INIT_DEFAULT;
  rtccInit.enable                = true;
  rtccInit.debugRun              = false;
  rtccInit.precntWrapOnCCV0      = false;
  rtccInit.cntWrapOnCCV1         = false;
  rtccInit.prescMode             = rtccCntTickPresc;
  rtccInit.presc                 = rtccCntPresc_1;
  RTCC_Init(&rtccInit);

#if defined(_EMU_CMD_EM01VSCALE0_MASK)
  // Set up EM0, EM1 energy mode configuration
  EMU_EM01Init_TypeDef em01Init = EMU_EM01INIT_DEFAULT;
  EMU_EM01Init(&em01Init);
#endif // _EMU_CMD_EM01VSCALE0_MASK

#if defined(_EMU_CTRL_EM23VSCALE_MASK)
  // Set up EM2, EM3 energy mode configuration
  EMU_EM23Init_TypeDef em23init = EMU_EM23INIT_DEFAULT;
  em23init.vScaleEM23Voltage = emuVScaleEM23_LowPower;
  EMU_EM23Init(&em23init);
#endif //_EMU_CTRL_EM23VSCALE_MASK

#if defined(RMU_PRESENT)
  // Set reset mode for sysreset back to DEFAULT (extended), this might have
  // been changed by the bootloader to FULL reset.
  RMU->CTRL = (RMU->CTRL & ~_RMU_CTRL_SYSRMODE_MASK) | RMU_CTRL_SYSRMODE_DEFAULT;
#endif

{% if dumbo_arch|isarchcompatible(context["ARCHITECTURE_ID"]) %}
  TEMPDRV_Init();
{% endif %}
}

static void initMcu_clocks(void)
{
// Initialize HFXO
  // Use BSP_CLK_HFXO_INIT as last result (4th)
  CMU_HFXOInit_TypeDef hfxoInit = BSP_CLK_HFXO_INIT;
  // if Factory Cal exists in DEVINFO then use it above all (1st)
#if defined(DEVINFO_MODULEINFO_CRYSTALOSCCALVAL) && defined(DEVINFO_MODULEINFO_HFXOCALVAL_MASK)
  if (0 == (DEVINFO->MODULEINFO & DEVINFO_MODULEINFO_HFXOCALVAL_MASK)) {
    hfxoInit.ctuneSteadyState = DEVINFO_MODULEINFO_CRYSTALOSCCALVAL
        & DEVINFO_HFXOCTUNE_MASK;
  }
#endif
  // if User page has CTUNE from studio use that in 2nd place
#if defined(MFG_CTUNE_ADDR) && (MFG_CTUNE_EN == 1)
#if defined(DEVINFO_MODULEINFO_CRYSTALOSCCALVAL) && defined(DEVINFO_MODULEINFO_HFXOCALVAL_MASK)
  else
#endif
  if (MFG_CTUNE_VAL != 0xFFFF) {
    hfxoInit.ctuneXoAna =  MFG_CTUNE_VAL;
    hfxoInit.ctuneXiAna =  MFG_CTUNE_VAL;
  }
#endif
  // 3rd option, get data from header defined for product/board
#if (defined(MFG_CTUNE_ADDR) && (MFG_CTUNE_EN == 1)) || (defined(DEVINFO_MODULEINFO_CRYSTALOSCCALVAL) && defined(DEVINFO_MODULEINFO_HFXOCALVAL_MASK))
   else {
#endif
#if defined(BSP_CLK_HFXO_CTUNE) && BSP_CLK_HFXO_CTUNE >= 0
    hfxoInit.ctuneXoAna = BSP_CLK_HFXO_CTUNE;
    hfxoInit.ctuneXiAna = BSP_CLK_HFXO_CTUNE;
#endif
#if (defined(MFG_CTUNE_ADDR) && (MFG_CTUNE_EN == 1)) || (defined(DEVINFO_MODULEINFO_CRYSTALOSCCALVAL) && defined(DEVINFO_MODULEINFO_HFXOCALVAL_MASK))
  }
#endif
  CMU_HFXOInit(&hfxoInit);

  CMU_ClockSelectSet(cmuClock_SYSCLK, cmuSelect_HFXO);
  
  // Set system HFXO frequency
  SystemHFXOClockSet(BSP_CLK_HFXO_FREQ);

  // Enable HFXO oscillator, and wait for it to be stable
  CMU_OscillatorEnable(cmuOsc_HFXO, true, true);

  // HFRCO not needed when using HFXO
  CMU_OscillatorEnable(cmuOsc_HFRCODPLL, false, false);

{% if "LFXO" in features %}

  // Initialize LFXO
  CMU_LFXOInit_TypeDef lfxoInit = BSP_CLK_LFXO_INIT;
  CMU_LFXOInit(&lfxoInit);

  // Set system LFXO frequency
  SystemLFXOClockSet(BSP_CLK_LFXO_FREQ);

  // Select LFXO as low frequency clock source
  CMU_ClockSelectSet(cmuClock_RTCC, cmuSelect_LFXO);
  CMU_ClockSelectSet(cmuClock_EM23GRPACLK, cmuSelect_LFXO);
  CMU_ClockSelectSet(cmuClock_EM4GRPACLK, cmuSelect_LFXO);
  CMU_ClockSelectSet(cmuClock_WDOG0, cmuSelect_LFXO);
  CMU_ClockSelectSet(cmuClock_WDOG1, cmuSelect_LFXO);
{% endif %}
}
