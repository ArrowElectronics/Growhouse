


#ifndef GECKO_BGAPI_H
#define GECKO_BGAPI_H
#define VERSION no_link_tables

/*****************************************************************************
 *
 *  Gecko BGAPI
 *
 *  Autogenerated file, do not edit
 *

 ****************************************************************************/

#include <stdarg.h>
#include "apitypes.h"
 
#ifdef __cplusplus
extern "C" {
#endif


/* Compatibility */
#ifndef PACKSTRUCT
/*Default packed configuration*/
#ifdef __GNUC__
#ifdef _WIN32
#define PACKSTRUCT( decl ) decl __attribute__((__packed__,gcc_struct))
#else
#define PACKSTRUCT( decl ) decl __attribute__((__packed__))
#endif
#define ALIGNED __attribute__((aligned(0x4)))
#elif __IAR_SYSTEMS_ICC__

#define PACKSTRUCT( decl ) __packed decl

#define ALIGNED
#elif _MSC_VER  /*msvc*/

#define PACKSTRUCT( decl ) __pragma( pack(push, 1) ) decl __pragma( pack(pop) )
#define ALIGNED
#else 
#define PACKSTRUCT(a) a PACKED 
#endif
#endif






typedef void (*gecko_cmd_handler)(const void*);
struct gecko_header
{
    uint8  type_hilen;
    uint8  lolen;
    uint8  cls;
    uint8  command;
};

struct gecko_msg
{
    struct gecko_header    hdr;
    gecko_cmd_handler       handler;
};       

extern void (*bglib_output)(uint8 len1,uint8* data1,uint16 len2,uint8* data2,uint8 type2);



enum le_gap_address_type
{
    le_gap_address_type_public                                   = 0x0,
    le_gap_address_type_random                                   = 0x1,
    le_gap_address_type_public_identity                          = 0x2,
    le_gap_address_type_random_identity                          = 0x3
};

enum le_gap_phy_type
{
    le_gap_phy_1m                                                = 0x1,
    le_gap_phy_2m                                                = 0x2,
    le_gap_phy_coded                                             = 0x4
};

enum le_gap_connectable_mode
{
    le_gap_non_connectable                                       = 0x0,
    le_gap_directed_connectable                                  = 0x1,
    le_gap_undirected_connectable                                = 0x2,
    le_gap_connectable_scannable                                 = 0x2,
    le_gap_scannable_non_connectable                             = 0x3,
    le_gap_connectable_non_scannable                             = 0x4
};

enum le_gap_discoverable_mode
{
    le_gap_non_discoverable                                      = 0x0,
    le_gap_limited_discoverable                                  = 0x1,
    le_gap_general_discoverable                                  = 0x2,
    le_gap_broadcast                                             = 0x3,
    le_gap_user_data                                             = 0x4
};

enum le_gap_discover_mode
{
    le_gap_discover_limited                                      = 0x0,
    le_gap_discover_generic                                      = 0x1,
    le_gap_discover_observation                                  = 0x2
};

enum le_gap_adv_address_type
{
    le_gap_identity_address                                      = 0x0,
    le_gap_non_resolvable                                        = 0x1
};

enum le_connection_security
{
    le_connection_mode1_level1                                   = 0x0,
    le_connection_mode1_level2                                   = 0x1,
    le_connection_mode1_level3                                   = 0x2,
    le_connection_mode1_level4                                   = 0x3
};

enum gatt_att_opcode
{
    gatt_read_by_type_request                                    = 0x8,
    gatt_read_by_type_response                                   = 0x9,
    gatt_read_request                                            = 0xa,
    gatt_read_response                                           = 0xb,
    gatt_read_blob_request                                       = 0xc,
    gatt_read_blob_response                                      = 0xd,
    gatt_read_multiple_request                                   = 0xe,
    gatt_read_multiple_response                                  = 0xf,
    gatt_write_request                                           = 0x12,
    gatt_write_response                                          = 0x13,
    gatt_write_command                                           = 0x52,
    gatt_prepare_write_request                                   = 0x16,
    gatt_prepare_write_response                                  = 0x17,
    gatt_execute_write_request                                   = 0x18,
    gatt_execute_write_response                                  = 0x19,
    gatt_handle_value_notification                               = 0x1b,
    gatt_handle_value_indication                                 = 0x1d
};

enum gatt_client_config_flag
{
    gatt_disable                                                 = 0x0,
    gatt_notification                                            = 0x1,
    gatt_indication                                              = 0x2
};

enum gatt_execute_write_flag
{
    gatt_cancel                                                  = 0x0,
    gatt_commit                                                  = 0x1
};

enum gatt_server_characteristic_status_flag
{
    gatt_server_client_config                                    = 0x1,
    gatt_server_confirmation                                     = 0x2
};


enum test_packet_type
{
    test_pkt_prbs9                                               = 0x0,
    test_pkt_11110000                                            = 0x1,
    test_pkt_10101010                                            = 0x2,
    test_pkt_carrier_deprecated                                  = 0x3,
    test_pkt_11111111                                            = 0x4,
    test_pkt_00000000                                            = 0x5,
    test_pkt_00001111                                            = 0x6,
    test_pkt_01010101                                            = 0x7,
    test_pkt_pn9                                                 = 0xfd,
    test_pkt_carrier                                             = 0xfe
};

enum test_phy
{
    test_phy_1m                                                  = 0x1,
    test_phy_2m                                                  = 0x2,
    test_phy_125k                                                = 0x3,
    test_phy_500k                                                = 0x4
};

enum sm_bonding_key
{
    sm_bonding_key_ltk                                           = 0x1,
    sm_bonding_key_addr_public                                   = 0x2,
    sm_bonding_key_addr_static                                   = 0x4,
    sm_bonding_key_irk                                           = 0x8,
    sm_bonding_key_edivrand                                      = 0x10,
    sm_bonding_key_csrk                                          = 0x20,
    sm_bonding_key_masterid                                      = 0x40
};

enum sm_io_capability
{
    sm_io_capability_displayonly                                 = 0x0,
    sm_io_capability_displayyesno                                = 0x1,
    sm_io_capability_keyboardonly                                = 0x2,
    sm_io_capability_noinputnooutput                             = 0x3,
    sm_io_capability_keyboarddisplay                             = 0x4
};

enum homekit_category
{
    homekit_not_allowed                                          = 0x0,
    homekit_other                                                = 0x1,
    homekit_bridge                                               = 0x2,
    homekit_fan                                                  = 0x3,
    homekit_garage                                               = 0x4,
    homekit_lightbulb                                            = 0x5,
    homekit_doorlock                                             = 0x6,
    homekit_outlet                                               = 0x7,
    homekit_switch_accessory                                     = 0x8,
    homekit_thermostat                                           = 0x9,
    homekit_sensor                                               = 0xa,
    homekit_security_system                                      = 0xb,
    homekit_door                                                 = 0xc,
    homekit_window                                               = 0xd,
    homekit_window_covering                                      = 0xe,
    homekit_programmable_switch                                  = 0xf,
    homekit_ip_camera                                            = 0x11,
    homekit_video_door_bell                                      = 0x12,
    homekit_air_purifier                                         = 0x13,
    homekit_heater                                               = 0x14,
    homekit_air_conditioner                                      = 0x15,
    homekit_humidifier                                           = 0x16,
    homekit_dehumidifier                                         = 0x17,
    homekit_sprinkler                                            = 0x1c,
    homekit_faucet                                               = 0x1d,
    homekit_shower_system                                        = 0x1e
};

enum homekit_status_code
{
    homekit_success                                              = 0x0,
    homekit_invalid_request                                      = 0x6
};

enum mesh_node_config_state
{
    mesh_node_dcd                                                = 0x8008,
    mesh_node_beacon                                             = 0x8009,
    mesh_node_default_ttl                                        = 0x800c,
    mesh_node_friendship                                         = 0x800f,
    mesh_node_gatt_proxy                                         = 0x8012,
    mesh_node_key_refresh                                        = 0x8015,
    mesh_node_relay                                              = 0x8023,
    mesh_node_identity                                           = 0x8042
};


enum mesh_debug_key_type
{
    mesh_debug_net                                               = 0x0,
    mesh_debug_app                                               = 0x1,
    mesh_debug_dev                                               = 0x2
};




enum coex_option
{
    coex_option_enable                                           = 0x100,
    coex_option_tx_abort                                         = 0x400,
    coex_option_high_priority                                    = 0x800
};

enum gecko_parameter_types
{
    gecko_msg_parameter_uint8=2,
    gecko_msg_parameter_int8=3,
    gecko_msg_parameter_uint16=4,
    gecko_msg_parameter_int16=5,
    gecko_msg_parameter_uint32=6,
    gecko_msg_parameter_int32=7,
    gecko_msg_parameter_uint8array=8,
    gecko_msg_parameter_string=9,
    gecko_msg_parameter_hwaddr=10,
    gecko_msg_parameter_uint16array=11
};

enum gecko_msg_types
{
    gecko_msg_type_cmd=0x00,
    gecko_msg_type_rsp=0x00,
    gecko_msg_type_evt=0x80
};
enum gecko_dev_types
{
    gecko_dev_type_gecko   =0x20
};




#ifndef FLASH_PS_KEY_LOCAL_BD_ADDR                                  
#define FLASH_PS_KEY_LOCAL_BD_ADDR                                   0x2c
#endif

#ifndef FLASH_PS_KEY_TX_POWER                                       
#define FLASH_PS_KEY_TX_POWER                                        0x31
#endif

#ifndef FLASH_PS_KEY_CTUNE                                          
#define FLASH_PS_KEY_CTUNE                                           0x32
#endif

#ifndef FLASH_PS_KEY_APPLICATION_GSN                                
#define FLASH_PS_KEY_APPLICATION_GSN                                 0x33
#endif

#ifndef FLASH_PS_KEY_CTUNE_LAST                                     
#define FLASH_PS_KEY_CTUNE_LAST                                      0x34
#endif

#ifndef FLASH_PS_KEY_OTA_FLAGS                                      
#define FLASH_PS_KEY_OTA_FLAGS                                       0x35
#endif

#ifndef FLASH_PS_KEY_OTA_DEVICE_NAME                                
#define FLASH_PS_KEY_OTA_DEVICE_NAME                                 0x36
#endif

#ifndef FLASH_PS_KEY_DEVICE_IRK                                     
#define FLASH_PS_KEY_DEVICE_IRK                                      0x37
#endif

#ifndef FLASH_PS_KEY_BONDING_PRIORITY_LIST                          
#define FLASH_PS_KEY_BONDING_PRIORITY_LIST                           0x38
#endif

#ifndef FLASH_PS_KEY_OTA_ADVERTISEMENT_PACKET                       
#define FLASH_PS_KEY_OTA_ADVERTISEMENT_PACKET                        0x39
#endif

#ifndef FLASH_PS_KEY_OTA_SCAN_RESPONSE_PACKET                       
#define FLASH_PS_KEY_OTA_SCAN_RESPONSE_PACKET                        0x3a
#endif

#ifndef FLASH_PS_KEY_APPLICATION_AI                                 
#define FLASH_PS_KEY_APPLICATION_AI                                  0x3b
#endif

#ifndef FLASH_PS_KEY_IDENTITY_ADDR_TYPE                             
#define FLASH_PS_KEY_IDENTITY_ADDR_TYPE                              0x3c
#endif

#ifndef FLASH_PS_KEY_BONDING_DB_CONFIG                              
#define FLASH_PS_KEY_BONDING_DB_CONFIG                               0x3fff
#endif

#ifndef MESH_PROV_OOB_OTHER                                         
#define MESH_PROV_OOB_OTHER                                          0x1
#endif

#ifndef MESH_PROV_OOB_URI                                           
#define MESH_PROV_OOB_URI                                            0x2
#endif

#ifndef MESH_PROV_OOB_2D_MR_CODE                                    
#define MESH_PROV_OOB_2D_MR_CODE                                     0x4
#endif

#ifndef MESH_PROV_OOB_BAR_CODE                                      
#define MESH_PROV_OOB_BAR_CODE                                       0x8
#endif

#ifndef MESH_PROV_OOB_NFC                                           
#define MESH_PROV_OOB_NFC                                            0x10
#endif

#ifndef MESH_PROV_OOB_NUMBER                                        
#define MESH_PROV_OOB_NUMBER                                         0x20
#endif

#ifndef MESH_PROV_OOB_STRING                                        
#define MESH_PROV_OOB_STRING                                         0x40
#endif

#ifndef MESH_PROV_OOB_RFU_7                                         
#define MESH_PROV_OOB_RFU_7                                          0x80
#endif

#ifndef MESH_PROV_OOB_RFU_8                                         
#define MESH_PROV_OOB_RFU_8                                          0x100
#endif

#ifndef MESH_PROV_OOB_RFU_9                                         
#define MESH_PROV_OOB_RFU_9                                          0x200
#endif

#ifndef MESH_PROV_OOB_RFU_A                                         
#define MESH_PROV_OOB_RFU_A                                          0x400
#endif

#ifndef MESH_PROV_OOB_LOC_ON_BOX                                    
#define MESH_PROV_OOB_LOC_ON_BOX                                     0x800
#endif

#ifndef MESH_PROV_OOB_LOC_IN_BOX                                    
#define MESH_PROV_OOB_LOC_IN_BOX                                     0x1000
#endif

#ifndef MESH_PROV_OOB_LOC_PAPER                                     
#define MESH_PROV_OOB_LOC_PAPER                                      0x2000
#endif

#ifndef MESH_PROV_OOB_LOC_MANUAL                                    
#define MESH_PROV_OOB_LOC_MANUAL                                     0x4000
#endif

#ifndef MESH_PROV_OOB_LOC_DEVICE                                    
#define MESH_PROV_OOB_LOC_DEVICE                                     0x8000
#endif

#ifndef MESH_PROV_OOB_RFU_MASK                                      
#define MESH_PROV_OOB_RFU_MASK                                       0x780
#endif

#ifndef MESH_DEBUG_FLAG_OLD                                         
#define MESH_DEBUG_FLAG_OLD                                          0x1
#endif

#ifndef MESH_GENERIC_CLIENT_STATE_ON_OFF                            
#define MESH_GENERIC_CLIENT_STATE_ON_OFF                             0x0
#endif

#ifndef MESH_GENERIC_CLIENT_STATE_ON_POWER_UP                       
#define MESH_GENERIC_CLIENT_STATE_ON_POWER_UP                        0x1
#endif

#ifndef MESH_GENERIC_CLIENT_STATE_LEVEL                             
#define MESH_GENERIC_CLIENT_STATE_LEVEL                              0x2
#endif

#ifndef MESH_GENERIC_CLIENT_STATE_POWER_LEVEL                       
#define MESH_GENERIC_CLIENT_STATE_POWER_LEVEL                        0x3
#endif

#ifndef MESH_GENERIC_CLIENT_STATE_POWER_LEVEL_LAST                  
#define MESH_GENERIC_CLIENT_STATE_POWER_LEVEL_LAST                   0x4
#endif

#ifndef MESH_GENERIC_CLIENT_STATE_POWER_LEVEL_DEFAULT               
#define MESH_GENERIC_CLIENT_STATE_POWER_LEVEL_DEFAULT                0x5
#endif

#ifndef MESH_GENERIC_CLIENT_STATE_POWER_LEVEL_RANGE                 
#define MESH_GENERIC_CLIENT_STATE_POWER_LEVEL_RANGE                  0x6
#endif

#ifndef MESH_GENERIC_CLIENT_STATE_TRANSITION_TIME                   
#define MESH_GENERIC_CLIENT_STATE_TRANSITION_TIME                    0x6
#endif

#ifndef MESH_GENERIC_CLIENT_STATE_BATTERY                           
#define MESH_GENERIC_CLIENT_STATE_BATTERY                            0x8
#endif

#ifndef MESH_GENERIC_CLIENT_STATE_LOCATION_GLOBAL                   
#define MESH_GENERIC_CLIENT_STATE_LOCATION_GLOBAL                    0x9
#endif

#ifndef MESH_GENERIC_CLIENT_STATE_LOCATION_LOCAL                    
#define MESH_GENERIC_CLIENT_STATE_LOCATION_LOCAL                     0xa
#endif

#ifndef MESH_GENERIC_CLIENT_STATE_PROPERTY_USER                     
#define MESH_GENERIC_CLIENT_STATE_PROPERTY_USER                      0xb
#endif

#ifndef MESH_GENERIC_CLIENT_STATE_PROPERTY_ADMIN                    
#define MESH_GENERIC_CLIENT_STATE_PROPERTY_ADMIN                     0xc
#endif

#ifndef MESH_GENERIC_CLIENT_STATE_PROPERTY_MANUF                    
#define MESH_GENERIC_CLIENT_STATE_PROPERTY_MANUF                     0xd
#endif

#ifndef MESH_GENERIC_CLIENT_STATE_PROPERTY_LIST_USER                
#define MESH_GENERIC_CLIENT_STATE_PROPERTY_LIST_USER                 0xe
#endif

#ifndef MESH_GENERIC_CLIENT_STATE_PROPERTY_LIST_ADMIN               
#define MESH_GENERIC_CLIENT_STATE_PROPERTY_LIST_ADMIN                0xf
#endif

#ifndef MESH_GENERIC_CLIENT_STATE_PROPERTY_LIST_MANUF               
#define MESH_GENERIC_CLIENT_STATE_PROPERTY_LIST_MANUF                0x10
#endif

#ifndef MESH_GENERIC_CLIENT_STATE_PROPERTY_LIST_CLIENT              
#define MESH_GENERIC_CLIENT_STATE_PROPERTY_LIST_CLIENT               0x11
#endif

#ifndef MESH_GENERIC_CLIENT_STATE_LIGHTNESS_ACTUAL                  
#define MESH_GENERIC_CLIENT_STATE_LIGHTNESS_ACTUAL                   0x80
#endif

#ifndef MESH_GENERIC_CLIENT_STATE_LIGHTNESS_LINEAR                  
#define MESH_GENERIC_CLIENT_STATE_LIGHTNESS_LINEAR                   0x81
#endif

#ifndef MESH_GENERIC_CLIENT_STATE_LIGHTNESS_LAST                    
#define MESH_GENERIC_CLIENT_STATE_LIGHTNESS_LAST                     0x82
#endif

#ifndef MESH_GENERIC_CLIENT_STATE_LIGHTNESS_DEFAULT                 
#define MESH_GENERIC_CLIENT_STATE_LIGHTNESS_DEFAULT                  0x83
#endif

#ifndef MESH_GENERIC_CLIENT_STATE_LIGHTNESS_RANGE                   
#define MESH_GENERIC_CLIENT_STATE_LIGHTNESS_RANGE                    0x84
#endif

#ifndef MESH_GENERIC_CLIENT_REQUEST_ON_OFF                          
#define MESH_GENERIC_CLIENT_REQUEST_ON_OFF                           0x0
#endif

#ifndef MESH_GENERIC_CLIENT_REQUEST_ON_POWER_UP                     
#define MESH_GENERIC_CLIENT_REQUEST_ON_POWER_UP                      0x1
#endif

#ifndef MESH_GENERIC_CLIENT_REQUEST_LEVEL                           
#define MESH_GENERIC_CLIENT_REQUEST_LEVEL                            0x2
#endif

#ifndef MESH_GENERIC_CLIENT_REQUEST_LEVEL_DELTA                     
#define MESH_GENERIC_CLIENT_REQUEST_LEVEL_DELTA                      0x3
#endif

#ifndef MESH_GENERIC_CLIENT_REQUEST_LEVEL_MOVE                      
#define MESH_GENERIC_CLIENT_REQUEST_LEVEL_MOVE                       0x4
#endif

#ifndef MESH_GENERIC_CLIENT_REQUEST_LEVEL_HALT                      
#define MESH_GENERIC_CLIENT_REQUEST_LEVEL_HALT                       0x5
#endif

#ifndef MESH_GENERIC_CLIENT_REQUEST_POWER_LEVEL                     
#define MESH_GENERIC_CLIENT_REQUEST_POWER_LEVEL                      0x6
#endif

#ifndef MESH_GENERIC_CLIENT_REQUEST_POWER_LEVEL_DEFAULT             
#define MESH_GENERIC_CLIENT_REQUEST_POWER_LEVEL_DEFAULT              0x7
#endif

#ifndef MESH_GENERIC_CLIENT_REQUEST_POWER_LEVEL_RANGE               
#define MESH_GENERIC_CLIENT_REQUEST_POWER_LEVEL_RANGE                0x8
#endif

#ifndef MESH_GENERIC_CLIENT_REQUEST_TRANSITION_TIME                 
#define MESH_GENERIC_CLIENT_REQUEST_TRANSITION_TIME                  0x9
#endif

#ifndef MESH_GENERIC_CLIENT_REQUEST_LOCATION_GLOBAL                 
#define MESH_GENERIC_CLIENT_REQUEST_LOCATION_GLOBAL                  0xa
#endif

#ifndef MESH_GENERIC_CLIENT_REQUEST_LOCATION_LOCAL                  
#define MESH_GENERIC_CLIENT_REQUEST_LOCATION_LOCAL                   0xb
#endif

#ifndef MESH_GENERIC_CLIENT_REQUEST_PROPERTY_USER                   
#define MESH_GENERIC_CLIENT_REQUEST_PROPERTY_USER                    0xc
#endif

#ifndef MESH_GENERIC_CLIENT_REQUEST_PROPERTY_ADMIN                  
#define MESH_GENERIC_CLIENT_REQUEST_PROPERTY_ADMIN                   0xd
#endif

#ifndef MESH_GENERIC_CLIENT_REQUEST_PROPERTY_MANUF                  
#define MESH_GENERIC_CLIENT_REQUEST_PROPERTY_MANUF                   0xe
#endif

#ifndef MESH_GENERIC_CLIENT_REQUEST_LIGHTNESS_ACTUAL                
#define MESH_GENERIC_CLIENT_REQUEST_LIGHTNESS_ACTUAL                 0x80
#endif

#ifndef MESH_GENERIC_CLIENT_REQUEST_LIGHTNESS_LINEAR                
#define MESH_GENERIC_CLIENT_REQUEST_LIGHTNESS_LINEAR                 0x81
#endif

#ifndef MESH_GENERIC_CLIENT_REQUEST_LIGHTNESS_DEFAULT               
#define MESH_GENERIC_CLIENT_REQUEST_LIGHTNESS_DEFAULT                0x82
#endif

#ifndef MESH_GENERIC_CLIENT_REQUEST_LIGHTNESS_RANGE                 
#define MESH_GENERIC_CLIENT_REQUEST_LIGHTNESS_RANGE                  0x83
#endif

enum gecko_classes
{

    gecko_cls_dfu=0x0,
    gecko_cls_system=0x1,
    gecko_cls_le_gap=0x3,
    gecko_cls_le_connection=0x8,
    gecko_cls_gatt=0x9,
    gecko_cls_gatt_server=0xa,
    gecko_cls_endpoint=0xb,
    gecko_cls_hardware=0xc,
    gecko_cls_flash=0xd,
    gecko_cls_test=0xe,
    gecko_cls_sm=0xf,
    gecko_cls_homekit=0x13,
    gecko_cls_mesh_node=0x14,
    gecko_cls_mesh_prov=0x15,
    gecko_cls_mesh_debug=0x16,
    gecko_cls_proxy_radio=0x17,
    gecko_cls_mesh_proxy=0x18,
    gecko_cls_mesh_vendor_model=0x19,
    gecko_cls_mesh_health_client=0x1a,
    gecko_cls_mesh_health_server=0x1b,
    gecko_cls_mesh_srtest_client=0x1c,
    gecko_cls_mesh_srtest_server=0x1d,
    gecko_cls_mesh_generic_client=0x1e,
    gecko_cls_mesh_generic_server=0x1f,
    gecko_cls_coex=0x20,
    gecko_cls_mesh_test=0x22,
    gecko_cls_mesh_lpn=0x23,
    gecko_cls_mesh_friend=0x24,
    gecko_cls_mesh_proxy_client=0x25,
    gecko_cls_mesh_proxy_server=0x26,
    gecko_cls_user=0xff,
};

enum gecko_command_ids
{
    gecko_cmd_dfu_reset_id=0,
    gecko_cmd_dfu_flash_set_address_id=1,
    gecko_cmd_dfu_flash_upload_id=2,
    gecko_cmd_dfu_flash_upload_finish_id=3,
    gecko_cmd_system_hello_id=0,
    gecko_cmd_system_reset_id=1,
    gecko_cmd_system_get_bt_address_id=3,
    gecko_cmd_system_set_bt_address_id=4,
    gecko_cmd_system_set_tx_power_id=10,
    gecko_cmd_system_get_random_data_id=11,
    gecko_cmd_system_halt_id=12,
    gecko_cmd_system_set_device_name_id=13,
    gecko_cmd_system_linklayer_configure_id=14,
    gecko_cmd_system_get_counters_id=15,
    gecko_cmd_le_gap_open_id=0,
    gecko_cmd_le_gap_set_mode_id=1,
    gecko_cmd_le_gap_discover_id=2,
    gecko_cmd_le_gap_end_procedure_id=3,
    gecko_cmd_le_gap_set_adv_parameters_id=4,
    gecko_cmd_le_gap_set_conn_parameters_id=5,
    gecko_cmd_le_gap_set_scan_parameters_id=6,
    gecko_cmd_le_gap_set_adv_data_id=7,
    gecko_cmd_le_gap_set_adv_timeout_id=8,
    gecko_cmd_le_gap_set_phy_id=9,
    gecko_cmd_le_gap_bt5_set_mode_id=10,
    gecko_cmd_le_gap_bt5_set_adv_parameters_id=11,
    gecko_cmd_le_gap_bt5_set_adv_data_id=12,
    gecko_cmd_le_gap_set_privacy_mode_id=13,
    gecko_cmd_le_gap_set_advertise_timing_id=14,
    gecko_cmd_le_gap_set_advertise_channel_map_id=15,
    gecko_cmd_le_gap_set_advertise_report_scan_request_id=16,
    gecko_cmd_le_gap_set_advertise_phy_id=17,
    gecko_cmd_le_gap_set_advertise_configuration_id=18,
    gecko_cmd_le_gap_clear_advertise_configuration_id=19,
    gecko_cmd_le_gap_start_advertising_id=20,
    gecko_cmd_le_gap_stop_advertising_id=21,
    gecko_cmd_le_gap_set_discovery_timing_id=22,
    gecko_cmd_le_gap_set_discovery_type_id=23,
    gecko_cmd_le_gap_start_discovery_id=24,
    gecko_cmd_le_gap_set_data_channel_classification_id=25,
    gecko_cmd_le_gap_connect_id=26,
    gecko_cmd_le_gap_set_advertise_tx_power_id=27,
    gecko_cmd_le_connection_set_parameters_id=0,
    gecko_cmd_le_connection_get_rssi_id=1,
    gecko_cmd_le_connection_disable_slave_latency_id=2,
    gecko_cmd_le_connection_set_phy_id=3,
    gecko_cmd_le_connection_close_id=4,
    gecko_cmd_gatt_set_max_mtu_id=0,
    gecko_cmd_gatt_discover_primary_services_id=1,
    gecko_cmd_gatt_discover_primary_services_by_uuid_id=2,
    gecko_cmd_gatt_discover_characteristics_id=3,
    gecko_cmd_gatt_discover_characteristics_by_uuid_id=4,
    gecko_cmd_gatt_set_characteristic_notification_id=5,
    gecko_cmd_gatt_discover_descriptors_id=6,
    gecko_cmd_gatt_read_characteristic_value_id=7,
    gecko_cmd_gatt_read_characteristic_value_by_uuid_id=8,
    gecko_cmd_gatt_write_characteristic_value_id=9,
    gecko_cmd_gatt_write_characteristic_value_without_response_id=10,
    gecko_cmd_gatt_prepare_characteristic_value_write_id=11,
    gecko_cmd_gatt_execute_characteristic_value_write_id=12,
    gecko_cmd_gatt_send_characteristic_confirmation_id=13,
    gecko_cmd_gatt_read_descriptor_value_id=14,
    gecko_cmd_gatt_write_descriptor_value_id=15,
    gecko_cmd_gatt_find_included_services_id=16,
    gecko_cmd_gatt_read_multiple_characteristic_values_id=17,
    gecko_cmd_gatt_read_characteristic_value_from_offset_id=18,
    gecko_cmd_gatt_prepare_characteristic_value_reliable_write_id=19,
    gecko_cmd_gatt_server_read_attribute_value_id=0,
    gecko_cmd_gatt_server_read_attribute_type_id=1,
    gecko_cmd_gatt_server_write_attribute_value_id=2,
    gecko_cmd_gatt_server_send_user_read_response_id=3,
    gecko_cmd_gatt_server_send_user_write_response_id=4,
    gecko_cmd_gatt_server_send_characteristic_notification_id=5,
    gecko_cmd_gatt_server_find_attribute_id=6,
    gecko_cmd_gatt_server_set_database_id=7,
    gecko_cmd_gatt_server_set_capabilities_id=8,
    gecko_cmd_endpoint_close_id=2,
    gecko_cmd_hardware_set_soft_timer_id=0,
    gecko_cmd_hardware_get_time_id=11,
    gecko_cmd_hardware_set_lazy_soft_timer_id=12,
    gecko_cmd_hardware_enable_dcdc_id=13,
    gecko_cmd_flash_ps_erase_all_id=1,
    gecko_cmd_flash_ps_save_id=2,
    gecko_cmd_flash_ps_load_id=3,
    gecko_cmd_flash_ps_erase_id=4,
    gecko_cmd_test_dtm_tx_id=0,
    gecko_cmd_test_dtm_rx_id=1,
    gecko_cmd_test_dtm_end_id=2,
    gecko_cmd_test_debug_command_id=7,
    gecko_cmd_test_debug_counter_id=12,
    gecko_cmd_sm_set_bondable_mode_id=0,
    gecko_cmd_sm_configure_id=1,
    gecko_cmd_sm_store_bonding_configuration_id=2,
    gecko_cmd_sm_increase_security_id=4,
    gecko_cmd_sm_delete_bonding_id=6,
    gecko_cmd_sm_delete_bondings_id=7,
    gecko_cmd_sm_enter_passkey_id=8,
    gecko_cmd_sm_passkey_confirm_id=9,
    gecko_cmd_sm_set_oob_data_id=10,
    gecko_cmd_sm_list_all_bondings_id=11,
    gecko_cmd_sm_bonding_confirm_id=14,
    gecko_cmd_sm_set_debug_mode_id=15,
    gecko_cmd_sm_set_passkey_id=16,
    gecko_cmd_sm_use_sc_oob_id=17,
    gecko_cmd_sm_set_sc_remote_oob_data_id=18,
    gecko_cmd_homekit_configure_id=0,
    gecko_cmd_homekit_advertise_id=1,
    gecko_cmd_homekit_delete_pairings_id=2,
    gecko_cmd_homekit_check_authcp_id=3,
    gecko_cmd_homekit_get_pairing_id_id=4,
    gecko_cmd_homekit_send_write_response_id=5,
    gecko_cmd_homekit_send_read_response_id=6,
    gecko_cmd_homekit_gsn_action_id=7,
    gecko_cmd_homekit_event_notification_id=8,
    gecko_cmd_homekit_broadcast_action_id=9,
    gecko_cmd_mesh_node_init_id=0,
    gecko_cmd_mesh_node_start_unprov_beaconing_id=1,
    gecko_cmd_mesh_node_input_oob_request_rsp_id=2,
    gecko_cmd_mesh_node_get_uuid_id=3,
    gecko_cmd_mesh_node_set_provisioning_data_id=4,
    gecko_cmd_mesh_node_init_oob_id=5,
    gecko_cmd_mesh_node_set_ivrecovery_mode_id=6,
    gecko_cmd_mesh_node_get_ivrecovery_mode_id=7,
    gecko_cmd_mesh_node_set_adv_event_filter_id=8,
    gecko_cmd_mesh_node_get_statistics_id=9,
    gecko_cmd_mesh_node_clear_statistics_id=10,
    gecko_cmd_mesh_node_set_net_relay_delay_id=11,
    gecko_cmd_mesh_node_get_net_relay_delay_id=12,
    gecko_cmd_mesh_node_get_ivupdate_state_id=13,
    gecko_cmd_mesh_node_request_ivupdate_id=14,
    gecko_cmd_mesh_node_get_seq_remaining_id=15,
    gecko_cmd_mesh_node_save_replay_protection_list_id=16,
    gecko_cmd_mesh_node_set_uuid_id=17,
    gecko_cmd_mesh_node_get_element_address_id=18,
    gecko_cmd_mesh_node_static_oob_request_rsp_id=19,
    gecko_cmd_mesh_prov_init_id=0,
    gecko_cmd_mesh_prov_scan_unprov_beacons_id=1,
    gecko_cmd_mesh_prov_provision_device_id=2,
    gecko_cmd_mesh_prov_create_network_id=3,
    gecko_cmd_mesh_prov_get_dcd_id=4,
    gecko_cmd_mesh_prov_get_config_id=5,
    gecko_cmd_mesh_prov_set_config_id=6,
    gecko_cmd_mesh_prov_create_appkey_id=7,
    gecko_cmd_mesh_prov_oob_pkey_rsp_id=8,
    gecko_cmd_mesh_prov_oob_auth_rsp_id=9,
    gecko_cmd_mesh_prov_set_oob_requirements_id=10,
    gecko_cmd_mesh_prov_key_refresh_start_id=11,
    gecko_cmd_mesh_prov_get_key_refresh_blacklist_id=12,
    gecko_cmd_mesh_prov_set_key_refresh_blacklist_id=13,
    gecko_cmd_mesh_prov_appkey_add_id=14,
    gecko_cmd_mesh_prov_appkey_delete_id=15,
    gecko_cmd_mesh_prov_model_app_bind_id=16,
    gecko_cmd_mesh_prov_model_app_unbind_id=17,
    gecko_cmd_mesh_prov_model_app_get_id=18,
    gecko_cmd_mesh_prov_model_sub_add_id=19,
    gecko_cmd_mesh_prov_model_pub_set_id=20,
    gecko_cmd_mesh_prov_provision_gatt_device_id=21,
    gecko_cmd_mesh_prov_ddb_get_id=22,
    gecko_cmd_mesh_prov_ddb_delete_id=23,
    gecko_cmd_mesh_prov_ddb_add_id=24,
    gecko_cmd_mesh_prov_ddb_list_devices_id=25,
    gecko_cmd_mesh_prov_network_add_id=26,
    gecko_cmd_mesh_prov_network_delete_id=27,
    gecko_cmd_mesh_prov_nettx_get_id=28,
    gecko_cmd_mesh_prov_nettx_set_id=29,
    gecko_cmd_mesh_prov_model_sub_del_id=30,
    gecko_cmd_mesh_prov_model_sub_add_va_id=31,
    gecko_cmd_mesh_prov_model_sub_del_va_id=32,
    gecko_cmd_mesh_prov_model_sub_set_id=33,
    gecko_cmd_mesh_prov_model_sub_set_va_id=34,
    gecko_cmd_mesh_prov_heartbeat_publication_get_id=35,
    gecko_cmd_mesh_prov_heartbeat_publication_set_id=36,
    gecko_cmd_mesh_prov_heartbeat_subscription_get_id=37,
    gecko_cmd_mesh_prov_heartbeat_subscription_set_id=38,
    gecko_cmd_mesh_prov_relay_get_id=39,
    gecko_cmd_mesh_prov_relay_set_id=40,
    gecko_cmd_mesh_prov_reset_node_id=41,
    gecko_cmd_mesh_prov_appkey_get_id=42,
    gecko_cmd_mesh_prov_network_get_id=43,
    gecko_cmd_mesh_prov_model_sub_clear_id=44,
    gecko_cmd_mesh_prov_model_pub_get_id=45,
    gecko_cmd_mesh_prov_model_pub_set_va_id=46,
    gecko_cmd_mesh_prov_model_pub_set_cred_id=47,
    gecko_cmd_mesh_prov_model_pub_set_va_cred_id=48,
    gecko_cmd_mesh_prov_model_sub_get_id=49,
    gecko_cmd_mesh_prov_friend_timeout_get_id=50,
    gecko_cmd_mesh_debug_dump_keys_id=0,
    gecko_cmd_mesh_debug_prov_dump_database_id=3,
    gecko_cmd_mesh_debug_prov_load_database_entries_id=4,
    gecko_cmd_mesh_debug_set_mask_id=6,
    gecko_cmd_mesh_debug_set_kludges_id=13,
    gecko_cmd_mesh_debug_rssi_limit_set_id=25,
    gecko_cmd_mesh_debug_add_va_id=27,
    gecko_cmd_mesh_debug_unref_va_id=28,
    gecko_cmd_mesh_debug_dump_va_id=29,
    gecko_cmd_mesh_debug_set_white_list_item_id=32,
    gecko_cmd_mesh_debug_set_white_list_active_id=33,
    gecko_cmd_mesh_debug_node_set_static_oob_data_id=34,
    gecko_cmd_mesh_debug_node_set_oob_eckey_id=35,
    gecko_cmd_mesh_debug_node_get_oob_eckey_id=36,
    gecko_cmd_mesh_debug_node_get_static_oob_data_id=37,
    gecko_cmd_mesh_debug_network_trace_config_id=38,
    gecko_cmd_mesh_debug_network_update_id=41,
    gecko_cmd_mesh_debug_appkey_update_id=42,
    gecko_cmd_mesh_debug_proxy_listen_id=46,
    gecko_cmd_mesh_debug_set_scan_id=47,
    gecko_cmd_mesh_debug_node_set_oob_uri_id=48,
    gecko_cmd_mesh_debug_node_get_oob_uri_id=49,
    gecko_cmd_mesh_debug_node_init_cfgcl_id=50,
    gecko_cmd_mesh_debug_key_refresh_start_noauto_id=51,
    gecko_cmd_mesh_debug_key_refresh_next_phase_id=52,
    gecko_cmd_mesh_debug_net_send_id=53,
    gecko_cmd_proxy_radio_proxy_send_adv_id=0,
    gecko_cmd_proxy_radio_child_adv_req_done_id=1,
    gecko_cmd_proxy_radio_child_adv_data_id=2,
    gecko_cmd_proxy_radio_get_ms_ticks_id=3,
    gecko_cmd_proxy_radio_test_timer_id=4,
    gecko_cmd_mesh_proxy_connect_id=0,
    gecko_cmd_mesh_proxy_disconnect_id=1,
    gecko_cmd_mesh_proxy_set_filter_type_id=2,
    gecko_cmd_mesh_proxy_allow_id=3,
    gecko_cmd_mesh_proxy_deny_id=4,
    gecko_cmd_mesh_vendor_model_send_id=0,
    gecko_cmd_mesh_vendor_model_set_publication_id=1,
    gecko_cmd_mesh_vendor_model_clear_publication_id=2,
    gecko_cmd_mesh_vendor_model_publish_id=3,
    gecko_cmd_mesh_vendor_model_init_id=4,
    gecko_cmd_mesh_vendor_model_deinit_id=5,
    gecko_cmd_mesh_health_client_get_id=0,
    gecko_cmd_mesh_health_client_clear_id=1,
    gecko_cmd_mesh_health_client_test_id=2,
    gecko_cmd_mesh_health_client_get_period_id=3,
    gecko_cmd_mesh_health_client_set_period_id=4,
    gecko_cmd_mesh_health_client_get_attention_id=5,
    gecko_cmd_mesh_health_client_set_attention_id=6,
    gecko_cmd_mesh_health_server_set_fault_id=0,
    gecko_cmd_mesh_health_server_clear_fault_id=1,
    gecko_cmd_mesh_health_server_test_response_id=2,
    gecko_cmd_mesh_srtest_client_init_id=0,
    gecko_cmd_mesh_srtest_client_deinit_id=1,
    gecko_cmd_mesh_srtest_client_run_id=2,
    gecko_cmd_mesh_srtest_client_stop_id=3,
    gecko_cmd_mesh_srtest_client_status_id=4,
    gecko_cmd_mesh_srtest_client_statistics_id=5,
    gecko_cmd_mesh_srtest_server_init_id=0,
    gecko_cmd_mesh_srtest_server_deinit_id=1,
    gecko_cmd_mesh_srtest_server_statistics_id=2,
    gecko_cmd_mesh_generic_client_get_id=0,
    gecko_cmd_mesh_generic_client_set_id=1,
    gecko_cmd_mesh_generic_client_publish_id=2,
    gecko_cmd_mesh_generic_client_get_params_id=3,
    gecko_cmd_mesh_generic_client_init_id=4,
    gecko_cmd_mesh_generic_server_response_id=0,
    gecko_cmd_mesh_generic_server_update_id=1,
    gecko_cmd_mesh_generic_server_publish_id=2,
    gecko_cmd_mesh_generic_server_init_id=4,
    gecko_cmd_coex_set_options_id=0,
    gecko_cmd_coex_get_counters_id=1,
    gecko_cmd_mesh_test_get_nettx_id=0,
    gecko_cmd_mesh_test_set_nettx_id=1,
    gecko_cmd_mesh_test_get_relay_id=2,
    gecko_cmd_mesh_test_set_relay_id=3,
    gecko_cmd_mesh_test_set_adv_scan_params_id=4,
    gecko_cmd_mesh_test_set_ivupdate_test_mode_id=5,
    gecko_cmd_mesh_test_get_ivupdate_test_mode_id=6,
    gecko_cmd_mesh_test_set_segment_send_delay_id=7,
    gecko_cmd_mesh_test_set_ivupdate_state_id=8,
    gecko_cmd_mesh_test_send_beacons_id=9,
    gecko_cmd_mesh_test_bind_local_model_app_id=10,
    gecko_cmd_mesh_test_unbind_local_model_app_id=11,
    gecko_cmd_mesh_test_add_local_model_sub_id=12,
    gecko_cmd_mesh_test_del_local_model_sub_id=13,
    gecko_cmd_mesh_test_add_local_model_sub_va_id=14,
    gecko_cmd_mesh_test_del_local_model_sub_va_id=15,
    gecko_cmd_mesh_test_get_local_model_sub_id=16,
    gecko_cmd_mesh_test_set_local_model_pub_id=17,
    gecko_cmd_mesh_test_set_local_model_pub_va_id=18,
    gecko_cmd_mesh_test_get_local_model_pub_id=19,
    gecko_cmd_mesh_test_set_local_heartbeat_subscription_id=20,
    gecko_cmd_mesh_test_get_local_heartbeat_subscription_id=21,
    gecko_cmd_mesh_test_get_local_heartbeat_publication_id=22,
    gecko_cmd_mesh_test_set_local_heartbeat_publication_id=23,
    gecko_cmd_mesh_test_set_local_config_id=24,
    gecko_cmd_mesh_test_get_local_config_id=25,
    gecko_cmd_mesh_test_add_local_key_id=26,
    gecko_cmd_mesh_test_del_local_key_id=27,
    gecko_cmd_mesh_test_update_local_key_id=28,
    gecko_cmd_mesh_test_set_sar_config_id=29,
    gecko_cmd_mesh_test_get_element_seqnum_id=30,
    gecko_cmd_mesh_lpn_init_id=0,
    gecko_cmd_mesh_lpn_deinit_id=1,
    gecko_cmd_mesh_lpn_configure_id=2,
    gecko_cmd_mesh_lpn_establish_friendship_id=3,
    gecko_cmd_mesh_lpn_poll_id=4,
    gecko_cmd_mesh_lpn_terminate_friendship_id=5,
    gecko_cmd_mesh_friend_init_id=0,
    gecko_cmd_mesh_friend_deinit_id=1,
    gecko_cmd_user_message_to_target_id=0,
};

enum gecko_response_ids
{
    gecko_rsp_dfu_flash_set_address_id=1,
    gecko_rsp_dfu_flash_upload_id=2,
    gecko_rsp_dfu_flash_upload_finish_id=3,
    gecko_rsp_system_hello_id=0,
    gecko_rsp_system_get_bt_address_id=3,
    gecko_rsp_system_set_bt_address_id=4,
    gecko_rsp_system_set_tx_power_id=10,
    gecko_rsp_system_get_random_data_id=11,
    gecko_rsp_system_halt_id=12,
    gecko_rsp_system_set_device_name_id=13,
    gecko_rsp_system_linklayer_configure_id=14,
    gecko_rsp_system_get_counters_id=15,
    gecko_rsp_le_gap_open_id=0,
    gecko_rsp_le_gap_set_mode_id=1,
    gecko_rsp_le_gap_discover_id=2,
    gecko_rsp_le_gap_end_procedure_id=3,
    gecko_rsp_le_gap_set_adv_parameters_id=4,
    gecko_rsp_le_gap_set_conn_parameters_id=5,
    gecko_rsp_le_gap_set_scan_parameters_id=6,
    gecko_rsp_le_gap_set_adv_data_id=7,
    gecko_rsp_le_gap_set_adv_timeout_id=8,
    gecko_rsp_le_gap_set_phy_id=9,
    gecko_rsp_le_gap_bt5_set_mode_id=10,
    gecko_rsp_le_gap_bt5_set_adv_parameters_id=11,
    gecko_rsp_le_gap_bt5_set_adv_data_id=12,
    gecko_rsp_le_gap_set_privacy_mode_id=13,
    gecko_rsp_le_gap_set_advertise_timing_id=14,
    gecko_rsp_le_gap_set_advertise_channel_map_id=15,
    gecko_rsp_le_gap_set_advertise_report_scan_request_id=16,
    gecko_rsp_le_gap_set_advertise_phy_id=17,
    gecko_rsp_le_gap_set_advertise_configuration_id=18,
    gecko_rsp_le_gap_clear_advertise_configuration_id=19,
    gecko_rsp_le_gap_start_advertising_id=20,
    gecko_rsp_le_gap_stop_advertising_id=21,
    gecko_rsp_le_gap_set_discovery_timing_id=22,
    gecko_rsp_le_gap_set_discovery_type_id=23,
    gecko_rsp_le_gap_start_discovery_id=24,
    gecko_rsp_le_gap_set_data_channel_classification_id=25,
    gecko_rsp_le_gap_connect_id=26,
    gecko_rsp_le_gap_set_advertise_tx_power_id=27,
    gecko_rsp_le_connection_set_parameters_id=0,
    gecko_rsp_le_connection_get_rssi_id=1,
    gecko_rsp_le_connection_disable_slave_latency_id=2,
    gecko_rsp_le_connection_set_phy_id=3,
    gecko_rsp_le_connection_close_id=4,
    gecko_rsp_gatt_set_max_mtu_id=0,
    gecko_rsp_gatt_discover_primary_services_id=1,
    gecko_rsp_gatt_discover_primary_services_by_uuid_id=2,
    gecko_rsp_gatt_discover_characteristics_id=3,
    gecko_rsp_gatt_discover_characteristics_by_uuid_id=4,
    gecko_rsp_gatt_set_characteristic_notification_id=5,
    gecko_rsp_gatt_discover_descriptors_id=6,
    gecko_rsp_gatt_read_characteristic_value_id=7,
    gecko_rsp_gatt_read_characteristic_value_by_uuid_id=8,
    gecko_rsp_gatt_write_characteristic_value_id=9,
    gecko_rsp_gatt_write_characteristic_value_without_response_id=10,
    gecko_rsp_gatt_prepare_characteristic_value_write_id=11,
    gecko_rsp_gatt_execute_characteristic_value_write_id=12,
    gecko_rsp_gatt_send_characteristic_confirmation_id=13,
    gecko_rsp_gatt_read_descriptor_value_id=14,
    gecko_rsp_gatt_write_descriptor_value_id=15,
    gecko_rsp_gatt_find_included_services_id=16,
    gecko_rsp_gatt_read_multiple_characteristic_values_id=17,
    gecko_rsp_gatt_read_characteristic_value_from_offset_id=18,
    gecko_rsp_gatt_prepare_characteristic_value_reliable_write_id=19,
    gecko_rsp_gatt_server_read_attribute_value_id=0,
    gecko_rsp_gatt_server_read_attribute_type_id=1,
    gecko_rsp_gatt_server_write_attribute_value_id=2,
    gecko_rsp_gatt_server_send_user_read_response_id=3,
    gecko_rsp_gatt_server_send_user_write_response_id=4,
    gecko_rsp_gatt_server_send_characteristic_notification_id=5,
    gecko_rsp_gatt_server_find_attribute_id=6,
    gecko_rsp_gatt_server_set_database_id=7,
    gecko_rsp_gatt_server_set_capabilities_id=8,
    gecko_rsp_endpoint_close_id=2,
    gecko_rsp_hardware_set_soft_timer_id=0,
    gecko_rsp_hardware_get_time_id=11,
    gecko_rsp_hardware_set_lazy_soft_timer_id=12,
    gecko_rsp_hardware_enable_dcdc_id=13,
    gecko_rsp_flash_ps_erase_all_id=1,
    gecko_rsp_flash_ps_save_id=2,
    gecko_rsp_flash_ps_load_id=3,
    gecko_rsp_flash_ps_erase_id=4,
    gecko_rsp_test_dtm_tx_id=0,
    gecko_rsp_test_dtm_rx_id=1,
    gecko_rsp_test_dtm_end_id=2,
    gecko_rsp_test_debug_command_id=7,
    gecko_rsp_test_debug_counter_id=12,
    gecko_rsp_sm_set_bondable_mode_id=0,
    gecko_rsp_sm_configure_id=1,
    gecko_rsp_sm_store_bonding_configuration_id=2,
    gecko_rsp_sm_increase_security_id=4,
    gecko_rsp_sm_delete_bonding_id=6,
    gecko_rsp_sm_delete_bondings_id=7,
    gecko_rsp_sm_enter_passkey_id=8,
    gecko_rsp_sm_passkey_confirm_id=9,
    gecko_rsp_sm_set_oob_data_id=10,
    gecko_rsp_sm_list_all_bondings_id=11,
    gecko_rsp_sm_bonding_confirm_id=14,
    gecko_rsp_sm_set_debug_mode_id=15,
    gecko_rsp_sm_set_passkey_id=16,
    gecko_rsp_sm_use_sc_oob_id=17,
    gecko_rsp_sm_set_sc_remote_oob_data_id=18,
    gecko_rsp_homekit_configure_id=0,
    gecko_rsp_homekit_advertise_id=1,
    gecko_rsp_homekit_delete_pairings_id=2,
    gecko_rsp_homekit_check_authcp_id=3,
    gecko_rsp_homekit_get_pairing_id_id=4,
    gecko_rsp_homekit_send_write_response_id=5,
    gecko_rsp_homekit_send_read_response_id=6,
    gecko_rsp_homekit_gsn_action_id=7,
    gecko_rsp_homekit_event_notification_id=8,
    gecko_rsp_homekit_broadcast_action_id=9,
    gecko_rsp_mesh_node_init_id=0,
    gecko_rsp_mesh_node_start_unprov_beaconing_id=1,
    gecko_rsp_mesh_node_input_oob_request_rsp_id=2,
    gecko_rsp_mesh_node_get_uuid_id=3,
    gecko_rsp_mesh_node_set_provisioning_data_id=4,
    gecko_rsp_mesh_node_init_oob_id=5,
    gecko_rsp_mesh_node_set_ivrecovery_mode_id=6,
    gecko_rsp_mesh_node_get_ivrecovery_mode_id=7,
    gecko_rsp_mesh_node_set_adv_event_filter_id=8,
    gecko_rsp_mesh_node_get_statistics_id=9,
    gecko_rsp_mesh_node_clear_statistics_id=10,
    gecko_rsp_mesh_node_set_net_relay_delay_id=11,
    gecko_rsp_mesh_node_get_net_relay_delay_id=12,
    gecko_rsp_mesh_node_get_ivupdate_state_id=13,
    gecko_rsp_mesh_node_request_ivupdate_id=14,
    gecko_rsp_mesh_node_get_seq_remaining_id=15,
    gecko_rsp_mesh_node_save_replay_protection_list_id=16,
    gecko_rsp_mesh_node_set_uuid_id=17,
    gecko_rsp_mesh_node_get_element_address_id=18,
    gecko_rsp_mesh_node_static_oob_request_rsp_id=19,
    gecko_rsp_mesh_prov_init_id=0,
    gecko_rsp_mesh_prov_scan_unprov_beacons_id=1,
    gecko_rsp_mesh_prov_provision_device_id=2,
    gecko_rsp_mesh_prov_create_network_id=3,
    gecko_rsp_mesh_prov_get_dcd_id=4,
    gecko_rsp_mesh_prov_get_config_id=5,
    gecko_rsp_mesh_prov_set_config_id=6,
    gecko_rsp_mesh_prov_create_appkey_id=7,
    gecko_rsp_mesh_prov_oob_pkey_rsp_id=8,
    gecko_rsp_mesh_prov_oob_auth_rsp_id=9,
    gecko_rsp_mesh_prov_set_oob_requirements_id=10,
    gecko_rsp_mesh_prov_key_refresh_start_id=11,
    gecko_rsp_mesh_prov_get_key_refresh_blacklist_id=12,
    gecko_rsp_mesh_prov_set_key_refresh_blacklist_id=13,
    gecko_rsp_mesh_prov_appkey_add_id=14,
    gecko_rsp_mesh_prov_appkey_delete_id=15,
    gecko_rsp_mesh_prov_model_app_bind_id=16,
    gecko_rsp_mesh_prov_model_app_unbind_id=17,
    gecko_rsp_mesh_prov_model_app_get_id=18,
    gecko_rsp_mesh_prov_model_sub_add_id=19,
    gecko_rsp_mesh_prov_model_pub_set_id=20,
    gecko_rsp_mesh_prov_provision_gatt_device_id=21,
    gecko_rsp_mesh_prov_ddb_get_id=22,
    gecko_rsp_mesh_prov_ddb_delete_id=23,
    gecko_rsp_mesh_prov_ddb_add_id=24,
    gecko_rsp_mesh_prov_ddb_list_devices_id=25,
    gecko_rsp_mesh_prov_network_add_id=26,
    gecko_rsp_mesh_prov_network_delete_id=27,
    gecko_rsp_mesh_prov_nettx_get_id=28,
    gecko_rsp_mesh_prov_nettx_set_id=29,
    gecko_rsp_mesh_prov_model_sub_del_id=30,
    gecko_rsp_mesh_prov_model_sub_add_va_id=31,
    gecko_rsp_mesh_prov_model_sub_del_va_id=32,
    gecko_rsp_mesh_prov_model_sub_set_id=33,
    gecko_rsp_mesh_prov_model_sub_set_va_id=34,
    gecko_rsp_mesh_prov_heartbeat_publication_get_id=35,
    gecko_rsp_mesh_prov_heartbeat_publication_set_id=36,
    gecko_rsp_mesh_prov_heartbeat_subscription_get_id=37,
    gecko_rsp_mesh_prov_heartbeat_subscription_set_id=38,
    gecko_rsp_mesh_prov_relay_get_id=39,
    gecko_rsp_mesh_prov_relay_set_id=40,
    gecko_rsp_mesh_prov_reset_node_id=41,
    gecko_rsp_mesh_prov_appkey_get_id=42,
    gecko_rsp_mesh_prov_network_get_id=43,
    gecko_rsp_mesh_prov_model_sub_clear_id=44,
    gecko_rsp_mesh_prov_model_pub_get_id=45,
    gecko_rsp_mesh_prov_model_pub_set_va_id=46,
    gecko_rsp_mesh_prov_model_pub_set_cred_id=47,
    gecko_rsp_mesh_prov_model_pub_set_va_cred_id=48,
    gecko_rsp_mesh_prov_model_sub_get_id=49,
    gecko_rsp_mesh_prov_friend_timeout_get_id=50,
    gecko_rsp_mesh_debug_dump_keys_id=0,
    gecko_rsp_mesh_debug_prov_dump_database_id=3,
    gecko_rsp_mesh_debug_prov_load_database_entries_id=4,
    gecko_rsp_mesh_debug_set_mask_id=6,
    gecko_rsp_mesh_debug_set_kludges_id=13,
    gecko_rsp_mesh_debug_rssi_limit_set_id=25,
    gecko_rsp_mesh_debug_add_va_id=27,
    gecko_rsp_mesh_debug_unref_va_id=28,
    gecko_rsp_mesh_debug_dump_va_id=29,
    gecko_rsp_mesh_debug_set_white_list_item_id=32,
    gecko_rsp_mesh_debug_set_white_list_active_id=33,
    gecko_rsp_mesh_debug_node_set_static_oob_data_id=34,
    gecko_rsp_mesh_debug_node_set_oob_eckey_id=35,
    gecko_rsp_mesh_debug_node_get_oob_eckey_id=36,
    gecko_rsp_mesh_debug_node_get_static_oob_data_id=37,
    gecko_rsp_mesh_debug_network_trace_config_id=38,
    gecko_rsp_mesh_debug_network_update_id=41,
    gecko_rsp_mesh_debug_appkey_update_id=42,
    gecko_rsp_mesh_debug_proxy_listen_id=46,
    gecko_rsp_mesh_debug_set_scan_id=47,
    gecko_rsp_mesh_debug_node_set_oob_uri_id=48,
    gecko_rsp_mesh_debug_node_get_oob_uri_id=49,
    gecko_rsp_mesh_debug_node_init_cfgcl_id=50,
    gecko_rsp_mesh_debug_key_refresh_start_noauto_id=51,
    gecko_rsp_mesh_debug_key_refresh_next_phase_id=52,
    gecko_rsp_mesh_debug_net_send_id=53,
    gecko_rsp_proxy_radio_proxy_send_adv_id=0,
    gecko_rsp_proxy_radio_child_adv_req_done_id=1,
    gecko_rsp_proxy_radio_child_adv_data_id=2,
    gecko_rsp_proxy_radio_get_ms_ticks_id=3,
    gecko_rsp_proxy_radio_test_timer_id=4,
    gecko_rsp_mesh_proxy_connect_id=0,
    gecko_rsp_mesh_proxy_disconnect_id=1,
    gecko_rsp_mesh_proxy_set_filter_type_id=2,
    gecko_rsp_mesh_proxy_allow_id=3,
    gecko_rsp_mesh_proxy_deny_id=4,
    gecko_rsp_mesh_vendor_model_send_id=0,
    gecko_rsp_mesh_vendor_model_set_publication_id=1,
    gecko_rsp_mesh_vendor_model_clear_publication_id=2,
    gecko_rsp_mesh_vendor_model_publish_id=3,
    gecko_rsp_mesh_vendor_model_init_id=4,
    gecko_rsp_mesh_vendor_model_deinit_id=5,
    gecko_rsp_mesh_health_client_get_id=0,
    gecko_rsp_mesh_health_client_clear_id=1,
    gecko_rsp_mesh_health_client_test_id=2,
    gecko_rsp_mesh_health_client_get_period_id=3,
    gecko_rsp_mesh_health_client_set_period_id=4,
    gecko_rsp_mesh_health_client_get_attention_id=5,
    gecko_rsp_mesh_health_client_set_attention_id=6,
    gecko_rsp_mesh_health_server_set_fault_id=0,
    gecko_rsp_mesh_health_server_clear_fault_id=1,
    gecko_rsp_mesh_health_server_test_response_id=2,
    gecko_rsp_mesh_srtest_client_init_id=0,
    gecko_rsp_mesh_srtest_client_deinit_id=1,
    gecko_rsp_mesh_srtest_client_run_id=2,
    gecko_rsp_mesh_srtest_client_stop_id=3,
    gecko_rsp_mesh_srtest_client_status_id=4,
    gecko_rsp_mesh_srtest_client_statistics_id=5,
    gecko_rsp_mesh_srtest_server_init_id=0,
    gecko_rsp_mesh_srtest_server_deinit_id=1,
    gecko_rsp_mesh_srtest_server_statistics_id=2,
    gecko_rsp_mesh_generic_client_get_id=0,
    gecko_rsp_mesh_generic_client_set_id=1,
    gecko_rsp_mesh_generic_client_publish_id=2,
    gecko_rsp_mesh_generic_client_get_params_id=3,
    gecko_rsp_mesh_generic_client_init_id=4,
    gecko_rsp_mesh_generic_server_response_id=0,
    gecko_rsp_mesh_generic_server_update_id=1,
    gecko_rsp_mesh_generic_server_publish_id=2,
    gecko_rsp_mesh_generic_server_init_id=4,
    gecko_rsp_coex_set_options_id=0,
    gecko_rsp_coex_get_counters_id=1,
    gecko_rsp_mesh_test_get_nettx_id=0,
    gecko_rsp_mesh_test_set_nettx_id=1,
    gecko_rsp_mesh_test_get_relay_id=2,
    gecko_rsp_mesh_test_set_relay_id=3,
    gecko_rsp_mesh_test_set_adv_scan_params_id=4,
    gecko_rsp_mesh_test_set_ivupdate_test_mode_id=5,
    gecko_rsp_mesh_test_get_ivupdate_test_mode_id=6,
    gecko_rsp_mesh_test_set_segment_send_delay_id=7,
    gecko_rsp_mesh_test_set_ivupdate_state_id=8,
    gecko_rsp_mesh_test_send_beacons_id=9,
    gecko_rsp_mesh_test_bind_local_model_app_id=10,
    gecko_rsp_mesh_test_unbind_local_model_app_id=11,
    gecko_rsp_mesh_test_add_local_model_sub_id=12,
    gecko_rsp_mesh_test_del_local_model_sub_id=13,
    gecko_rsp_mesh_test_add_local_model_sub_va_id=14,
    gecko_rsp_mesh_test_del_local_model_sub_va_id=15,
    gecko_rsp_mesh_test_get_local_model_sub_id=16,
    gecko_rsp_mesh_test_set_local_model_pub_id=17,
    gecko_rsp_mesh_test_set_local_model_pub_va_id=18,
    gecko_rsp_mesh_test_get_local_model_pub_id=19,
    gecko_rsp_mesh_test_set_local_heartbeat_subscription_id=20,
    gecko_rsp_mesh_test_get_local_heartbeat_subscription_id=21,
    gecko_rsp_mesh_test_get_local_heartbeat_publication_id=22,
    gecko_rsp_mesh_test_set_local_heartbeat_publication_id=23,
    gecko_rsp_mesh_test_set_local_config_id=24,
    gecko_rsp_mesh_test_get_local_config_id=25,
    gecko_rsp_mesh_test_add_local_key_id=26,
    gecko_rsp_mesh_test_del_local_key_id=27,
    gecko_rsp_mesh_test_update_local_key_id=28,
    gecko_rsp_mesh_test_set_sar_config_id=29,
    gecko_rsp_mesh_test_get_element_seqnum_id=30,
    gecko_rsp_mesh_lpn_init_id=0,
    gecko_rsp_mesh_lpn_deinit_id=1,
    gecko_rsp_mesh_lpn_configure_id=2,
    gecko_rsp_mesh_lpn_establish_friendship_id=3,
    gecko_rsp_mesh_lpn_poll_id=4,
    gecko_rsp_mesh_lpn_terminate_friendship_id=5,
    gecko_rsp_mesh_friend_init_id=0,
    gecko_rsp_mesh_friend_deinit_id=1,
    gecko_rsp_user_message_to_target_id=0,
};

enum gecko_event_ids
{
    gecko_evt_dfu_boot_id=0,
    gecko_evt_dfu_boot_failure_id=1,
    gecko_evt_system_boot_id=0,
    gecko_evt_system_external_signal_id=3,
    gecko_evt_system_awake_id=4,
    gecko_evt_system_hardware_error_id=5,
    gecko_evt_system_error_id=6,
    gecko_evt_le_gap_scan_response_id=0,
    gecko_evt_le_gap_adv_timeout_id=1,
    gecko_evt_le_gap_scan_request_id=2,
    gecko_evt_le_connection_opened_id=0,
    gecko_evt_le_connection_closed_id=1,
    gecko_evt_le_connection_parameters_id=2,
    gecko_evt_le_connection_rssi_id=3,
    gecko_evt_le_connection_phy_status_id=4,
    gecko_evt_gatt_mtu_exchanged_id=0,
    gecko_evt_gatt_service_id=1,
    gecko_evt_gatt_characteristic_id=2,
    gecko_evt_gatt_descriptor_id=3,
    gecko_evt_gatt_characteristic_value_id=4,
    gecko_evt_gatt_descriptor_value_id=5,
    gecko_evt_gatt_procedure_completed_id=6,
    gecko_evt_gatt_server_attribute_value_id=0,
    gecko_evt_gatt_server_user_read_request_id=1,
    gecko_evt_gatt_server_user_write_request_id=2,
    gecko_evt_gatt_server_characteristic_status_id=3,
    gecko_evt_gatt_server_execute_write_completed_id=4,
    gecko_evt_endpoint_status_id=2,
    gecko_evt_hardware_soft_timer_id=0,
    gecko_evt_test_dtm_completed_id=0,
    gecko_evt_test_hcidump_id=2,
    gecko_evt_sm_passkey_display_id=0,
    gecko_evt_sm_passkey_request_id=1,
    gecko_evt_sm_confirm_passkey_id=2,
    gecko_evt_sm_bonded_id=3,
    gecko_evt_sm_bonding_failed_id=4,
    gecko_evt_sm_list_bonding_entry_id=5,
    gecko_evt_sm_list_all_bondings_complete_id=6,
    gecko_evt_sm_confirm_bonding_id=9,
    gecko_evt_homekit_setupcode_display_id=0,
    gecko_evt_homekit_paired_id=1,
    gecko_evt_homekit_pair_verified_id=2,
    gecko_evt_homekit_connection_opened_id=3,
    gecko_evt_homekit_connection_closed_id=4,
    gecko_evt_homekit_identify_id=5,
    gecko_evt_homekit_write_request_id=6,
    gecko_evt_homekit_read_request_id=7,
    gecko_evt_homekit_disconnection_required_id=8,
    gecko_evt_homekit_pairing_removed_id=9,
    gecko_evt_homekit_setuppayload_display_id=10,
    gecko_evt_mesh_node_initialized_id=0,
    gecko_evt_mesh_node_provisioned_id=1,
    gecko_evt_mesh_node_config_get_id=2,
    gecko_evt_mesh_node_config_set_id=3,
    gecko_evt_mesh_node_display_output_oob_id=4,
    gecko_evt_mesh_node_input_oob_request_id=5,
    gecko_evt_mesh_node_provisioning_started_id=6,
    gecko_evt_mesh_node_provisioning_failed_id=7,
    gecko_evt_mesh_node_key_added_id=8,
    gecko_evt_mesh_node_model_config_changed_id=9,
    gecko_evt_mesh_node_reset_id=10,
    gecko_evt_mesh_node_ivrecovery_needed_id=11,
    gecko_evt_mesh_node_changed_ivupdate_state_id=12,
    gecko_evt_mesh_node_static_oob_request_id=13,
    gecko_evt_mesh_prov_initialized_id=0,
    gecko_evt_mesh_prov_provisioning_failed_id=1,
    gecko_evt_mesh_prov_device_provisioned_id=2,
    gecko_evt_mesh_prov_unprov_beacon_id=3,
    gecko_evt_mesh_prov_dcd_status_id=4,
    gecko_evt_mesh_prov_config_status_id=5,
    gecko_evt_mesh_prov_oob_pkey_request_id=6,
    gecko_evt_mesh_prov_oob_auth_request_id=7,
    gecko_evt_mesh_prov_oob_display_input_id=8,
    gecko_evt_mesh_prov_ddb_list_id=9,
    gecko_evt_mesh_prov_heartbeat_publication_status_id=10,
    gecko_evt_mesh_prov_heartbeat_subscription_status_id=11,
    gecko_evt_mesh_prov_relay_status_id=12,
    gecko_evt_mesh_prov_uri_id=13,
    gecko_evt_mesh_prov_node_reset_id=14,
    gecko_evt_mesh_prov_appkey_list_id=15,
    gecko_evt_mesh_prov_appkey_list_end_id=16,
    gecko_evt_mesh_prov_network_list_id=17,
    gecko_evt_mesh_prov_network_list_end_id=18,
    gecko_evt_mesh_prov_model_pub_status_id=19,
    gecko_evt_mesh_prov_key_refresh_phase_update_id=20,
    gecko_evt_mesh_prov_key_refresh_node_update_id=21,
    gecko_evt_mesh_prov_key_refresh_complete_id=22,
    gecko_evt_mesh_prov_model_sub_addr_id=23,
    gecko_evt_mesh_prov_model_sub_addr_end_id=24,
    gecko_evt_mesh_prov_friend_timeout_status_id=25,
    gecko_evt_mesh_debug_key_id=0,
    gecko_evt_mesh_debug_keys_end_id=1,
    gecko_evt_mesh_debug_msg_id=2,
    gecko_evt_mesh_debug_prov_database_entry_id=3,
    gecko_evt_mesh_debug_prov_database_entries_end_id=4,
    gecko_evt_mesh_debug_va_id=11,
    gecko_evt_mesh_debug_va_end_id=12,
    gecko_evt_mesh_debug_network_trace_pdu_id=13,
    gecko_evt_mesh_debug_network_trace_access_payload_id=14,
    gecko_evt_mesh_debug_network_status_id=15,
    gecko_evt_mesh_debug_appkey_status_id=16,
    gecko_evt_mesh_debug_transport_rx_cancelled_id=17,
    gecko_evt_proxy_radio_proxy_send_adv_done_id=0,
    gecko_evt_proxy_radio_proxy_adv_data_id=1,
    gecko_evt_proxy_radio_child_adv_req_id=2,
    gecko_evt_proxy_radio_child_adv_params_req_id=3,
    gecko_evt_proxy_radio_test_timer_expired_id=4,
    gecko_evt_mesh_proxy_connected_id=0,
    gecko_evt_mesh_proxy_disconnected_id=1,
    gecko_evt_mesh_proxy_filter_status_id=2,
    gecko_evt_mesh_vendor_model_receive_id=0,
    gecko_evt_mesh_health_client_server_status_id=0,
    gecko_evt_mesh_health_client_server_status_period_id=1,
    gecko_evt_mesh_health_client_server_status_attention_id=2,
    gecko_evt_mesh_health_server_attention_id=0,
    gecko_evt_mesh_health_server_test_request_id=1,
    gecko_evt_mesh_srtest_client_server_status_id=0,
    gecko_evt_mesh_srtest_client_payload_received_id=1,
    gecko_evt_mesh_srtest_server_state_changed_id=0,
    gecko_evt_mesh_srtest_server_run_started_id=1,
    gecko_evt_mesh_srtest_server_run_ended_id=2,
    gecko_evt_mesh_srtest_server_statistics_dump_id=3,
    gecko_evt_mesh_srtest_server_payload_sent_id=4,
    gecko_evt_mesh_generic_client_server_status_id=0,
    gecko_evt_mesh_generic_server_client_request_id=0,
    gecko_evt_mesh_generic_server_state_changed_id=1,
    gecko_evt_mesh_test_local_heartbeat_subscription_complete_id=0,
    gecko_evt_mesh_lpn_friendship_established_id=0,
    gecko_evt_mesh_lpn_friendship_failed_id=1,
    gecko_evt_mesh_lpn_friendship_terminated_id=2,
    gecko_evt_mesh_friend_friendship_established_id=0,
    gecko_evt_mesh_friend_friendship_terminated_id=1,
    gecko_evt_user_message_to_host_id=0,
};

enum gecko_msg_idx
{

    gecko_cmd_dfu_reset_idx=0,
    gecko_cmd_dfu_flash_set_address_idx=1,
    gecko_cmd_dfu_flash_upload_idx=2,
    gecko_cmd_dfu_flash_upload_finish_idx=3,
    gecko_cmd_system_hello_idx=4,
    gecko_cmd_system_reset_idx=5,
    gecko_cmd_system_get_bt_address_idx=6,
    gecko_cmd_system_set_bt_address_idx=7,
    gecko_cmd_system_set_tx_power_idx=8,
    gecko_cmd_system_get_random_data_idx=9,
    gecko_cmd_system_halt_idx=10,
    gecko_cmd_system_set_device_name_idx=11,
    gecko_cmd_system_linklayer_configure_idx=12,
    gecko_cmd_system_get_counters_idx=13,
    gecko_cmd_le_gap_open_idx=14,
    gecko_cmd_le_gap_set_mode_idx=15,
    gecko_cmd_le_gap_discover_idx=16,
    gecko_cmd_le_gap_end_procedure_idx=17,
    gecko_cmd_le_gap_set_adv_parameters_idx=18,
    gecko_cmd_le_gap_set_conn_parameters_idx=19,
    gecko_cmd_le_gap_set_scan_parameters_idx=20,
    gecko_cmd_le_gap_set_adv_data_idx=21,
    gecko_cmd_le_gap_set_adv_timeout_idx=22,
    gecko_cmd_le_gap_set_phy_idx=23,
    gecko_cmd_le_gap_bt5_set_mode_idx=24,
    gecko_cmd_le_gap_bt5_set_adv_parameters_idx=25,
    gecko_cmd_le_gap_bt5_set_adv_data_idx=26,
    gecko_cmd_le_gap_set_privacy_mode_idx=27,
    gecko_cmd_le_gap_set_advertise_timing_idx=28,
    gecko_cmd_le_gap_set_advertise_channel_map_idx=29,
    gecko_cmd_le_gap_set_advertise_report_scan_request_idx=30,
    gecko_cmd_le_gap_set_advertise_phy_idx=31,
    gecko_cmd_le_gap_set_advertise_configuration_idx=32,
    gecko_cmd_le_gap_clear_advertise_configuration_idx=33,
    gecko_cmd_le_gap_start_advertising_idx=34,
    gecko_cmd_le_gap_stop_advertising_idx=35,
    gecko_cmd_le_gap_set_discovery_timing_idx=36,
    gecko_cmd_le_gap_set_discovery_type_idx=37,
    gecko_cmd_le_gap_start_discovery_idx=38,
    gecko_cmd_le_gap_set_data_channel_classification_idx=39,
    gecko_cmd_le_gap_connect_idx=40,
    gecko_cmd_le_gap_set_advertise_tx_power_idx=41,
    gecko_cmd_le_connection_set_parameters_idx=42,
    gecko_cmd_le_connection_get_rssi_idx=43,
    gecko_cmd_le_connection_disable_slave_latency_idx=44,
    gecko_cmd_le_connection_set_phy_idx=45,
    gecko_cmd_le_connection_close_idx=46,
    gecko_cmd_gatt_set_max_mtu_idx=47,
    gecko_cmd_gatt_discover_primary_services_idx=48,
    gecko_cmd_gatt_discover_primary_services_by_uuid_idx=49,
    gecko_cmd_gatt_discover_characteristics_idx=50,
    gecko_cmd_gatt_discover_characteristics_by_uuid_idx=51,
    gecko_cmd_gatt_set_characteristic_notification_idx=52,
    gecko_cmd_gatt_discover_descriptors_idx=53,
    gecko_cmd_gatt_read_characteristic_value_idx=54,
    gecko_cmd_gatt_read_characteristic_value_by_uuid_idx=55,
    gecko_cmd_gatt_write_characteristic_value_idx=56,
    gecko_cmd_gatt_write_characteristic_value_without_response_idx=57,
    gecko_cmd_gatt_prepare_characteristic_value_write_idx=58,
    gecko_cmd_gatt_execute_characteristic_value_write_idx=59,
    gecko_cmd_gatt_send_characteristic_confirmation_idx=60,
    gecko_cmd_gatt_read_descriptor_value_idx=61,
    gecko_cmd_gatt_write_descriptor_value_idx=62,
    gecko_cmd_gatt_find_included_services_idx=63,
    gecko_cmd_gatt_read_multiple_characteristic_values_idx=64,
    gecko_cmd_gatt_read_characteristic_value_from_offset_idx=65,
    gecko_cmd_gatt_prepare_characteristic_value_reliable_write_idx=66,
    gecko_cmd_gatt_server_read_attribute_value_idx=67,
    gecko_cmd_gatt_server_read_attribute_type_idx=68,
    gecko_cmd_gatt_server_write_attribute_value_idx=69,
    gecko_cmd_gatt_server_send_user_read_response_idx=70,
    gecko_cmd_gatt_server_send_user_write_response_idx=71,
    gecko_cmd_gatt_server_send_characteristic_notification_idx=72,
    gecko_cmd_gatt_server_find_attribute_idx=73,
    gecko_cmd_gatt_server_set_database_idx=74,
    gecko_cmd_gatt_server_set_capabilities_idx=75,
    gecko_cmd_endpoint_close_idx=76,
    gecko_cmd_hardware_set_soft_timer_idx=77,
    gecko_cmd_hardware_get_time_idx=78,
    gecko_cmd_hardware_set_lazy_soft_timer_idx=79,
    gecko_cmd_hardware_enable_dcdc_idx=80,
    gecko_cmd_flash_ps_erase_all_idx=81,
    gecko_cmd_flash_ps_save_idx=82,
    gecko_cmd_flash_ps_load_idx=83,
    gecko_cmd_flash_ps_erase_idx=84,
    gecko_cmd_test_dtm_tx_idx=85,
    gecko_cmd_test_dtm_rx_idx=86,
    gecko_cmd_test_dtm_end_idx=87,
    gecko_cmd_test_debug_command_idx=88,
    gecko_cmd_test_debug_counter_idx=89,
    gecko_cmd_sm_set_bondable_mode_idx=90,
    gecko_cmd_sm_configure_idx=91,
    gecko_cmd_sm_store_bonding_configuration_idx=92,
    gecko_cmd_sm_increase_security_idx=93,
    gecko_cmd_sm_delete_bonding_idx=94,
    gecko_cmd_sm_delete_bondings_idx=95,
    gecko_cmd_sm_enter_passkey_idx=96,
    gecko_cmd_sm_passkey_confirm_idx=97,
    gecko_cmd_sm_set_oob_data_idx=98,
    gecko_cmd_sm_list_all_bondings_idx=99,
    gecko_cmd_sm_bonding_confirm_idx=100,
    gecko_cmd_sm_set_debug_mode_idx=101,
    gecko_cmd_sm_set_passkey_idx=102,
    gecko_cmd_sm_use_sc_oob_idx=103,
    gecko_cmd_sm_set_sc_remote_oob_data_idx=104,
    gecko_cmd_homekit_configure_idx=105,
    gecko_cmd_homekit_advertise_idx=106,
    gecko_cmd_homekit_delete_pairings_idx=107,
    gecko_cmd_homekit_check_authcp_idx=108,
    gecko_cmd_homekit_get_pairing_id_idx=109,
    gecko_cmd_homekit_send_write_response_idx=110,
    gecko_cmd_homekit_send_read_response_idx=111,
    gecko_cmd_homekit_gsn_action_idx=112,
    gecko_cmd_homekit_event_notification_idx=113,
    gecko_cmd_homekit_broadcast_action_idx=114,
    gecko_cmd_mesh_node_init_idx=115,
    gecko_cmd_mesh_node_start_unprov_beaconing_idx=116,
    gecko_cmd_mesh_node_input_oob_request_rsp_idx=117,
    gecko_cmd_mesh_node_get_uuid_idx=118,
    gecko_cmd_mesh_node_set_provisioning_data_idx=119,
    gecko_cmd_mesh_node_init_oob_idx=120,
    gecko_cmd_mesh_node_set_ivrecovery_mode_idx=121,
    gecko_cmd_mesh_node_get_ivrecovery_mode_idx=122,
    gecko_cmd_mesh_node_set_adv_event_filter_idx=123,
    gecko_cmd_mesh_node_get_statistics_idx=124,
    gecko_cmd_mesh_node_clear_statistics_idx=125,
    gecko_cmd_mesh_node_set_net_relay_delay_idx=126,
    gecko_cmd_mesh_node_get_net_relay_delay_idx=127,
    gecko_cmd_mesh_node_get_ivupdate_state_idx=128,
    gecko_cmd_mesh_node_request_ivupdate_idx=129,
    gecko_cmd_mesh_node_get_seq_remaining_idx=130,
    gecko_cmd_mesh_node_save_replay_protection_list_idx=131,
    gecko_cmd_mesh_node_set_uuid_idx=132,
    gecko_cmd_mesh_node_get_element_address_idx=133,
    gecko_cmd_mesh_node_static_oob_request_rsp_idx=134,
    gecko_cmd_mesh_prov_init_idx=135,
    gecko_cmd_mesh_prov_scan_unprov_beacons_idx=136,
    gecko_cmd_mesh_prov_provision_device_idx=137,
    gecko_cmd_mesh_prov_create_network_idx=138,
    gecko_cmd_mesh_prov_get_dcd_idx=139,
    gecko_cmd_mesh_prov_get_config_idx=140,
    gecko_cmd_mesh_prov_set_config_idx=141,
    gecko_cmd_mesh_prov_create_appkey_idx=142,
    gecko_cmd_mesh_prov_oob_pkey_rsp_idx=143,
    gecko_cmd_mesh_prov_oob_auth_rsp_idx=144,
    gecko_cmd_mesh_prov_set_oob_requirements_idx=145,
    gecko_cmd_mesh_prov_key_refresh_start_idx=146,
    gecko_cmd_mesh_prov_get_key_refresh_blacklist_idx=147,
    gecko_cmd_mesh_prov_set_key_refresh_blacklist_idx=148,
    gecko_cmd_mesh_prov_appkey_add_idx=149,
    gecko_cmd_mesh_prov_appkey_delete_idx=150,
    gecko_cmd_mesh_prov_model_app_bind_idx=151,
    gecko_cmd_mesh_prov_model_app_unbind_idx=152,
    gecko_cmd_mesh_prov_model_app_get_idx=153,
    gecko_cmd_mesh_prov_model_sub_add_idx=154,
    gecko_cmd_mesh_prov_model_pub_set_idx=155,
    gecko_cmd_mesh_prov_provision_gatt_device_idx=156,
    gecko_cmd_mesh_prov_ddb_get_idx=157,
    gecko_cmd_mesh_prov_ddb_delete_idx=158,
    gecko_cmd_mesh_prov_ddb_add_idx=159,
    gecko_cmd_mesh_prov_ddb_list_devices_idx=160,
    gecko_cmd_mesh_prov_network_add_idx=161,
    gecko_cmd_mesh_prov_network_delete_idx=162,
    gecko_cmd_mesh_prov_nettx_get_idx=163,
    gecko_cmd_mesh_prov_nettx_set_idx=164,
    gecko_cmd_mesh_prov_model_sub_del_idx=165,
    gecko_cmd_mesh_prov_model_sub_add_va_idx=166,
    gecko_cmd_mesh_prov_model_sub_del_va_idx=167,
    gecko_cmd_mesh_prov_model_sub_set_idx=168,
    gecko_cmd_mesh_prov_model_sub_set_va_idx=169,
    gecko_cmd_mesh_prov_heartbeat_publication_get_idx=170,
    gecko_cmd_mesh_prov_heartbeat_publication_set_idx=171,
    gecko_cmd_mesh_prov_heartbeat_subscription_get_idx=172,
    gecko_cmd_mesh_prov_heartbeat_subscription_set_idx=173,
    gecko_cmd_mesh_prov_relay_get_idx=174,
    gecko_cmd_mesh_prov_relay_set_idx=175,
    gecko_cmd_mesh_prov_reset_node_idx=176,
    gecko_cmd_mesh_prov_appkey_get_idx=177,
    gecko_cmd_mesh_prov_network_get_idx=178,
    gecko_cmd_mesh_prov_model_sub_clear_idx=179,
    gecko_cmd_mesh_prov_model_pub_get_idx=180,
    gecko_cmd_mesh_prov_model_pub_set_va_idx=181,
    gecko_cmd_mesh_prov_model_pub_set_cred_idx=182,
    gecko_cmd_mesh_prov_model_pub_set_va_cred_idx=183,
    gecko_cmd_mesh_prov_model_sub_get_idx=184,
    gecko_cmd_mesh_prov_friend_timeout_get_idx=185,
    gecko_cmd_mesh_debug_dump_keys_idx=186,
    gecko_cmd_mesh_debug_prov_dump_database_idx=187,
    gecko_cmd_mesh_debug_prov_load_database_entries_idx=188,
    gecko_cmd_mesh_debug_set_mask_idx=189,
    gecko_cmd_mesh_debug_set_kludges_idx=190,
    gecko_cmd_mesh_debug_rssi_limit_set_idx=191,
    gecko_cmd_mesh_debug_add_va_idx=192,
    gecko_cmd_mesh_debug_unref_va_idx=193,
    gecko_cmd_mesh_debug_dump_va_idx=194,
    gecko_cmd_mesh_debug_set_white_list_item_idx=195,
    gecko_cmd_mesh_debug_set_white_list_active_idx=196,
    gecko_cmd_mesh_debug_node_set_static_oob_data_idx=197,
    gecko_cmd_mesh_debug_node_set_oob_eckey_idx=198,
    gecko_cmd_mesh_debug_node_get_oob_eckey_idx=199,
    gecko_cmd_mesh_debug_node_get_static_oob_data_idx=200,
    gecko_cmd_mesh_debug_network_trace_config_idx=201,
    gecko_cmd_mesh_debug_network_update_idx=202,
    gecko_cmd_mesh_debug_appkey_update_idx=203,
    gecko_cmd_mesh_debug_proxy_listen_idx=204,
    gecko_cmd_mesh_debug_set_scan_idx=205,
    gecko_cmd_mesh_debug_node_set_oob_uri_idx=206,
    gecko_cmd_mesh_debug_node_get_oob_uri_idx=207,
    gecko_cmd_mesh_debug_node_init_cfgcl_idx=208,
    gecko_cmd_mesh_debug_key_refresh_start_noauto_idx=209,
    gecko_cmd_mesh_debug_key_refresh_next_phase_idx=210,
    gecko_cmd_mesh_debug_net_send_idx=211,
    gecko_cmd_proxy_radio_proxy_send_adv_idx=212,
    gecko_cmd_proxy_radio_child_adv_req_done_idx=213,
    gecko_cmd_proxy_radio_child_adv_data_idx=214,
    gecko_cmd_proxy_radio_get_ms_ticks_idx=215,
    gecko_cmd_proxy_radio_test_timer_idx=216,
    gecko_cmd_mesh_proxy_connect_idx=217,
    gecko_cmd_mesh_proxy_disconnect_idx=218,
    gecko_cmd_mesh_proxy_set_filter_type_idx=219,
    gecko_cmd_mesh_proxy_allow_idx=220,
    gecko_cmd_mesh_proxy_deny_idx=221,
    gecko_cmd_mesh_vendor_model_send_idx=222,
    gecko_cmd_mesh_vendor_model_set_publication_idx=223,
    gecko_cmd_mesh_vendor_model_clear_publication_idx=224,
    gecko_cmd_mesh_vendor_model_publish_idx=225,
    gecko_cmd_mesh_vendor_model_init_idx=226,
    gecko_cmd_mesh_vendor_model_deinit_idx=227,
    gecko_cmd_mesh_health_client_get_idx=228,
    gecko_cmd_mesh_health_client_clear_idx=229,
    gecko_cmd_mesh_health_client_test_idx=230,
    gecko_cmd_mesh_health_client_get_period_idx=231,
    gecko_cmd_mesh_health_client_set_period_idx=232,
    gecko_cmd_mesh_health_client_get_attention_idx=233,
    gecko_cmd_mesh_health_client_set_attention_idx=234,
    gecko_cmd_mesh_health_server_set_fault_idx=235,
    gecko_cmd_mesh_health_server_clear_fault_idx=236,
    gecko_cmd_mesh_health_server_test_response_idx=237,
    gecko_cmd_mesh_srtest_client_init_idx=238,
    gecko_cmd_mesh_srtest_client_deinit_idx=239,
    gecko_cmd_mesh_srtest_client_run_idx=240,
    gecko_cmd_mesh_srtest_client_stop_idx=241,
    gecko_cmd_mesh_srtest_client_status_idx=242,
    gecko_cmd_mesh_srtest_client_statistics_idx=243,
    gecko_cmd_mesh_srtest_server_init_idx=244,
    gecko_cmd_mesh_srtest_server_deinit_idx=245,
    gecko_cmd_mesh_srtest_server_statistics_idx=246,
    gecko_cmd_mesh_generic_client_get_idx=247,
    gecko_cmd_mesh_generic_client_set_idx=248,
    gecko_cmd_mesh_generic_client_publish_idx=249,
    gecko_cmd_mesh_generic_client_get_params_idx=250,
    gecko_cmd_mesh_generic_client_init_idx=251,
    gecko_cmd_mesh_generic_server_response_idx=252,
    gecko_cmd_mesh_generic_server_update_idx=253,
    gecko_cmd_mesh_generic_server_publish_idx=254,
    gecko_cmd_mesh_generic_server_init_idx=255,
    gecko_cmd_coex_set_options_idx=256,
    gecko_cmd_coex_get_counters_idx=257,
    gecko_cmd_mesh_test_get_nettx_idx=258,
    gecko_cmd_mesh_test_set_nettx_idx=259,
    gecko_cmd_mesh_test_get_relay_idx=260,
    gecko_cmd_mesh_test_set_relay_idx=261,
    gecko_cmd_mesh_test_set_adv_scan_params_idx=262,
    gecko_cmd_mesh_test_set_ivupdate_test_mode_idx=263,
    gecko_cmd_mesh_test_get_ivupdate_test_mode_idx=264,
    gecko_cmd_mesh_test_set_segment_send_delay_idx=265,
    gecko_cmd_mesh_test_set_ivupdate_state_idx=266,
    gecko_cmd_mesh_test_send_beacons_idx=267,
    gecko_cmd_mesh_test_bind_local_model_app_idx=268,
    gecko_cmd_mesh_test_unbind_local_model_app_idx=269,
    gecko_cmd_mesh_test_add_local_model_sub_idx=270,
    gecko_cmd_mesh_test_del_local_model_sub_idx=271,
    gecko_cmd_mesh_test_add_local_model_sub_va_idx=272,
    gecko_cmd_mesh_test_del_local_model_sub_va_idx=273,
    gecko_cmd_mesh_test_get_local_model_sub_idx=274,
    gecko_cmd_mesh_test_set_local_model_pub_idx=275,
    gecko_cmd_mesh_test_set_local_model_pub_va_idx=276,
    gecko_cmd_mesh_test_get_local_model_pub_idx=277,
    gecko_cmd_mesh_test_set_local_heartbeat_subscription_idx=278,
    gecko_cmd_mesh_test_get_local_heartbeat_subscription_idx=279,
    gecko_cmd_mesh_test_get_local_heartbeat_publication_idx=280,
    gecko_cmd_mesh_test_set_local_heartbeat_publication_idx=281,
    gecko_cmd_mesh_test_set_local_config_idx=282,
    gecko_cmd_mesh_test_get_local_config_idx=283,
    gecko_cmd_mesh_test_add_local_key_idx=284,
    gecko_cmd_mesh_test_del_local_key_idx=285,
    gecko_cmd_mesh_test_update_local_key_idx=286,
    gecko_cmd_mesh_test_set_sar_config_idx=287,
    gecko_cmd_mesh_test_get_element_seqnum_idx=288,
    gecko_cmd_mesh_lpn_init_idx=289,
    gecko_cmd_mesh_lpn_deinit_idx=290,
    gecko_cmd_mesh_lpn_configure_idx=291,
    gecko_cmd_mesh_lpn_establish_friendship_idx=292,
    gecko_cmd_mesh_lpn_poll_idx=293,
    gecko_cmd_mesh_lpn_terminate_friendship_idx=294,
    gecko_cmd_mesh_friend_init_idx=295,
    gecko_cmd_mesh_friend_deinit_idx=296,
    gecko_cmd_user_message_to_target_idx=297,

    gecko_rsp_dfu_flash_set_address_idx=298,
    gecko_rsp_dfu_flash_upload_idx=299,
    gecko_rsp_dfu_flash_upload_finish_idx=300,
    gecko_rsp_system_hello_idx=301,
    gecko_rsp_system_get_bt_address_idx=302,
    gecko_rsp_system_set_bt_address_idx=303,
    gecko_rsp_system_set_tx_power_idx=304,
    gecko_rsp_system_get_random_data_idx=305,
    gecko_rsp_system_halt_idx=306,
    gecko_rsp_system_set_device_name_idx=307,
    gecko_rsp_system_linklayer_configure_idx=308,
    gecko_rsp_system_get_counters_idx=309,
    gecko_rsp_le_gap_open_idx=310,
    gecko_rsp_le_gap_set_mode_idx=311,
    gecko_rsp_le_gap_discover_idx=312,
    gecko_rsp_le_gap_end_procedure_idx=313,
    gecko_rsp_le_gap_set_adv_parameters_idx=314,
    gecko_rsp_le_gap_set_conn_parameters_idx=315,
    gecko_rsp_le_gap_set_scan_parameters_idx=316,
    gecko_rsp_le_gap_set_adv_data_idx=317,
    gecko_rsp_le_gap_set_adv_timeout_idx=318,
    gecko_rsp_le_gap_set_phy_idx=319,
    gecko_rsp_le_gap_bt5_set_mode_idx=320,
    gecko_rsp_le_gap_bt5_set_adv_parameters_idx=321,
    gecko_rsp_le_gap_bt5_set_adv_data_idx=322,
    gecko_rsp_le_gap_set_privacy_mode_idx=323,
    gecko_rsp_le_gap_set_advertise_timing_idx=324,
    gecko_rsp_le_gap_set_advertise_channel_map_idx=325,
    gecko_rsp_le_gap_set_advertise_report_scan_request_idx=326,
    gecko_rsp_le_gap_set_advertise_phy_idx=327,
    gecko_rsp_le_gap_set_advertise_configuration_idx=328,
    gecko_rsp_le_gap_clear_advertise_configuration_idx=329,
    gecko_rsp_le_gap_start_advertising_idx=330,
    gecko_rsp_le_gap_stop_advertising_idx=331,
    gecko_rsp_le_gap_set_discovery_timing_idx=332,
    gecko_rsp_le_gap_set_discovery_type_idx=333,
    gecko_rsp_le_gap_start_discovery_idx=334,
    gecko_rsp_le_gap_set_data_channel_classification_idx=335,
    gecko_rsp_le_gap_connect_idx=336,
    gecko_rsp_le_gap_set_advertise_tx_power_idx=337,
    gecko_rsp_le_connection_set_parameters_idx=338,
    gecko_rsp_le_connection_get_rssi_idx=339,
    gecko_rsp_le_connection_disable_slave_latency_idx=340,
    gecko_rsp_le_connection_set_phy_idx=341,
    gecko_rsp_le_connection_close_idx=342,
    gecko_rsp_gatt_set_max_mtu_idx=343,
    gecko_rsp_gatt_discover_primary_services_idx=344,
    gecko_rsp_gatt_discover_primary_services_by_uuid_idx=345,
    gecko_rsp_gatt_discover_characteristics_idx=346,
    gecko_rsp_gatt_discover_characteristics_by_uuid_idx=347,
    gecko_rsp_gatt_set_characteristic_notification_idx=348,
    gecko_rsp_gatt_discover_descriptors_idx=349,
    gecko_rsp_gatt_read_characteristic_value_idx=350,
    gecko_rsp_gatt_read_characteristic_value_by_uuid_idx=351,
    gecko_rsp_gatt_write_characteristic_value_idx=352,
    gecko_rsp_gatt_write_characteristic_value_without_response_idx=353,
    gecko_rsp_gatt_prepare_characteristic_value_write_idx=354,
    gecko_rsp_gatt_execute_characteristic_value_write_idx=355,
    gecko_rsp_gatt_send_characteristic_confirmation_idx=356,
    gecko_rsp_gatt_read_descriptor_value_idx=357,
    gecko_rsp_gatt_write_descriptor_value_idx=358,
    gecko_rsp_gatt_find_included_services_idx=359,
    gecko_rsp_gatt_read_multiple_characteristic_values_idx=360,
    gecko_rsp_gatt_read_characteristic_value_from_offset_idx=361,
    gecko_rsp_gatt_prepare_characteristic_value_reliable_write_idx=362,
    gecko_rsp_gatt_server_read_attribute_value_idx=363,
    gecko_rsp_gatt_server_read_attribute_type_idx=364,
    gecko_rsp_gatt_server_write_attribute_value_idx=365,
    gecko_rsp_gatt_server_send_user_read_response_idx=366,
    gecko_rsp_gatt_server_send_user_write_response_idx=367,
    gecko_rsp_gatt_server_send_characteristic_notification_idx=368,
    gecko_rsp_gatt_server_find_attribute_idx=369,
    gecko_rsp_gatt_server_set_database_idx=370,
    gecko_rsp_gatt_server_set_capabilities_idx=371,
    gecko_rsp_endpoint_close_idx=372,
    gecko_rsp_hardware_set_soft_timer_idx=373,
    gecko_rsp_hardware_get_time_idx=374,
    gecko_rsp_hardware_set_lazy_soft_timer_idx=375,
    gecko_rsp_hardware_enable_dcdc_idx=376,
    gecko_rsp_flash_ps_erase_all_idx=377,
    gecko_rsp_flash_ps_save_idx=378,
    gecko_rsp_flash_ps_load_idx=379,
    gecko_rsp_flash_ps_erase_idx=380,
    gecko_rsp_test_dtm_tx_idx=381,
    gecko_rsp_test_dtm_rx_idx=382,
    gecko_rsp_test_dtm_end_idx=383,
    gecko_rsp_test_debug_command_idx=384,
    gecko_rsp_test_debug_counter_idx=385,
    gecko_rsp_sm_set_bondable_mode_idx=386,
    gecko_rsp_sm_configure_idx=387,
    gecko_rsp_sm_store_bonding_configuration_idx=388,
    gecko_rsp_sm_increase_security_idx=389,
    gecko_rsp_sm_delete_bonding_idx=390,
    gecko_rsp_sm_delete_bondings_idx=391,
    gecko_rsp_sm_enter_passkey_idx=392,
    gecko_rsp_sm_passkey_confirm_idx=393,
    gecko_rsp_sm_set_oob_data_idx=394,
    gecko_rsp_sm_list_all_bondings_idx=395,
    gecko_rsp_sm_bonding_confirm_idx=396,
    gecko_rsp_sm_set_debug_mode_idx=397,
    gecko_rsp_sm_set_passkey_idx=398,
    gecko_rsp_sm_use_sc_oob_idx=399,
    gecko_rsp_sm_set_sc_remote_oob_data_idx=400,
    gecko_rsp_homekit_configure_idx=401,
    gecko_rsp_homekit_advertise_idx=402,
    gecko_rsp_homekit_delete_pairings_idx=403,
    gecko_rsp_homekit_check_authcp_idx=404,
    gecko_rsp_homekit_get_pairing_id_idx=405,
    gecko_rsp_homekit_send_write_response_idx=406,
    gecko_rsp_homekit_send_read_response_idx=407,
    gecko_rsp_homekit_gsn_action_idx=408,
    gecko_rsp_homekit_event_notification_idx=409,
    gecko_rsp_homekit_broadcast_action_idx=410,
    gecko_rsp_mesh_node_init_idx=411,
    gecko_rsp_mesh_node_start_unprov_beaconing_idx=412,
    gecko_rsp_mesh_node_input_oob_request_rsp_idx=413,
    gecko_rsp_mesh_node_get_uuid_idx=414,
    gecko_rsp_mesh_node_set_provisioning_data_idx=415,
    gecko_rsp_mesh_node_init_oob_idx=416,
    gecko_rsp_mesh_node_set_ivrecovery_mode_idx=417,
    gecko_rsp_mesh_node_get_ivrecovery_mode_idx=418,
    gecko_rsp_mesh_node_set_adv_event_filter_idx=419,
    gecko_rsp_mesh_node_get_statistics_idx=420,
    gecko_rsp_mesh_node_clear_statistics_idx=421,
    gecko_rsp_mesh_node_set_net_relay_delay_idx=422,
    gecko_rsp_mesh_node_get_net_relay_delay_idx=423,
    gecko_rsp_mesh_node_get_ivupdate_state_idx=424,
    gecko_rsp_mesh_node_request_ivupdate_idx=425,
    gecko_rsp_mesh_node_get_seq_remaining_idx=426,
    gecko_rsp_mesh_node_save_replay_protection_list_idx=427,
    gecko_rsp_mesh_node_set_uuid_idx=428,
    gecko_rsp_mesh_node_get_element_address_idx=429,
    gecko_rsp_mesh_node_static_oob_request_rsp_idx=430,
    gecko_rsp_mesh_prov_init_idx=431,
    gecko_rsp_mesh_prov_scan_unprov_beacons_idx=432,
    gecko_rsp_mesh_prov_provision_device_idx=433,
    gecko_rsp_mesh_prov_create_network_idx=434,
    gecko_rsp_mesh_prov_get_dcd_idx=435,
    gecko_rsp_mesh_prov_get_config_idx=436,
    gecko_rsp_mesh_prov_set_config_idx=437,
    gecko_rsp_mesh_prov_create_appkey_idx=438,
    gecko_rsp_mesh_prov_oob_pkey_rsp_idx=439,
    gecko_rsp_mesh_prov_oob_auth_rsp_idx=440,
    gecko_rsp_mesh_prov_set_oob_requirements_idx=441,
    gecko_rsp_mesh_prov_key_refresh_start_idx=442,
    gecko_rsp_mesh_prov_get_key_refresh_blacklist_idx=443,
    gecko_rsp_mesh_prov_set_key_refresh_blacklist_idx=444,
    gecko_rsp_mesh_prov_appkey_add_idx=445,
    gecko_rsp_mesh_prov_appkey_delete_idx=446,
    gecko_rsp_mesh_prov_model_app_bind_idx=447,
    gecko_rsp_mesh_prov_model_app_unbind_idx=448,
    gecko_rsp_mesh_prov_model_app_get_idx=449,
    gecko_rsp_mesh_prov_model_sub_add_idx=450,
    gecko_rsp_mesh_prov_model_pub_set_idx=451,
    gecko_rsp_mesh_prov_provision_gatt_device_idx=452,
    gecko_rsp_mesh_prov_ddb_get_idx=453,
    gecko_rsp_mesh_prov_ddb_delete_idx=454,
    gecko_rsp_mesh_prov_ddb_add_idx=455,
    gecko_rsp_mesh_prov_ddb_list_devices_idx=456,
    gecko_rsp_mesh_prov_network_add_idx=457,
    gecko_rsp_mesh_prov_network_delete_idx=458,
    gecko_rsp_mesh_prov_nettx_get_idx=459,
    gecko_rsp_mesh_prov_nettx_set_idx=460,
    gecko_rsp_mesh_prov_model_sub_del_idx=461,
    gecko_rsp_mesh_prov_model_sub_add_va_idx=462,
    gecko_rsp_mesh_prov_model_sub_del_va_idx=463,
    gecko_rsp_mesh_prov_model_sub_set_idx=464,
    gecko_rsp_mesh_prov_model_sub_set_va_idx=465,
    gecko_rsp_mesh_prov_heartbeat_publication_get_idx=466,
    gecko_rsp_mesh_prov_heartbeat_publication_set_idx=467,
    gecko_rsp_mesh_prov_heartbeat_subscription_get_idx=468,
    gecko_rsp_mesh_prov_heartbeat_subscription_set_idx=469,
    gecko_rsp_mesh_prov_relay_get_idx=470,
    gecko_rsp_mesh_prov_relay_set_idx=471,
    gecko_rsp_mesh_prov_reset_node_idx=472,
    gecko_rsp_mesh_prov_appkey_get_idx=473,
    gecko_rsp_mesh_prov_network_get_idx=474,
    gecko_rsp_mesh_prov_model_sub_clear_idx=475,
    gecko_rsp_mesh_prov_model_pub_get_idx=476,
    gecko_rsp_mesh_prov_model_pub_set_va_idx=477,
    gecko_rsp_mesh_prov_model_pub_set_cred_idx=478,
    gecko_rsp_mesh_prov_model_pub_set_va_cred_idx=479,
    gecko_rsp_mesh_prov_model_sub_get_idx=480,
    gecko_rsp_mesh_prov_friend_timeout_get_idx=481,
    gecko_rsp_mesh_debug_dump_keys_idx=482,
    gecko_rsp_mesh_debug_prov_dump_database_idx=483,
    gecko_rsp_mesh_debug_prov_load_database_entries_idx=484,
    gecko_rsp_mesh_debug_set_mask_idx=485,
    gecko_rsp_mesh_debug_set_kludges_idx=486,
    gecko_rsp_mesh_debug_rssi_limit_set_idx=487,
    gecko_rsp_mesh_debug_add_va_idx=488,
    gecko_rsp_mesh_debug_unref_va_idx=489,
    gecko_rsp_mesh_debug_dump_va_idx=490,
    gecko_rsp_mesh_debug_set_white_list_item_idx=491,
    gecko_rsp_mesh_debug_set_white_list_active_idx=492,
    gecko_rsp_mesh_debug_node_set_static_oob_data_idx=493,
    gecko_rsp_mesh_debug_node_set_oob_eckey_idx=494,
    gecko_rsp_mesh_debug_node_get_oob_eckey_idx=495,
    gecko_rsp_mesh_debug_node_get_static_oob_data_idx=496,
    gecko_rsp_mesh_debug_network_trace_config_idx=497,
    gecko_rsp_mesh_debug_network_update_idx=498,
    gecko_rsp_mesh_debug_appkey_update_idx=499,
    gecko_rsp_mesh_debug_proxy_listen_idx=500,
    gecko_rsp_mesh_debug_set_scan_idx=501,
    gecko_rsp_mesh_debug_node_set_oob_uri_idx=502,
    gecko_rsp_mesh_debug_node_get_oob_uri_idx=503,
    gecko_rsp_mesh_debug_node_init_cfgcl_idx=504,
    gecko_rsp_mesh_debug_key_refresh_start_noauto_idx=505,
    gecko_rsp_mesh_debug_key_refresh_next_phase_idx=506,
    gecko_rsp_mesh_debug_net_send_idx=507,
    gecko_rsp_proxy_radio_proxy_send_adv_idx=508,
    gecko_rsp_proxy_radio_child_adv_req_done_idx=509,
    gecko_rsp_proxy_radio_child_adv_data_idx=510,
    gecko_rsp_proxy_radio_get_ms_ticks_idx=511,
    gecko_rsp_proxy_radio_test_timer_idx=512,
    gecko_rsp_mesh_proxy_connect_idx=513,
    gecko_rsp_mesh_proxy_disconnect_idx=514,
    gecko_rsp_mesh_proxy_set_filter_type_idx=515,
    gecko_rsp_mesh_proxy_allow_idx=516,
    gecko_rsp_mesh_proxy_deny_idx=517,
    gecko_rsp_mesh_vendor_model_send_idx=518,
    gecko_rsp_mesh_vendor_model_set_publication_idx=519,
    gecko_rsp_mesh_vendor_model_clear_publication_idx=520,
    gecko_rsp_mesh_vendor_model_publish_idx=521,
    gecko_rsp_mesh_vendor_model_init_idx=522,
    gecko_rsp_mesh_vendor_model_deinit_idx=523,
    gecko_rsp_mesh_health_client_get_idx=524,
    gecko_rsp_mesh_health_client_clear_idx=525,
    gecko_rsp_mesh_health_client_test_idx=526,
    gecko_rsp_mesh_health_client_get_period_idx=527,
    gecko_rsp_mesh_health_client_set_period_idx=528,
    gecko_rsp_mesh_health_client_get_attention_idx=529,
    gecko_rsp_mesh_health_client_set_attention_idx=530,
    gecko_rsp_mesh_health_server_set_fault_idx=531,
    gecko_rsp_mesh_health_server_clear_fault_idx=532,
    gecko_rsp_mesh_health_server_test_response_idx=533,
    gecko_rsp_mesh_srtest_client_init_idx=534,
    gecko_rsp_mesh_srtest_client_deinit_idx=535,
    gecko_rsp_mesh_srtest_client_run_idx=536,
    gecko_rsp_mesh_srtest_client_stop_idx=537,
    gecko_rsp_mesh_srtest_client_status_idx=538,
    gecko_rsp_mesh_srtest_client_statistics_idx=539,
    gecko_rsp_mesh_srtest_server_init_idx=540,
    gecko_rsp_mesh_srtest_server_deinit_idx=541,
    gecko_rsp_mesh_srtest_server_statistics_idx=542,
    gecko_rsp_mesh_generic_client_get_idx=543,
    gecko_rsp_mesh_generic_client_set_idx=544,
    gecko_rsp_mesh_generic_client_publish_idx=545,
    gecko_rsp_mesh_generic_client_get_params_idx=546,
    gecko_rsp_mesh_generic_client_init_idx=547,
    gecko_rsp_mesh_generic_server_response_idx=548,
    gecko_rsp_mesh_generic_server_update_idx=549,
    gecko_rsp_mesh_generic_server_publish_idx=550,
    gecko_rsp_mesh_generic_server_init_idx=551,
    gecko_rsp_coex_set_options_idx=552,
    gecko_rsp_coex_get_counters_idx=553,
    gecko_rsp_mesh_test_get_nettx_idx=554,
    gecko_rsp_mesh_test_set_nettx_idx=555,
    gecko_rsp_mesh_test_get_relay_idx=556,
    gecko_rsp_mesh_test_set_relay_idx=557,
    gecko_rsp_mesh_test_set_adv_scan_params_idx=558,
    gecko_rsp_mesh_test_set_ivupdate_test_mode_idx=559,
    gecko_rsp_mesh_test_get_ivupdate_test_mode_idx=560,
    gecko_rsp_mesh_test_set_segment_send_delay_idx=561,
    gecko_rsp_mesh_test_set_ivupdate_state_idx=562,
    gecko_rsp_mesh_test_send_beacons_idx=563,
    gecko_rsp_mesh_test_bind_local_model_app_idx=564,
    gecko_rsp_mesh_test_unbind_local_model_app_idx=565,
    gecko_rsp_mesh_test_add_local_model_sub_idx=566,
    gecko_rsp_mesh_test_del_local_model_sub_idx=567,
    gecko_rsp_mesh_test_add_local_model_sub_va_idx=568,
    gecko_rsp_mesh_test_del_local_model_sub_va_idx=569,
    gecko_rsp_mesh_test_get_local_model_sub_idx=570,
    gecko_rsp_mesh_test_set_local_model_pub_idx=571,
    gecko_rsp_mesh_test_set_local_model_pub_va_idx=572,
    gecko_rsp_mesh_test_get_local_model_pub_idx=573,
    gecko_rsp_mesh_test_set_local_heartbeat_subscription_idx=574,
    gecko_rsp_mesh_test_get_local_heartbeat_subscription_idx=575,
    gecko_rsp_mesh_test_get_local_heartbeat_publication_idx=576,
    gecko_rsp_mesh_test_set_local_heartbeat_publication_idx=577,
    gecko_rsp_mesh_test_set_local_config_idx=578,
    gecko_rsp_mesh_test_get_local_config_idx=579,
    gecko_rsp_mesh_test_add_local_key_idx=580,
    gecko_rsp_mesh_test_del_local_key_idx=581,
    gecko_rsp_mesh_test_update_local_key_idx=582,
    gecko_rsp_mesh_test_set_sar_config_idx=583,
    gecko_rsp_mesh_test_get_element_seqnum_idx=584,
    gecko_rsp_mesh_lpn_init_idx=585,
    gecko_rsp_mesh_lpn_deinit_idx=586,
    gecko_rsp_mesh_lpn_configure_idx=587,
    gecko_rsp_mesh_lpn_establish_friendship_idx=588,
    gecko_rsp_mesh_lpn_poll_idx=589,
    gecko_rsp_mesh_lpn_terminate_friendship_idx=590,
    gecko_rsp_mesh_friend_init_idx=591,
    gecko_rsp_mesh_friend_deinit_idx=592,
    gecko_rsp_user_message_to_target_idx=593,

    gecko_evt_dfu_boot_idx=594,
    gecko_evt_dfu_boot_failure_idx=595,
    gecko_evt_system_boot_idx=596,
    gecko_evt_system_external_signal_idx=597,
    gecko_evt_system_awake_idx=598,
    gecko_evt_system_hardware_error_idx=599,
    gecko_evt_system_error_idx=600,
    gecko_evt_le_gap_scan_response_idx=601,
    gecko_evt_le_gap_adv_timeout_idx=602,
    gecko_evt_le_gap_scan_request_idx=603,
    gecko_evt_le_connection_opened_idx=604,
    gecko_evt_le_connection_closed_idx=605,
    gecko_evt_le_connection_parameters_idx=606,
    gecko_evt_le_connection_rssi_idx=607,
    gecko_evt_le_connection_phy_status_idx=608,
    gecko_evt_gatt_mtu_exchanged_idx=609,
    gecko_evt_gatt_service_idx=610,
    gecko_evt_gatt_characteristic_idx=611,
    gecko_evt_gatt_descriptor_idx=612,
    gecko_evt_gatt_characteristic_value_idx=613,
    gecko_evt_gatt_descriptor_value_idx=614,
    gecko_evt_gatt_procedure_completed_idx=615,
    gecko_evt_gatt_server_attribute_value_idx=616,
    gecko_evt_gatt_server_user_read_request_idx=617,
    gecko_evt_gatt_server_user_write_request_idx=618,
    gecko_evt_gatt_server_characteristic_status_idx=619,
    gecko_evt_gatt_server_execute_write_completed_idx=620,
    gecko_evt_endpoint_status_idx=621,
    gecko_evt_hardware_soft_timer_idx=622,
    gecko_evt_test_dtm_completed_idx=623,
    gecko_evt_test_hcidump_idx=624,
    gecko_evt_sm_passkey_display_idx=625,
    gecko_evt_sm_passkey_request_idx=626,
    gecko_evt_sm_confirm_passkey_idx=627,
    gecko_evt_sm_bonded_idx=628,
    gecko_evt_sm_bonding_failed_idx=629,
    gecko_evt_sm_list_bonding_entry_idx=630,
    gecko_evt_sm_list_all_bondings_complete_idx=631,
    gecko_evt_sm_confirm_bonding_idx=632,
    gecko_evt_homekit_setupcode_display_idx=633,
    gecko_evt_homekit_paired_idx=634,
    gecko_evt_homekit_pair_verified_idx=635,
    gecko_evt_homekit_connection_opened_idx=636,
    gecko_evt_homekit_connection_closed_idx=637,
    gecko_evt_homekit_identify_idx=638,
    gecko_evt_homekit_write_request_idx=639,
    gecko_evt_homekit_read_request_idx=640,
    gecko_evt_homekit_disconnection_required_idx=641,
    gecko_evt_homekit_pairing_removed_idx=642,
    gecko_evt_homekit_setuppayload_display_idx=643,
    gecko_evt_mesh_node_initialized_idx=644,
    gecko_evt_mesh_node_provisioned_idx=645,
    gecko_evt_mesh_node_config_get_idx=646,
    gecko_evt_mesh_node_config_set_idx=647,
    gecko_evt_mesh_node_display_output_oob_idx=648,
    gecko_evt_mesh_node_input_oob_request_idx=649,
    gecko_evt_mesh_node_provisioning_started_idx=650,
    gecko_evt_mesh_node_provisioning_failed_idx=651,
    gecko_evt_mesh_node_key_added_idx=652,
    gecko_evt_mesh_node_model_config_changed_idx=653,
    gecko_evt_mesh_node_reset_idx=654,
    gecko_evt_mesh_node_ivrecovery_needed_idx=655,
    gecko_evt_mesh_node_changed_ivupdate_state_idx=656,
    gecko_evt_mesh_node_static_oob_request_idx=657,
    gecko_evt_mesh_prov_initialized_idx=658,
    gecko_evt_mesh_prov_provisioning_failed_idx=659,
    gecko_evt_mesh_prov_device_provisioned_idx=660,
    gecko_evt_mesh_prov_unprov_beacon_idx=661,
    gecko_evt_mesh_prov_dcd_status_idx=662,
    gecko_evt_mesh_prov_config_status_idx=663,
    gecko_evt_mesh_prov_oob_pkey_request_idx=664,
    gecko_evt_mesh_prov_oob_auth_request_idx=665,
    gecko_evt_mesh_prov_oob_display_input_idx=666,
    gecko_evt_mesh_prov_ddb_list_idx=667,
    gecko_evt_mesh_prov_heartbeat_publication_status_idx=668,
    gecko_evt_mesh_prov_heartbeat_subscription_status_idx=669,
    gecko_evt_mesh_prov_relay_status_idx=670,
    gecko_evt_mesh_prov_uri_idx=671,
    gecko_evt_mesh_prov_node_reset_idx=672,
    gecko_evt_mesh_prov_appkey_list_idx=673,
    gecko_evt_mesh_prov_appkey_list_end_idx=674,
    gecko_evt_mesh_prov_network_list_idx=675,
    gecko_evt_mesh_prov_network_list_end_idx=676,
    gecko_evt_mesh_prov_model_pub_status_idx=677,
    gecko_evt_mesh_prov_key_refresh_phase_update_idx=678,
    gecko_evt_mesh_prov_key_refresh_node_update_idx=679,
    gecko_evt_mesh_prov_key_refresh_complete_idx=680,
    gecko_evt_mesh_prov_model_sub_addr_idx=681,
    gecko_evt_mesh_prov_model_sub_addr_end_idx=682,
    gecko_evt_mesh_prov_friend_timeout_status_idx=683,
    gecko_evt_mesh_debug_key_idx=684,
    gecko_evt_mesh_debug_keys_end_idx=685,
    gecko_evt_mesh_debug_msg_idx=686,
    gecko_evt_mesh_debug_prov_database_entry_idx=687,
    gecko_evt_mesh_debug_prov_database_entries_end_idx=688,
    gecko_evt_mesh_debug_va_idx=689,
    gecko_evt_mesh_debug_va_end_idx=690,
    gecko_evt_mesh_debug_network_trace_pdu_idx=691,
    gecko_evt_mesh_debug_network_trace_access_payload_idx=692,
    gecko_evt_mesh_debug_network_status_idx=693,
    gecko_evt_mesh_debug_appkey_status_idx=694,
    gecko_evt_mesh_debug_transport_rx_cancelled_idx=695,
    gecko_evt_proxy_radio_proxy_send_adv_done_idx=696,
    gecko_evt_proxy_radio_proxy_adv_data_idx=697,
    gecko_evt_proxy_radio_child_adv_req_idx=698,
    gecko_evt_proxy_radio_child_adv_params_req_idx=699,
    gecko_evt_proxy_radio_test_timer_expired_idx=700,
    gecko_evt_mesh_proxy_connected_idx=701,
    gecko_evt_mesh_proxy_disconnected_idx=702,
    gecko_evt_mesh_proxy_filter_status_idx=703,
    gecko_evt_mesh_vendor_model_receive_idx=704,
    gecko_evt_mesh_health_client_server_status_idx=705,
    gecko_evt_mesh_health_client_server_status_period_idx=706,
    gecko_evt_mesh_health_client_server_status_attention_idx=707,
    gecko_evt_mesh_health_server_attention_idx=708,
    gecko_evt_mesh_health_server_test_request_idx=709,
    gecko_evt_mesh_srtest_client_server_status_idx=710,
    gecko_evt_mesh_srtest_client_payload_received_idx=711,
    gecko_evt_mesh_srtest_server_state_changed_idx=712,
    gecko_evt_mesh_srtest_server_run_started_idx=713,
    gecko_evt_mesh_srtest_server_run_ended_idx=714,
    gecko_evt_mesh_srtest_server_statistics_dump_idx=715,
    gecko_evt_mesh_srtest_server_payload_sent_idx=716,
    gecko_evt_mesh_generic_client_server_status_idx=717,
    gecko_evt_mesh_generic_server_client_request_idx=718,
    gecko_evt_mesh_generic_server_state_changed_idx=719,
    gecko_evt_mesh_test_local_heartbeat_subscription_complete_idx=720,
    gecko_evt_mesh_lpn_friendship_established_idx=721,
    gecko_evt_mesh_lpn_friendship_failed_idx=722,
    gecko_evt_mesh_lpn_friendship_terminated_idx=723,
    gecko_evt_mesh_friend_friendship_established_idx=724,
    gecko_evt_mesh_friend_friendship_terminated_idx=725,
    gecko_evt_user_message_to_host_idx=726,
};
#include "bg_errorcodes.h"

PACKSTRUCT( struct gecko_msg_dfu_reset_cmd_t
{
    uint8               dfu;
});
PACKSTRUCT( struct gecko_msg_dfu_flash_set_address_cmd_t
{
    uint32              address;
});
PACKSTRUCT( struct gecko_msg_dfu_flash_set_address_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_dfu_flash_upload_cmd_t
{
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_dfu_flash_upload_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_dfu_flash_upload_finish_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_dfu_boot_evt_t
{
    uint32              version;
});
PACKSTRUCT( struct gecko_msg_dfu_boot_failure_evt_t
{
    uint16              reason;
});
PACKSTRUCT( struct gecko_msg_system_hello_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_system_reset_cmd_t
{
    uint8               dfu;
});
PACKSTRUCT( struct gecko_msg_system_get_bt_address_rsp_t
{
    bd_addr             address;
});
PACKSTRUCT( struct gecko_msg_system_set_bt_address_cmd_t
{
    bd_addr             address;
});
PACKSTRUCT( struct gecko_msg_system_set_bt_address_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_system_set_tx_power_cmd_t
{
    int16               power;
});
PACKSTRUCT( struct gecko_msg_system_set_tx_power_rsp_t
{
    int16               set_power;
});
PACKSTRUCT( struct gecko_msg_system_get_random_data_cmd_t
{
    uint8               length;
});
PACKSTRUCT( struct gecko_msg_system_get_random_data_rsp_t
{
    uint16              result;
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_system_halt_cmd_t
{
    uint8               halt;
});
PACKSTRUCT( struct gecko_msg_system_halt_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_system_set_device_name_cmd_t
{
    uint8               type;
    uint8array          name;
});
PACKSTRUCT( struct gecko_msg_system_set_device_name_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_system_linklayer_configure_cmd_t
{
    uint8               key;
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_system_linklayer_configure_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_system_get_counters_cmd_t
{
    uint8               reset;
});
PACKSTRUCT( struct gecko_msg_system_get_counters_rsp_t
{
    uint16              result;
    uint16              tx_packets;
    uint16              rx_packets;
    uint16              crc_errors;
    uint16              failures;
});
PACKSTRUCT( struct gecko_msg_system_boot_evt_t
{
    uint16              major;
    uint16              minor;
    uint16              patch;
    uint16              build;
    uint32              bootloader;
    uint16              hw;
    uint32              hash;
});
PACKSTRUCT( struct gecko_msg_system_external_signal_evt_t
{
    uint32              extsignals;
});
PACKSTRUCT( struct gecko_msg_system_hardware_error_evt_t
{
    uint16              status;
});
PACKSTRUCT( struct gecko_msg_system_error_evt_t
{
    uint16              reason;
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_le_gap_open_cmd_t
{
    bd_addr             address;
    uint8               address_type;
});
PACKSTRUCT( struct gecko_msg_le_gap_open_rsp_t
{
    uint16              result;
    uint8               connection;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_mode_cmd_t
{
    uint8               discover;
    uint8               connect;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_mode_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_gap_discover_cmd_t
{
    uint8               mode;
});
PACKSTRUCT( struct gecko_msg_le_gap_discover_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_gap_end_procedure_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_adv_parameters_cmd_t
{
    uint16              interval_min;
    uint16              interval_max;
    uint8               channel_map;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_adv_parameters_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_conn_parameters_cmd_t
{
    uint16              min_interval;
    uint16              max_interval;
    uint16              latency;
    uint16              timeout;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_conn_parameters_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_scan_parameters_cmd_t
{
    uint16              scan_interval;
    uint16              scan_window;
    uint8               active;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_scan_parameters_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_adv_data_cmd_t
{
    uint8               scan_rsp;
    uint8array          adv_data;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_adv_data_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_adv_timeout_cmd_t
{
    uint8               maxevents;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_adv_timeout_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_phy_cmd_t
{
    uint8               phy;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_phy_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_gap_bt5_set_mode_cmd_t
{
    uint8               handle;
    uint8               discover;
    uint8               connect;
    uint16              maxevents;
    uint8               address_type;
});
PACKSTRUCT( struct gecko_msg_le_gap_bt5_set_mode_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_gap_bt5_set_adv_parameters_cmd_t
{
    uint8               handle;
    uint16              interval_min;
    uint16              interval_max;
    uint8               channel_map;
    uint8               report_scan;
});
PACKSTRUCT( struct gecko_msg_le_gap_bt5_set_adv_parameters_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_gap_bt5_set_adv_data_cmd_t
{
    uint8               handle;
    uint8               scan_rsp;
    uint8array          adv_data;
});
PACKSTRUCT( struct gecko_msg_le_gap_bt5_set_adv_data_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_privacy_mode_cmd_t
{
    uint8               privacy;
    uint8               interval;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_privacy_mode_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_advertise_timing_cmd_t
{
    uint8               handle;
    uint32              interval_min;
    uint32              interval_max;
    uint16              duration;
    uint8               maxevents;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_advertise_timing_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_advertise_channel_map_cmd_t
{
    uint8               handle;
    uint8               channel_map;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_advertise_channel_map_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_advertise_report_scan_request_cmd_t
{
    uint8               handle;
    uint8               report_scan_req;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_advertise_report_scan_request_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_advertise_phy_cmd_t
{
    uint8               handle;
    uint8               primary_phy;
    uint8               secondary_phy;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_advertise_phy_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_advertise_configuration_cmd_t
{
    uint8               handle;
    uint32              configurations;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_advertise_configuration_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_gap_clear_advertise_configuration_cmd_t
{
    uint8               handle;
    uint32              configurations;
});
PACKSTRUCT( struct gecko_msg_le_gap_clear_advertise_configuration_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_gap_start_advertising_cmd_t
{
    uint8               handle;
    uint8               discover;
    uint8               connect;
});
PACKSTRUCT( struct gecko_msg_le_gap_start_advertising_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_gap_stop_advertising_cmd_t
{
    uint8               handle;
});
PACKSTRUCT( struct gecko_msg_le_gap_stop_advertising_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_discovery_timing_cmd_t
{
    uint8               phys;
    uint16              scan_interval;
    uint16              scan_window;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_discovery_timing_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_discovery_type_cmd_t
{
    uint8               phys;
    uint8               scan_type;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_discovery_type_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_gap_start_discovery_cmd_t
{
    uint8               scanning_phy;
    uint8               mode;
});
PACKSTRUCT( struct gecko_msg_le_gap_start_discovery_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_data_channel_classification_cmd_t
{
    uint8array          channel_map;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_data_channel_classification_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_gap_connect_cmd_t
{
    bd_addr             address;
    uint8               address_type;
    uint8               initiating_phy;
});
PACKSTRUCT( struct gecko_msg_le_gap_connect_rsp_t
{
    uint16              result;
    uint8               connection;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_advertise_tx_power_cmd_t
{
    uint8               handle;
    int8                power;
});
PACKSTRUCT( struct gecko_msg_le_gap_set_advertise_tx_power_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_gap_scan_response_evt_t
{
    int8                rssi;
    uint8               packet_type;
    bd_addr             address;
    uint8               address_type;
    uint8               bonding;
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_le_gap_adv_timeout_evt_t
{
    uint8               handle;
});
PACKSTRUCT( struct gecko_msg_le_gap_scan_request_evt_t
{
    uint8               handle;
    bd_addr             address;
    uint8               address_type;
    uint8               bonding;
});
PACKSTRUCT( struct gecko_msg_le_connection_set_parameters_cmd_t
{
    uint8               connection;
    uint16              min_interval;
    uint16              max_interval;
    uint16              latency;
    uint16              timeout;
});
PACKSTRUCT( struct gecko_msg_le_connection_set_parameters_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_connection_get_rssi_cmd_t
{
    uint8               connection;
});
PACKSTRUCT( struct gecko_msg_le_connection_get_rssi_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_connection_disable_slave_latency_cmd_t
{
    uint8               connection;
    uint8               disable;
});
PACKSTRUCT( struct gecko_msg_le_connection_disable_slave_latency_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_connection_set_phy_cmd_t
{
    uint8               connection;
    uint8               phy;
});
PACKSTRUCT( struct gecko_msg_le_connection_set_phy_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_connection_close_cmd_t
{
    uint8               connection;
});
PACKSTRUCT( struct gecko_msg_le_connection_close_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_le_connection_opened_evt_t
{
    bd_addr             address;
    uint8               address_type;
    uint8               master;
    uint8               connection;
    uint8               bonding;
    uint8               advertiser;
});
PACKSTRUCT( struct gecko_msg_le_connection_closed_evt_t
{
    uint16              reason;
    uint8               connection;
});
PACKSTRUCT( struct gecko_msg_le_connection_parameters_evt_t
{
    uint8               connection;
    uint16              interval;
    uint16              latency;
    uint16              timeout;
    uint8               security_mode;
    uint16              txsize;
});
PACKSTRUCT( struct gecko_msg_le_connection_rssi_evt_t
{
    uint8               connection;
    uint8               status;
    int8                rssi;
});
PACKSTRUCT( struct gecko_msg_le_connection_phy_status_evt_t
{
    uint8               connection;
    uint8               phy;
});
PACKSTRUCT( struct gecko_msg_gatt_set_max_mtu_cmd_t
{
    uint16              max_mtu;
});
PACKSTRUCT( struct gecko_msg_gatt_set_max_mtu_rsp_t
{
    uint16              result;
    uint16              max_mtu;
});
PACKSTRUCT( struct gecko_msg_gatt_discover_primary_services_cmd_t
{
    uint8               connection;
});
PACKSTRUCT( struct gecko_msg_gatt_discover_primary_services_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_gatt_discover_primary_services_by_uuid_cmd_t
{
    uint8               connection;
    uint8array          uuid;
});
PACKSTRUCT( struct gecko_msg_gatt_discover_primary_services_by_uuid_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_gatt_discover_characteristics_cmd_t
{
    uint8               connection;
    uint32              service;
});
PACKSTRUCT( struct gecko_msg_gatt_discover_characteristics_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_gatt_discover_characteristics_by_uuid_cmd_t
{
    uint8               connection;
    uint32              service;
    uint8array          uuid;
});
PACKSTRUCT( struct gecko_msg_gatt_discover_characteristics_by_uuid_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_gatt_set_characteristic_notification_cmd_t
{
    uint8               connection;
    uint16              characteristic;
    uint8               flags;
});
PACKSTRUCT( struct gecko_msg_gatt_set_characteristic_notification_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_gatt_discover_descriptors_cmd_t
{
    uint8               connection;
    uint16              characteristic;
});
PACKSTRUCT( struct gecko_msg_gatt_discover_descriptors_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_gatt_read_characteristic_value_cmd_t
{
    uint8               connection;
    uint16              characteristic;
});
PACKSTRUCT( struct gecko_msg_gatt_read_characteristic_value_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_gatt_read_characteristic_value_by_uuid_cmd_t
{
    uint8               connection;
    uint32              service;
    uint8array          uuid;
});
PACKSTRUCT( struct gecko_msg_gatt_read_characteristic_value_by_uuid_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_gatt_write_characteristic_value_cmd_t
{
    uint8               connection;
    uint16              characteristic;
    uint8array          value;
});
PACKSTRUCT( struct gecko_msg_gatt_write_characteristic_value_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_gatt_write_characteristic_value_without_response_cmd_t
{
    uint8               connection;
    uint16              characteristic;
    uint8array          value;
});
PACKSTRUCT( struct gecko_msg_gatt_write_characteristic_value_without_response_rsp_t
{
    uint16              result;
    uint16              sent_len;
});
PACKSTRUCT( struct gecko_msg_gatt_prepare_characteristic_value_write_cmd_t
{
    uint8               connection;
    uint16              characteristic;
    uint16              offset;
    uint8array          value;
});
PACKSTRUCT( struct gecko_msg_gatt_prepare_characteristic_value_write_rsp_t
{
    uint16              result;
    uint16              sent_len;
});
PACKSTRUCT( struct gecko_msg_gatt_execute_characteristic_value_write_cmd_t
{
    uint8               connection;
    uint8               flags;
});
PACKSTRUCT( struct gecko_msg_gatt_execute_characteristic_value_write_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_gatt_send_characteristic_confirmation_cmd_t
{
    uint8               connection;
});
PACKSTRUCT( struct gecko_msg_gatt_send_characteristic_confirmation_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_gatt_read_descriptor_value_cmd_t
{
    uint8               connection;
    uint16              descriptor;
});
PACKSTRUCT( struct gecko_msg_gatt_read_descriptor_value_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_gatt_write_descriptor_value_cmd_t
{
    uint8               connection;
    uint16              descriptor;
    uint8array          value;
});
PACKSTRUCT( struct gecko_msg_gatt_write_descriptor_value_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_gatt_find_included_services_cmd_t
{
    uint8               connection;
    uint32              service;
});
PACKSTRUCT( struct gecko_msg_gatt_find_included_services_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_gatt_read_multiple_characteristic_values_cmd_t
{
    uint8               connection;
    uint8array          characteristic_list;
});
PACKSTRUCT( struct gecko_msg_gatt_read_multiple_characteristic_values_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_gatt_read_characteristic_value_from_offset_cmd_t
{
    uint8               connection;
    uint16              characteristic;
    uint16              offset;
    uint16              maxlen;
});
PACKSTRUCT( struct gecko_msg_gatt_read_characteristic_value_from_offset_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_gatt_prepare_characteristic_value_reliable_write_cmd_t
{
    uint8               connection;
    uint16              characteristic;
    uint16              offset;
    uint8array          value;
});
PACKSTRUCT( struct gecko_msg_gatt_prepare_characteristic_value_reliable_write_rsp_t
{
    uint16              result;
    uint16              sent_len;
});
PACKSTRUCT( struct gecko_msg_gatt_mtu_exchanged_evt_t
{
    uint8               connection;
    uint16              mtu;
});
PACKSTRUCT( struct gecko_msg_gatt_service_evt_t
{
    uint8               connection;
    uint32              service;
    uint8array          uuid;
});
PACKSTRUCT( struct gecko_msg_gatt_characteristic_evt_t
{
    uint8               connection;
    uint16              characteristic;
    uint8               properties;
    uint8array          uuid;
});
PACKSTRUCT( struct gecko_msg_gatt_descriptor_evt_t
{
    uint8               connection;
    uint16              descriptor;
    uint8array          uuid;
});
PACKSTRUCT( struct gecko_msg_gatt_characteristic_value_evt_t
{
    uint8               connection;
    uint16              characteristic;
    uint8               att_opcode;
    uint16              offset;
    uint8array          value;
});
PACKSTRUCT( struct gecko_msg_gatt_descriptor_value_evt_t
{
    uint8               connection;
    uint16              descriptor;
    uint16              offset;
    uint8array          value;
});
PACKSTRUCT( struct gecko_msg_gatt_procedure_completed_evt_t
{
    uint8               connection;
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_gatt_server_read_attribute_value_cmd_t
{
    uint16              attribute;
    uint16              offset;
});
PACKSTRUCT( struct gecko_msg_gatt_server_read_attribute_value_rsp_t
{
    uint16              result;
    uint8array          value;
});
PACKSTRUCT( struct gecko_msg_gatt_server_read_attribute_type_cmd_t
{
    uint16              attribute;
});
PACKSTRUCT( struct gecko_msg_gatt_server_read_attribute_type_rsp_t
{
    uint16              result;
    uint8array          type;
});
PACKSTRUCT( struct gecko_msg_gatt_server_write_attribute_value_cmd_t
{
    uint16              attribute;
    uint16              offset;
    uint8array          value;
});
PACKSTRUCT( struct gecko_msg_gatt_server_write_attribute_value_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_gatt_server_send_user_read_response_cmd_t
{
    uint8               connection;
    uint16              characteristic;
    uint8               att_errorcode;
    uint8array          value;
});
PACKSTRUCT( struct gecko_msg_gatt_server_send_user_read_response_rsp_t
{
    uint16              result;
    uint16              sent_len;
});
PACKSTRUCT( struct gecko_msg_gatt_server_send_user_write_response_cmd_t
{
    uint8               connection;
    uint16              characteristic;
    uint8               att_errorcode;
});
PACKSTRUCT( struct gecko_msg_gatt_server_send_user_write_response_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_gatt_server_send_characteristic_notification_cmd_t
{
    uint8               connection;
    uint16              characteristic;
    uint8array          value;
});
PACKSTRUCT( struct gecko_msg_gatt_server_send_characteristic_notification_rsp_t
{
    uint16              result;
    uint16              sent_len;
});
PACKSTRUCT( struct gecko_msg_gatt_server_find_attribute_cmd_t
{
    uint16              start;
    uint8array          type;
});
PACKSTRUCT( struct gecko_msg_gatt_server_find_attribute_rsp_t
{
    uint16              result;
    uint16              attribute;
});
PACKSTRUCT( struct gecko_msg_gatt_server_set_database_cmd_t
{
    uint32              ptr;
});
PACKSTRUCT( struct gecko_msg_gatt_server_set_database_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_gatt_server_set_capabilities_cmd_t
{
    uint32              caps;
    uint32              reserved;
});
PACKSTRUCT( struct gecko_msg_gatt_server_set_capabilities_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_gatt_server_attribute_value_evt_t
{
    uint8               connection;
    uint16              attribute;
    uint8               att_opcode;
    uint16              offset;
    uint8array          value;
});
PACKSTRUCT( struct gecko_msg_gatt_server_user_read_request_evt_t
{
    uint8               connection;
    uint16              characteristic;
    uint8               att_opcode;
    uint16              offset;
});
PACKSTRUCT( struct gecko_msg_gatt_server_user_write_request_evt_t
{
    uint8               connection;
    uint16              characteristic;
    uint8               att_opcode;
    uint16              offset;
    uint8array          value;
});
PACKSTRUCT( struct gecko_msg_gatt_server_characteristic_status_evt_t
{
    uint8               connection;
    uint16              characteristic;
    uint8               status_flags;
    uint16              client_config_flags;
});
PACKSTRUCT( struct gecko_msg_gatt_server_execute_write_completed_evt_t
{
    uint8               connection;
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_endpoint_close_cmd_t
{
    uint8               endpoint;
});
PACKSTRUCT( struct gecko_msg_endpoint_close_rsp_t
{
    uint16              result;
    uint8               endpoint;
});
PACKSTRUCT( struct gecko_msg_endpoint_status_evt_t
{
    uint8               endpoint;
    uint32              type;
    int8                destination_endpoint;
    uint8               flags;
});
PACKSTRUCT( struct gecko_msg_hardware_set_soft_timer_cmd_t
{
    uint32              time;
    uint8               handle;
    uint8               single_shot;
});
PACKSTRUCT( struct gecko_msg_hardware_set_soft_timer_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_hardware_get_time_rsp_t
{
    uint32              seconds;
    uint16              ticks;
});
PACKSTRUCT( struct gecko_msg_hardware_set_lazy_soft_timer_cmd_t
{
    uint32              time;
    uint32              slack;
    uint8               handle;
    uint8               single_shot;
});
PACKSTRUCT( struct gecko_msg_hardware_set_lazy_soft_timer_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_hardware_enable_dcdc_cmd_t
{
    uint8               enable;
});
PACKSTRUCT( struct gecko_msg_hardware_enable_dcdc_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_hardware_soft_timer_evt_t
{
    uint8               handle;
});
PACKSTRUCT( struct gecko_msg_flash_ps_erase_all_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_flash_ps_save_cmd_t
{
    uint16              key;
    uint8array          value;
});
PACKSTRUCT( struct gecko_msg_flash_ps_save_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_flash_ps_load_cmd_t
{
    uint16              key;
});
PACKSTRUCT( struct gecko_msg_flash_ps_load_rsp_t
{
    uint16              result;
    uint8array          value;
});
PACKSTRUCT( struct gecko_msg_flash_ps_erase_cmd_t
{
    uint16              key;
});
PACKSTRUCT( struct gecko_msg_flash_ps_erase_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_test_dtm_tx_cmd_t
{
    uint8               packet_type;
    uint8               length;
    uint8               channel;
    uint8               phy;
});
PACKSTRUCT( struct gecko_msg_test_dtm_tx_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_test_dtm_rx_cmd_t
{
    uint8               channel;
    uint8               phy;
});
PACKSTRUCT( struct gecko_msg_test_dtm_rx_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_test_dtm_end_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_test_debug_command_cmd_t
{
    uint8               id;
    uint8array          debugdata;
});
PACKSTRUCT( struct gecko_msg_test_debug_command_rsp_t
{
    uint16              result;
    uint8               id;
    uint8array          debugdata;
});
PACKSTRUCT( struct gecko_msg_test_debug_counter_cmd_t
{
    uint32              id;
});
PACKSTRUCT( struct gecko_msg_test_debug_counter_rsp_t
{
    uint16              result;
    uint32              value;
});
PACKSTRUCT( struct gecko_msg_test_dtm_completed_evt_t
{
    uint16              result;
    uint16              number_of_packets;
});
PACKSTRUCT( struct gecko_msg_test_hcidump_evt_t
{
    uint32              time;
    uint8               direction;
    uint8               packet_type;
    uint16array         data;
});
PACKSTRUCT( struct gecko_msg_sm_set_bondable_mode_cmd_t
{
    uint8               bondable;
});
PACKSTRUCT( struct gecko_msg_sm_set_bondable_mode_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_sm_configure_cmd_t
{
    uint8               flags;
    uint8               io_capabilities;
});
PACKSTRUCT( struct gecko_msg_sm_configure_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_sm_store_bonding_configuration_cmd_t
{
    uint8               max_bonding_count;
    uint8               policy_flags;
});
PACKSTRUCT( struct gecko_msg_sm_store_bonding_configuration_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_sm_increase_security_cmd_t
{
    uint8               connection;
});
PACKSTRUCT( struct gecko_msg_sm_increase_security_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_sm_delete_bonding_cmd_t
{
    uint8               bonding;
});
PACKSTRUCT( struct gecko_msg_sm_delete_bonding_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_sm_delete_bondings_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_sm_enter_passkey_cmd_t
{
    uint8               connection;
    int32               passkey;
});
PACKSTRUCT( struct gecko_msg_sm_enter_passkey_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_sm_passkey_confirm_cmd_t
{
    uint8               connection;
    uint8               confirm;
});
PACKSTRUCT( struct gecko_msg_sm_passkey_confirm_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_sm_set_oob_data_cmd_t
{
    uint8array          oob_data;
});
PACKSTRUCT( struct gecko_msg_sm_set_oob_data_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_sm_list_all_bondings_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_sm_bonding_confirm_cmd_t
{
    uint8               connection;
    uint8               confirm;
});
PACKSTRUCT( struct gecko_msg_sm_bonding_confirm_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_sm_set_debug_mode_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_sm_set_passkey_cmd_t
{
    int32               passkey;
});
PACKSTRUCT( struct gecko_msg_sm_set_passkey_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_sm_use_sc_oob_cmd_t
{
    uint8               enable;
});
PACKSTRUCT( struct gecko_msg_sm_use_sc_oob_rsp_t
{
    uint16              result;
    uint8array          oob_data;
});
PACKSTRUCT( struct gecko_msg_sm_set_sc_remote_oob_data_cmd_t
{
    uint8array          oob_data;
});
PACKSTRUCT( struct gecko_msg_sm_set_sc_remote_oob_data_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_sm_passkey_display_evt_t
{
    uint8               connection;
    uint32              passkey;
});
PACKSTRUCT( struct gecko_msg_sm_passkey_request_evt_t
{
    uint8               connection;
});
PACKSTRUCT( struct gecko_msg_sm_confirm_passkey_evt_t
{
    uint8               connection;
    uint32              passkey;
});
PACKSTRUCT( struct gecko_msg_sm_bonded_evt_t
{
    uint8               connection;
    uint8               bonding;
});
PACKSTRUCT( struct gecko_msg_sm_bonding_failed_evt_t
{
    uint8               connection;
    uint16              reason;
});
PACKSTRUCT( struct gecko_msg_sm_list_bonding_entry_evt_t
{
    uint8               bonding;
    bd_addr             address;
    uint8               address_type;
});
PACKSTRUCT( struct gecko_msg_sm_confirm_bonding_evt_t
{
    uint8               connection;
    int8                bonding_handle;
});
PACKSTRUCT( struct gecko_msg_homekit_configure_cmd_t
{
    uint8               i2c_address;
    uint8               support_display;
    uint8               hap_attribute_features;
    uint16              category;
    uint8               configuration_number;
    uint16              fast_advert_interval;
    uint16              fast_advert_timeout;
    uint32              flag;
    uint16              broadcast_advert_timeout;
});
PACKSTRUCT( struct gecko_msg_homekit_configure_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_homekit_advertise_cmd_t
{
    uint8               enable;
    uint16              interval_min;
    uint16              interval_max;
    uint8               channel_map;
});
PACKSTRUCT( struct gecko_msg_homekit_advertise_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_homekit_delete_pairings_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_homekit_check_authcp_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_homekit_get_pairing_id_cmd_t
{
    uint8               connection;
});
PACKSTRUCT( struct gecko_msg_homekit_get_pairing_id_rsp_t
{
    uint16              result;
    uint8array          pairing_id;
});
PACKSTRUCT( struct gecko_msg_homekit_send_write_response_cmd_t
{
    uint8               connection;
    uint16              characteristic;
    uint8               status_code;
});
PACKSTRUCT( struct gecko_msg_homekit_send_write_response_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_homekit_send_read_response_cmd_t
{
    uint8               connection;
    uint16              characteristic;
    uint8               status_code;
    uint16              attribute_size;
    uint8array          value;
});
PACKSTRUCT( struct gecko_msg_homekit_send_read_response_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_homekit_gsn_action_cmd_t
{
    uint8               action;
});
PACKSTRUCT( struct gecko_msg_homekit_gsn_action_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_homekit_event_notification_cmd_t
{
    uint8               connection;
    uint16              characteristic;
    uint8               change_originator;
    uint8array          value;
});
PACKSTRUCT( struct gecko_msg_homekit_event_notification_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_homekit_broadcast_action_cmd_t
{
    uint8               action;
    uint8array          params;
});
PACKSTRUCT( struct gecko_msg_homekit_broadcast_action_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_homekit_setupcode_display_evt_t
{
    uint8               connection;
    uint8array          setupcode;
});
PACKSTRUCT( struct gecko_msg_homekit_paired_evt_t
{
    uint8               connection;
    uint16              reason;
});
PACKSTRUCT( struct gecko_msg_homekit_pair_verified_evt_t
{
    uint8               connection;
    uint16              reason;
});
PACKSTRUCT( struct gecko_msg_homekit_connection_opened_evt_t
{
    uint8               connection;
});
PACKSTRUCT( struct gecko_msg_homekit_connection_closed_evt_t
{
    uint8               connection;
    uint16              reason;
});
PACKSTRUCT( struct gecko_msg_homekit_identify_evt_t
{
    uint8               connection;
});
PACKSTRUCT( struct gecko_msg_homekit_write_request_evt_t
{
    uint8               connection;
    uint16              characteristic;
    uint16              chr_value_size;
    uint16              authorization_size;
    uint16              value_offset;
    uint8array          value;
});
PACKSTRUCT( struct gecko_msg_homekit_read_request_evt_t
{
    uint8               connection;
    uint16              characteristic;
    uint16              offset;
});
PACKSTRUCT( struct gecko_msg_homekit_disconnection_required_evt_t
{
    uint8               connection;
    uint16              reason;
});
PACKSTRUCT( struct gecko_msg_homekit_pairing_removed_evt_t
{
    uint8               connection;
    uint16              remaining_pairings;
    uint8array          pairing_id;
});
PACKSTRUCT( struct gecko_msg_homekit_setuppayload_display_evt_t
{
    uint8               connection;
    uint8array          setuppayload;
});
PACKSTRUCT( struct gecko_msg_mesh_node_init_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_node_start_unprov_beaconing_cmd_t
{
    uint8               bearer;
});
PACKSTRUCT( struct gecko_msg_mesh_node_start_unprov_beaconing_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_node_input_oob_request_rsp_cmd_t
{
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_mesh_node_input_oob_request_rsp_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_node_get_uuid_rsp_t
{
    uint16              result;
    uint8array          uuid;
});
PACKSTRUCT( struct gecko_msg_mesh_node_set_provisioning_data_cmd_t
{
    aes_key_128         device_key;
    aes_key_128         network_key;
    uint16              netkey_index;
    uint32              iv_index;
    uint16              address;
    uint8               kr_in_progress;
});
PACKSTRUCT( struct gecko_msg_mesh_node_set_provisioning_data_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_node_init_oob_cmd_t
{
    uint8               public_key;
    uint8               auth_methods;
    uint16              output_actions;
    uint8               output_size;
    uint16              input_actions;
    uint8               input_size;
    uint16              oob_location;
});
PACKSTRUCT( struct gecko_msg_mesh_node_init_oob_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_node_set_ivrecovery_mode_cmd_t
{
    uint8               mode;
});
PACKSTRUCT( struct gecko_msg_mesh_node_set_ivrecovery_mode_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_node_get_ivrecovery_mode_rsp_t
{
    uint16              result;
    uint8               mode;
});
PACKSTRUCT( struct gecko_msg_mesh_node_set_adv_event_filter_cmd_t
{
    uint16              mask;
    uint8array          gap_data_type;
});
PACKSTRUCT( struct gecko_msg_mesh_node_set_adv_event_filter_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_node_get_statistics_rsp_t
{
    uint16              result;
    uint8array          statistics;
});
PACKSTRUCT( struct gecko_msg_mesh_node_clear_statistics_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_node_set_net_relay_delay_cmd_t
{
    uint8               min;
    uint8               max;
});
PACKSTRUCT( struct gecko_msg_mesh_node_set_net_relay_delay_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_node_get_net_relay_delay_rsp_t
{
    uint16              result;
    uint8               min;
    uint8               max;
});
PACKSTRUCT( struct gecko_msg_mesh_node_get_ivupdate_state_rsp_t
{
    uint16              result;
    uint32              ivindex;
    uint8               state;
});
PACKSTRUCT( struct gecko_msg_mesh_node_request_ivupdate_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_node_get_seq_remaining_cmd_t
{
    uint16              elem_index;
});
PACKSTRUCT( struct gecko_msg_mesh_node_get_seq_remaining_rsp_t
{
    uint16              result;
    uint32              count;
});
PACKSTRUCT( struct gecko_msg_mesh_node_save_replay_protection_list_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_node_set_uuid_cmd_t
{
    uuid_128            uuid;
});
PACKSTRUCT( struct gecko_msg_mesh_node_set_uuid_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_node_get_element_address_cmd_t
{
    uint16              elem_index;
});
PACKSTRUCT( struct gecko_msg_mesh_node_get_element_address_rsp_t
{
    uint16              result;
    uint16              address;
});
PACKSTRUCT( struct gecko_msg_mesh_node_static_oob_request_rsp_cmd_t
{
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_mesh_node_static_oob_request_rsp_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_node_initialized_evt_t
{
    uint8               provisioned;
    uint16              address;
    uint32              ivi;
});
PACKSTRUCT( struct gecko_msg_mesh_node_provisioned_evt_t
{
    uint32              iv_index;
    uint16              address;
});
PACKSTRUCT( struct gecko_msg_mesh_node_config_get_evt_t
{
    uint16              id;
    uint16              netkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_node_config_set_evt_t
{
    uint16              id;
    uint16              netkey_index;
    uint8array          value;
});
PACKSTRUCT( struct gecko_msg_mesh_node_display_output_oob_evt_t
{
    uint8               output_action;
    uint8               output_size;
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_mesh_node_input_oob_request_evt_t
{
    uint8               input_action;
    uint8               input_size;
});
PACKSTRUCT( struct gecko_msg_mesh_node_provisioning_started_evt_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_node_provisioning_failed_evt_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_node_key_added_evt_t
{
    uint8               type;
    uint16              index;
    uint16              netkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_node_model_config_changed_evt_t
{
    uint8               mesh_node_config_state;
    uint16              element_address;
    uint16              vendor_id;
    uint16              model_id;
});
PACKSTRUCT( struct gecko_msg_mesh_node_ivrecovery_needed_evt_t
{
    uint32              node_ivindex;
    uint32              network_ivindex;
});
PACKSTRUCT( struct gecko_msg_mesh_node_changed_ivupdate_state_evt_t
{
    uint32              ivindex;
    uint8               state;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_init_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_scan_unprov_beacons_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_provision_device_cmd_t
{
    uint8               network_id;
    uint8array          uuid;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_provision_device_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_create_network_cmd_t
{
    uint8array          key;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_create_network_rsp_t
{
    uint16              result;
    uint8               network_id;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_get_dcd_cmd_t
{
    uint16              address;
    uint8               page;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_get_dcd_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_get_config_cmd_t
{
    uint16              address;
    uint16              id;
    uint16              netkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_get_config_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_set_config_cmd_t
{
    uint16              address;
    uint16              id;
    uint16              netkey_index;
    uint8array          value;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_set_config_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_create_appkey_cmd_t
{
    uint16              netkey_index;
    uint8array          key;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_create_appkey_rsp_t
{
    uint16              result;
    uint16              appkey_index;
    uint8array          key;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_oob_pkey_rsp_cmd_t
{
    uint8array          pkey;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_oob_pkey_rsp_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_oob_auth_rsp_cmd_t
{
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_oob_auth_rsp_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_set_oob_requirements_cmd_t
{
    uint8               public_key;
    uint8               auth_methods;
    uint16              output_actions;
    uint16              input_actions;
    uint8               min_size;
    uint8               max_size;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_set_oob_requirements_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_key_refresh_start_cmd_t
{
    uint16              netkey_index;
    uint8               num_appkeys;
    uint8array          appkey_indices;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_key_refresh_start_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_get_key_refresh_blacklist_cmd_t
{
    uint16              key;
    uint8array          uuid;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_get_key_refresh_blacklist_rsp_t
{
    uint16              result;
    uint8               status;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_set_key_refresh_blacklist_cmd_t
{
    uint16              key;
    uint8               status;
    uint8array          uuid;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_set_key_refresh_blacklist_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_appkey_add_cmd_t
{
    uint16              address;
    uint16              netkey_index;
    uint16              appkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_appkey_add_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_appkey_delete_cmd_t
{
    uint16              address;
    uint16              netkey_index;
    uint16              appkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_appkey_delete_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_app_bind_cmd_t
{
    uint16              address;
    uint16              elem_address;
    uint16              netkey_index;
    uint16              appkey_index;
    uint16              vendor_id;
    uint16              model_id;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_app_bind_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_app_unbind_cmd_t
{
    uint16              address;
    uint16              elem_address;
    uint16              netkey_index;
    uint16              appkey_index;
    uint16              vendor_id;
    uint16              model_id;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_app_unbind_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_app_get_cmd_t
{
    uint16              address;
    uint16              elem_address;
    uint16              netkey_index;
    uint16              vendor_id;
    uint16              model_id;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_app_get_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_sub_add_cmd_t
{
    uint16              address;
    uint16              elem_address;
    uint16              netkey_index;
    uint16              vendor_id;
    uint16              model_id;
    uint16              sub_address;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_sub_add_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_pub_set_cmd_t
{
    uint16              address;
    uint16              elem_address;
    uint16              netkey_index;
    uint16              appkey_index;
    uint16              vendor_id;
    uint16              model_id;
    uint16              pub_address;
    uint8               ttl;
    uint8               period;
    uint8               retrans;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_pub_set_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_provision_gatt_device_cmd_t
{
    uint8               network_id;
    uint8               connection;
    uint8array          uuid;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_provision_gatt_device_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_ddb_get_cmd_t
{
    uint8array          uuid;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_ddb_get_rsp_t
{
    uint16              result;
    aes_key_128         device_key;
    uint16              netkey_index;
    uint16              address;
    uint8               elements;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_ddb_delete_cmd_t
{
    uuid_128            uuid;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_ddb_delete_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_ddb_add_cmd_t
{
    uuid_128            uuid;
    aes_key_128         device_key;
    uint16              netkey_index;
    uint16              address;
    uint8               elements;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_ddb_add_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_ddb_list_devices_rsp_t
{
    uint16              result;
    uint16              count;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_network_add_cmd_t
{
    uint16              address;
    uint16              netkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_network_add_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_network_delete_cmd_t
{
    uint16              address;
    uint16              netkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_network_delete_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_nettx_get_cmd_t
{
    uint16              address;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_nettx_get_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_nettx_set_cmd_t
{
    uint16              address;
    uint8               count;
    uint8               interval;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_nettx_set_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_sub_del_cmd_t
{
    uint16              address;
    uint16              elem_address;
    uint16              netkey_index;
    uint16              vendor_id;
    uint16              model_id;
    uint16              sub_address;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_sub_del_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_sub_add_va_cmd_t
{
    uint16              address;
    uint16              elem_address;
    uint16              netkey_index;
    uint16              vendor_id;
    uint16              model_id;
    uint8array          sub_address;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_sub_add_va_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_sub_del_va_cmd_t
{
    uint16              address;
    uint16              elem_address;
    uint16              netkey_index;
    uint16              vendor_id;
    uint16              model_id;
    uint8array          sub_address;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_sub_del_va_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_sub_set_cmd_t
{
    uint16              address;
    uint16              elem_address;
    uint16              netkey_index;
    uint16              vendor_id;
    uint16              model_id;
    uint16              sub_address;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_sub_set_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_sub_set_va_cmd_t
{
    uint16              address;
    uint16              elem_address;
    uint16              netkey_index;
    uint16              vendor_id;
    uint16              model_id;
    uint8array          sub_address;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_sub_set_va_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_heartbeat_publication_get_cmd_t
{
    uint16              address;
    uint16              netkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_heartbeat_publication_get_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_heartbeat_publication_set_cmd_t
{
    uint16              address;
    uint16              netkey_index;
    uint16              publication_address;
    uint8               count_log;
    uint8               period_log;
    uint8               ttl;
    uint16              features;
    uint16              publication_netkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_heartbeat_publication_set_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_heartbeat_subscription_get_cmd_t
{
    uint16              address;
    uint16              netkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_heartbeat_subscription_get_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_heartbeat_subscription_set_cmd_t
{
    uint16              address;
    uint16              netkey_index;
    uint16              subscription_source;
    uint16              subscription_destination;
    uint8               period_log;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_heartbeat_subscription_set_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_relay_get_cmd_t
{
    uint16              address;
    uint16              netkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_relay_get_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_relay_set_cmd_t
{
    uint16              address;
    uint16              netkey_index;
    uint8               relay;
    uint8               count;
    uint8               interval;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_relay_set_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_reset_node_cmd_t
{
    uint16              address;
    uint16              netkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_reset_node_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_appkey_get_cmd_t
{
    uint16              address;
    uint16              netkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_appkey_get_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_network_get_cmd_t
{
    uint16              address;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_network_get_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_sub_clear_cmd_t
{
    uint16              address;
    uint16              elem_address;
    uint16              netkey_index;
    uint16              vendor_id;
    uint16              model_id;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_sub_clear_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_pub_get_cmd_t
{
    uint16              address;
    uint16              elem_address;
    uint16              vendor_id;
    uint16              model_id;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_pub_get_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_pub_set_va_cmd_t
{
    uint16              address;
    uint16              elem_address;
    uint16              netkey_index;
    uint16              appkey_index;
    uint16              vendor_id;
    uint16              model_id;
    uint8               ttl;
    uint8               period;
    uint8               retrans;
    uint8array          pub_address;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_pub_set_va_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_pub_set_cred_cmd_t
{
    uint16              address;
    uint16              elem_address;
    uint16              netkey_index;
    uint16              appkey_index;
    uint16              vendor_id;
    uint16              model_id;
    uint16              pub_address;
    uint8               ttl;
    uint8               period;
    uint8               retrans;
    uint8               credentials;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_pub_set_cred_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_pub_set_va_cred_cmd_t
{
    uint16              address;
    uint16              elem_address;
    uint16              netkey_index;
    uint16              appkey_index;
    uint16              vendor_id;
    uint16              model_id;
    uint8               ttl;
    uint8               period;
    uint8               retrans;
    uint8               credentials;
    uint8array          pub_address;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_pub_set_va_cred_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_sub_get_cmd_t
{
    uint16              address;
    uint16              elem_address;
    uint16              netkey_index;
    uint16              vendor_id;
    uint16              model_id;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_sub_get_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_friend_timeout_get_cmd_t
{
    uint16              address;
    uint16              netkey_index;
    uint16              lpn_address;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_friend_timeout_get_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_initialized_evt_t
{
    uint8               networks;
    uint16              address;
    uint32              ivi;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_provisioning_failed_evt_t
{
    uint8               reason;
    uint8array          uuid;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_device_provisioned_evt_t
{
    uint16              address;
    uint8array          uuid;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_unprov_beacon_evt_t
{
    uint16              oob_capabilities;
    uint32              uri_hash;
    uint8               bearer;
    bd_addr             address;
    uint8               address_type;
    uint8array          uuid;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_dcd_status_evt_t
{
    uint16              result;
    uint16              address;
    uint16              cid;
    uint16              pid;
    uint16              vid;
    uint16              crpl;
    uint16              features;
    uint8               elements;
    uint8               models;
    uint8array          element_data;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_config_status_evt_t
{
    uint16              address;
    uint16              id;
    uint8               status;
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_oob_pkey_request_evt_t
{
    uint8array          uuid;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_oob_auth_request_evt_t
{
    uint8               output;
    uint8               output_action;
    uint8               output_size;
    uint8array          uuid;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_oob_display_input_evt_t
{
    uint8               input_action;
    uint8               input_size;
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_ddb_list_evt_t
{
    uuid_128            uuid;
    uint16              address;
    uint8               elements;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_heartbeat_publication_status_evt_t
{
    uint16              address;
    uint16              netkey_index;
    uint16              publication_address;
    uint8               count_log;
    uint8               period_log;
    uint8               ttl;
    uint16              features;
    uint16              publication_netkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_heartbeat_subscription_status_evt_t
{
    uint16              address;
    uint16              netkey_index;
    uint16              subscription_source;
    uint16              subscription_destination;
    uint8               period_log;
    uint8               count_log;
    uint8               min_hops;
    uint8               max_hops;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_relay_status_evt_t
{
    uint16              address;
    uint16              netkey_index;
    uint8               value;
    uint8               count;
    uint8               interval;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_uri_evt_t
{
    uint32              hash;
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_node_reset_evt_t
{
    uint16              address;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_appkey_list_evt_t
{
    uint16              address;
    uint16              netkey_index;
    uint16              appkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_appkey_list_end_evt_t
{
    uint16              result;
    uint16              address;
    uint16              netkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_network_list_evt_t
{
    uint16              address;
    uint16              netkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_network_list_end_evt_t
{
    uint16              result;
    uint16              address;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_pub_status_evt_t
{
    uint16              result;
    uint16              elem_address;
    uint16              vendor_id;
    uint16              model_id;
    uint16              appkey_index;
    uint16              pub_address;
    uint8               ttl;
    uint8               period;
    uint8               retrans;
    uint8               credentials;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_key_refresh_phase_update_evt_t
{
    uint16              key;
    uint8               phase;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_key_refresh_node_update_evt_t
{
    uint16              key;
    uint8               phase;
    uint8array          uuid;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_key_refresh_complete_evt_t
{
    uint16              key;
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_sub_addr_evt_t
{
    uint16              elem_address;
    uint16              vendor_id;
    uint16              model_id;
    uint16              sub_addr;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_model_sub_addr_end_evt_t
{
    uint16              result;
    uint16              elem_address;
    uint16              vendor_id;
    uint16              model_id;
});
PACKSTRUCT( struct gecko_msg_mesh_prov_friend_timeout_status_evt_t
{
    uint16              address;
    uint16              netkey_index;
    uint32              timeout;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_dump_keys_cmd_t
{
    uint8               node_handle;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_dump_keys_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_prov_dump_database_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_prov_load_database_entries_cmd_t
{
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_prov_load_database_entries_rsp_t
{
    uint16              result;
    uint8               count;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_set_mask_cmd_t
{
    uint16              mask;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_set_mask_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_set_kludges_cmd_t
{
    uint16              mask;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_set_kludges_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_rssi_limit_set_cmd_t
{
    int8                rssi;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_rssi_limit_set_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_add_va_cmd_t
{
    uint8array          label;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_add_va_rsp_t
{
    uint16              result;
    int8                index;
    uint16              hash;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_unref_va_cmd_t
{
    int8                index;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_unref_va_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_dump_va_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_set_white_list_item_cmd_t
{
    uint8               index;
    bd_addr             mac;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_set_white_list_item_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_set_white_list_active_cmd_t
{
    uint8               status;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_set_white_list_active_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_node_set_static_oob_data_cmd_t
{
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_node_set_static_oob_data_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_node_set_oob_eckey_cmd_t
{
    uint8array          key;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_node_set_oob_eckey_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_node_get_oob_eckey_rsp_t
{
    uint16              result;
    uint8array          key;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_node_get_static_oob_data_rsp_t
{
    uint16              result;
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_network_trace_config_cmd_t
{
    uint16              events;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_network_trace_config_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_network_update_cmd_t
{
    uint16              address;
    uint16              netkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_network_update_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_appkey_update_cmd_t
{
    uint16              address;
    uint16              netkey_index;
    uint16              appkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_appkey_update_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_proxy_listen_rsp_t
{
    uint16              result;
    uint32              handle;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_set_scan_cmd_t
{
    uint8               state;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_set_scan_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_node_set_oob_uri_cmd_t
{
    uint8array          uri;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_node_set_oob_uri_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_node_get_oob_uri_rsp_t
{
    uint16              result;
    uint8array          uri;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_node_init_cfgcl_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_key_refresh_start_noauto_cmd_t
{
    uint16              netkey_index;
    uint8               num_appkeys;
    uint8array          appkey_indices;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_key_refresh_start_noauto_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_key_refresh_next_phase_cmd_t
{
    uint16              netkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_key_refresh_next_phase_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_net_send_cmd_t
{
    uint16              key;
    uint16              element_index;
    uint16              dst;
    uint8               ttl;
    uint8               ctl;
    uint8array          message;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_net_send_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_key_evt_t
{
    uint16              id;
    uint8               type;
    uint8               flags;
    uint16              index;
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_msg_evt_t
{
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_prov_database_entry_evt_t
{
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_va_evt_t
{
    int8                index;
    uint16              hash;
    uint8array          label;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_network_trace_pdu_evt_t
{
    uint16              index;
    uint8               nid;
    uint32              ivi;
    uint8               ctl;
    uint8               ttl;
    uint32              seq;
    uint16              src;
    uint16              dst;
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_network_trace_access_payload_evt_t
{
    uint16              index;
    uint16              opcode;
    uint16              vendor;
    uint16              length;
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_network_status_evt_t
{
    uint16              result;
    uint16              address;
    uint16              netkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_appkey_status_evt_t
{
    uint16              result;
    uint16              address;
    uint16              netkey_index;
    uint16              appkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_debug_transport_rx_cancelled_evt_t
{
    uint16              src;
    uint16              dst;
    uint32              seq_auth;
});
PACKSTRUCT( struct gecko_msg_proxy_radio_proxy_send_adv_cmd_t
{
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_proxy_radio_proxy_send_adv_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_proxy_radio_child_adv_req_done_cmd_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_proxy_radio_child_adv_req_done_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_proxy_radio_child_adv_data_cmd_t
{
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_proxy_radio_child_adv_data_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_proxy_radio_get_ms_ticks_rsp_t
{
    uint16              result;
    uint32              ms;
});
PACKSTRUCT( struct gecko_msg_proxy_radio_test_timer_cmd_t
{
    uint32              ms;
});
PACKSTRUCT( struct gecko_msg_proxy_radio_test_timer_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_proxy_radio_proxy_adv_data_evt_t
{
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_proxy_radio_child_adv_req_evt_t
{
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_proxy_radio_child_adv_params_req_evt_t
{
    uint16              adv_interval_min;
    uint16              adv_interval_max;
    uint8               own_address_type;
    uint8               adv_channel_map;
    uint16              scan_interval;
    uint16              scan_window;
});
PACKSTRUCT( struct gecko_msg_proxy_radio_test_timer_expired_evt_t
{
    uint16              dummy;
});
PACKSTRUCT( struct gecko_msg_mesh_proxy_connect_cmd_t
{
    uint8               connection;
});
PACKSTRUCT( struct gecko_msg_mesh_proxy_connect_rsp_t
{
    uint16              result;
    uint32              handle;
});
PACKSTRUCT( struct gecko_msg_mesh_proxy_disconnect_cmd_t
{
    uint32              handle;
});
PACKSTRUCT( struct gecko_msg_mesh_proxy_disconnect_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_proxy_set_filter_type_cmd_t
{
    uint32              handle;
    uint8               type;
    uint16              key;
});
PACKSTRUCT( struct gecko_msg_mesh_proxy_set_filter_type_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_proxy_allow_cmd_t
{
    uint32              handle;
    uint16              address;
    uint16              key;
});
PACKSTRUCT( struct gecko_msg_mesh_proxy_allow_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_proxy_deny_cmd_t
{
    uint32              handle;
    uint16              address;
    uint16              key;
});
PACKSTRUCT( struct gecko_msg_mesh_proxy_deny_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_proxy_connected_evt_t
{
    uint32              handle;
});
PACKSTRUCT( struct gecko_msg_mesh_proxy_disconnected_evt_t
{
    uint32              handle;
    uint16              reason;
});
PACKSTRUCT( struct gecko_msg_mesh_proxy_filter_status_evt_t
{
    uint32              handle;
    uint8               type;
    uint16              count;
});
PACKSTRUCT( struct gecko_msg_mesh_vendor_model_send_cmd_t
{
    uint16              elem_index;
    uint16              vendor_id;
    uint16              model_id;
    uint16              destination_address;
    int8                va_index;
    uint16              appkey_index;
    uint8               nonrelayed;
    uint8               opcode;
    uint8               final;
    uint8array          payload;
});
PACKSTRUCT( struct gecko_msg_mesh_vendor_model_send_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_vendor_model_set_publication_cmd_t
{
    uint16              elem_index;
    uint16              vendor_id;
    uint16              model_id;
    uint8               opcode;
    uint8               final;
    uint8array          payload;
});
PACKSTRUCT( struct gecko_msg_mesh_vendor_model_set_publication_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_vendor_model_clear_publication_cmd_t
{
    uint16              elem_index;
    uint16              vendor_id;
    uint16              model_id;
});
PACKSTRUCT( struct gecko_msg_mesh_vendor_model_clear_publication_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_vendor_model_publish_cmd_t
{
    uint16              elem_index;
    uint16              vendor_id;
    uint16              model_id;
});
PACKSTRUCT( struct gecko_msg_mesh_vendor_model_publish_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_vendor_model_init_cmd_t
{
    uint16              elem_index;
    uint16              vendor_id;
    uint16              model_id;
    uint8               publish;
    uint8array          opcodes;
});
PACKSTRUCT( struct gecko_msg_mesh_vendor_model_init_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_vendor_model_deinit_cmd_t
{
    uint16              elem_index;
    uint16              vendor_id;
    uint16              model_id;
});
PACKSTRUCT( struct gecko_msg_mesh_vendor_model_deinit_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_vendor_model_receive_evt_t
{
    uint16              elem_index;
    uint16              vendor_id;
    uint16              model_id;
    uint16              source_address;
    uint16              destination_address;
    int8                va_index;
    uint16              appkey_index;
    uint8               nonrelayed;
    uint8               opcode;
    uint8               final;
    uint8array          payload;
});
PACKSTRUCT( struct gecko_msg_mesh_health_client_get_cmd_t
{
    uint16              elem_index;
    uint16              server_address;
    uint16              appkey_index;
    uint16              vendor_id;
});
PACKSTRUCT( struct gecko_msg_mesh_health_client_get_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_health_client_clear_cmd_t
{
    uint16              elem_index;
    uint16              server_address;
    uint16              appkey_index;
    uint16              vendor_id;
    uint8               reliable;
});
PACKSTRUCT( struct gecko_msg_mesh_health_client_clear_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_health_client_test_cmd_t
{
    uint16              elem_index;
    uint16              server_address;
    uint16              appkey_index;
    uint8               test_id;
    uint16              vendor_id;
    uint8               reliable;
});
PACKSTRUCT( struct gecko_msg_mesh_health_client_test_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_health_client_get_period_cmd_t
{
    uint16              elem_index;
    uint16              server_address;
    uint16              appkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_health_client_get_period_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_health_client_set_period_cmd_t
{
    uint16              elem_index;
    uint16              server_address;
    uint16              appkey_index;
    uint8               period;
    uint8               reliable;
});
PACKSTRUCT( struct gecko_msg_mesh_health_client_set_period_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_health_client_get_attention_cmd_t
{
    uint16              elem_index;
    uint16              server_address;
    uint16              appkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_health_client_get_attention_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_health_client_set_attention_cmd_t
{
    uint16              elem_index;
    uint16              server_address;
    uint16              appkey_index;
    uint8               attention;
    uint8               reliable;
});
PACKSTRUCT( struct gecko_msg_mesh_health_client_set_attention_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_health_client_server_status_evt_t
{
    uint16              result;
    uint16              elem_index;
    uint16              client_address;
    uint16              server_address;
    uint8               current;
    uint8               test_id;
    uint16              vendor_id;
    uint8array          faults;
});
PACKSTRUCT( struct gecko_msg_mesh_health_client_server_status_period_evt_t
{
    uint16              result;
    uint16              elem_index;
    uint16              client_address;
    uint16              server_address;
    uint8               period;
});
PACKSTRUCT( struct gecko_msg_mesh_health_client_server_status_attention_evt_t
{
    uint16              result;
    uint16              elem_index;
    uint16              client_address;
    uint16              server_address;
    uint8               attention;
});
PACKSTRUCT( struct gecko_msg_mesh_health_server_set_fault_cmd_t
{
    uint16              elem_index;
    uint8               id;
});
PACKSTRUCT( struct gecko_msg_mesh_health_server_set_fault_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_health_server_clear_fault_cmd_t
{
    uint16              elem_index;
    uint8               id;
});
PACKSTRUCT( struct gecko_msg_mesh_health_server_clear_fault_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_health_server_test_response_cmd_t
{
    uint16              elem_index;
    uint16              client_address;
    uint16              appkey_index;
    uint16              vendor_id;
});
PACKSTRUCT( struct gecko_msg_mesh_health_server_test_response_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_health_server_attention_evt_t
{
    uint16              elem_index;
    uint8               timer;
});
PACKSTRUCT( struct gecko_msg_mesh_health_server_test_request_evt_t
{
    uint16              elem_index;
    uint16              client_address;
    uint16              server_address;
    uint16              appkey_index;
    uint8               test_id;
    uint16              vendor_id;
    uint8               response_required;
});
PACKSTRUCT( struct gecko_msg_mesh_srtest_client_init_cmd_t
{
    uint16              elem_index;
    uint16              packet_size;
    uint8               force_segmentation;
    uint32              packet_rate;
    uint32              run_length;
});
PACKSTRUCT( struct gecko_msg_mesh_srtest_client_init_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_srtest_client_deinit_cmd_t
{
    uint16              elem_index;
});
PACKSTRUCT( struct gecko_msg_mesh_srtest_client_deinit_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_srtest_client_run_cmd_t
{
    uint16              elem_index;
    uint16              server_address;
    uint16              appkey_index;
    uint8               tid;
});
PACKSTRUCT( struct gecko_msg_mesh_srtest_client_run_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_srtest_client_stop_cmd_t
{
    uint16              elem_index;
    uint16              server_address;
    uint16              appkey_index;
    uint8               tid;
});
PACKSTRUCT( struct gecko_msg_mesh_srtest_client_stop_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_srtest_client_status_cmd_t
{
    uint16              elem_index;
    uint16              server_address;
    uint16              appkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_srtest_client_status_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_srtest_client_statistics_cmd_t
{
    uint16              elem_index;
});
PACKSTRUCT( struct gecko_msg_mesh_srtest_client_statistics_rsp_t
{
    uint16              result;
    uint32              data_received;
    uint32              ack_success;
    uint32              ack_failure;
});
PACKSTRUCT( struct gecko_msg_mesh_srtest_client_server_status_evt_t
{
    uint16              elem_index;
    uint16              client_address;
    uint16              server_address;
    uint16              appkey_index;
    uint16              size;
    uint8               force_segmentation;
    uint32              rate;
    uint32              run_length;
});
PACKSTRUCT( struct gecko_msg_mesh_srtest_server_init_cmd_t
{
    uint16              elem_index;
});
PACKSTRUCT( struct gecko_msg_mesh_srtest_server_init_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_srtest_server_deinit_cmd_t
{
    uint16              elem_index;
});
PACKSTRUCT( struct gecko_msg_mesh_srtest_server_deinit_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_srtest_server_statistics_cmd_t
{
    uint16              elem_index;
});
PACKSTRUCT( struct gecko_msg_mesh_srtest_server_statistics_rsp_t
{
    uint16              result;
    uint32              send_success;
    uint32              send_failure;
    uint32              acks_received;
    uint32              tr_time_min;
    uint32              tr_time_max;
    uint32              tr_time_avg;
    uint32              stale_acks_received;
});
PACKSTRUCT( struct gecko_msg_mesh_srtest_server_state_changed_evt_t
{
    uint16              elem_index;
    uint16              client_address;
    uint16              server_address;
    uint16              appkey_index;
    uint16              size;
    uint8               force_segmentation;
    uint16              rate;
    uint32              run_length;
});
PACKSTRUCT( struct gecko_msg_mesh_srtest_server_run_started_evt_t
{
    uint16              elem_index;
});
PACKSTRUCT( struct gecko_msg_mesh_srtest_server_run_ended_evt_t
{
    uint16              elem_index;
});
PACKSTRUCT( struct gecko_msg_mesh_srtest_server_statistics_dump_evt_t
{
    uint16              elem_index;
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_mesh_generic_client_get_cmd_t
{
    uint16              model_id;
    uint16              elem_index;
    uint16              server_address;
    uint16              appkey_index;
    uint8               type;
});
PACKSTRUCT( struct gecko_msg_mesh_generic_client_get_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_generic_client_set_cmd_t
{
    uint16              model_id;
    uint16              elem_index;
    uint16              server_address;
    uint16              appkey_index;
    uint8               tid;
    uint32              transition;
    uint16              delay;
    uint16              flags;
    uint8               type;
    uint8array          parameters;
});
PACKSTRUCT( struct gecko_msg_mesh_generic_client_set_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_generic_client_publish_cmd_t
{
    uint16              model_id;
    uint16              elem_index;
    uint8               tid;
    uint32              transition;
    uint16              delay;
    uint16              flags;
    uint8               type;
    uint8array          parameters;
});
PACKSTRUCT( struct gecko_msg_mesh_generic_client_publish_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_generic_client_get_params_cmd_t
{
    uint16              model_id;
    uint16              elem_index;
    uint16              server_address;
    uint16              appkey_index;
    uint8               type;
    uint8array          parameters;
});
PACKSTRUCT( struct gecko_msg_mesh_generic_client_get_params_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_generic_client_init_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_generic_client_server_status_evt_t
{
    uint16              model_id;
    uint16              elem_index;
    uint16              client_address;
    uint16              server_address;
    uint32              remaining;
    uint16              flags;
    uint8               type;
    uint8array          parameters;
});
PACKSTRUCT( struct gecko_msg_mesh_generic_server_response_cmd_t
{
    uint16              model_id;
    uint16              elem_index;
    uint16              client_address;
    uint16              appkey_index;
    uint32              remaining;
    uint16              flags;
    uint8               type;
    uint8array          parameters;
});
PACKSTRUCT( struct gecko_msg_mesh_generic_server_response_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_generic_server_update_cmd_t
{
    uint16              model_id;
    uint16              elem_index;
    uint32              remaining;
    uint8               type;
    uint8array          parameters;
});
PACKSTRUCT( struct gecko_msg_mesh_generic_server_update_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_generic_server_publish_cmd_t
{
    uint16              model_id;
    uint16              elem_index;
    uint8               type;
});
PACKSTRUCT( struct gecko_msg_mesh_generic_server_publish_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_generic_server_init_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_generic_server_client_request_evt_t
{
    uint16              model_id;
    uint16              elem_index;
    uint16              client_address;
    uint16              server_address;
    uint16              appkey_index;
    uint32              transition;
    uint16              delay;
    uint16              flags;
    uint8               type;
    uint8array          parameters;
});
PACKSTRUCT( struct gecko_msg_mesh_generic_server_state_changed_evt_t
{
    uint16              model_id;
    uint16              elem_index;
    uint32              remaining;
    uint8               type;
    uint8array          parameters;
});
PACKSTRUCT( struct gecko_msg_coex_set_options_cmd_t
{
    uint32              mask;
    uint32              options;
});
PACKSTRUCT( struct gecko_msg_coex_set_options_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_coex_get_counters_cmd_t
{
    uint8               reset;
});
PACKSTRUCT( struct gecko_msg_coex_get_counters_rsp_t
{
    uint16              result;
    uint8array          counters;
});
PACKSTRUCT( struct gecko_msg_mesh_test_get_nettx_rsp_t
{
    uint16              result;
    uint8               count;
    uint8               interval;
});
PACKSTRUCT( struct gecko_msg_mesh_test_set_nettx_cmd_t
{
    uint8               count;
    uint8               interval;
});
PACKSTRUCT( struct gecko_msg_mesh_test_set_nettx_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_test_get_relay_rsp_t
{
    uint16              result;
    uint8               enabled;
    uint8               count;
    uint8               interval;
});
PACKSTRUCT( struct gecko_msg_mesh_test_set_relay_cmd_t
{
    uint8               enabled;
    uint8               count;
    uint8               interval;
});
PACKSTRUCT( struct gecko_msg_mesh_test_set_relay_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_test_set_adv_scan_params_cmd_t
{
    uint16              adv_interval_min;
    uint16              adv_interval_max;
    uint8               adv_repeat_packets;
    uint8               adv_use_random_address;
    uint8               adv_channel_map;
    uint16              scan_interval;
    uint16              scan_window;
});
PACKSTRUCT( struct gecko_msg_mesh_test_set_adv_scan_params_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_test_set_ivupdate_test_mode_cmd_t
{
    uint8               mode;
});
PACKSTRUCT( struct gecko_msg_mesh_test_set_ivupdate_test_mode_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_test_get_ivupdate_test_mode_rsp_t
{
    uint16              result;
    uint8               mode;
});
PACKSTRUCT( struct gecko_msg_mesh_test_set_segment_send_delay_cmd_t
{
    uint8               delay;
});
PACKSTRUCT( struct gecko_msg_mesh_test_set_segment_send_delay_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_test_set_ivupdate_state_cmd_t
{
    uint8               state;
});
PACKSTRUCT( struct gecko_msg_mesh_test_set_ivupdate_state_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_test_send_beacons_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_test_bind_local_model_app_cmd_t
{
    uint16              elem_index;
    uint16              appkey_index;
    uint16              vendor_id;
    uint16              model_id;
});
PACKSTRUCT( struct gecko_msg_mesh_test_bind_local_model_app_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_test_unbind_local_model_app_cmd_t
{
    uint16              elem_index;
    uint16              appkey_index;
    uint16              vendor_id;
    uint16              model_id;
});
PACKSTRUCT( struct gecko_msg_mesh_test_unbind_local_model_app_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_test_add_local_model_sub_cmd_t
{
    uint16              elem_index;
    uint16              vendor_id;
    uint16              model_id;
    uint16              sub_address;
});
PACKSTRUCT( struct gecko_msg_mesh_test_add_local_model_sub_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_test_del_local_model_sub_cmd_t
{
    uint16              elem_index;
    uint16              vendor_id;
    uint16              model_id;
    uint16              sub_address;
});
PACKSTRUCT( struct gecko_msg_mesh_test_del_local_model_sub_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_test_add_local_model_sub_va_cmd_t
{
    uint16              elem_index;
    uint16              vendor_id;
    uint16              model_id;
    uint8array          sub_address;
});
PACKSTRUCT( struct gecko_msg_mesh_test_add_local_model_sub_va_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_test_del_local_model_sub_va_cmd_t
{
    uint16              elem_index;
    uint16              vendor_id;
    uint16              model_id;
    uint8array          sub_address;
});
PACKSTRUCT( struct gecko_msg_mesh_test_del_local_model_sub_va_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_test_get_local_model_sub_cmd_t
{
    uint16              elem_index;
    uint16              vendor_id;
    uint16              model_id;
});
PACKSTRUCT( struct gecko_msg_mesh_test_get_local_model_sub_rsp_t
{
    uint16              result;
    uint8array          addresses;
});
PACKSTRUCT( struct gecko_msg_mesh_test_set_local_model_pub_cmd_t
{
    uint16              elem_index;
    uint16              appkey_index;
    uint16              vendor_id;
    uint16              model_id;
    uint16              pub_address;
    uint8               ttl;
    uint8               period;
    uint8               retrans;
    uint8               credentials;
});
PACKSTRUCT( struct gecko_msg_mesh_test_set_local_model_pub_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_test_set_local_model_pub_va_cmd_t
{
    uint16              elem_index;
    uint16              appkey_index;
    uint16              vendor_id;
    uint16              model_id;
    uint8               ttl;
    uint8               period;
    uint8               retrans;
    uint8               credentials;
    uint8array          pub_address;
});
PACKSTRUCT( struct gecko_msg_mesh_test_set_local_model_pub_va_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_test_get_local_model_pub_cmd_t
{
    uint16              elem_index;
    uint16              vendor_id;
    uint16              model_id;
});
PACKSTRUCT( struct gecko_msg_mesh_test_get_local_model_pub_rsp_t
{
    uint16              result;
    uint16              appkey_index;
    uint16              pub_address;
    uint8               ttl;
    uint8               period;
    uint8               retrans;
    uint8               credentials;
});
PACKSTRUCT( struct gecko_msg_mesh_test_set_local_heartbeat_subscription_cmd_t
{
    uint16              subscription_source;
    uint16              subscription_destination;
    uint8               period_log;
});
PACKSTRUCT( struct gecko_msg_mesh_test_set_local_heartbeat_subscription_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_test_get_local_heartbeat_subscription_rsp_t
{
    uint16              result;
    uint16              count;
    uint8               hop_min;
    uint8               hop_max;
});
PACKSTRUCT( struct gecko_msg_mesh_test_get_local_heartbeat_publication_rsp_t
{
    uint16              result;
    uint16              publication_address;
    uint8               count;
    uint8               period_log;
    uint8               ttl;
    uint16              features;
    uint16              publication_netkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_test_set_local_heartbeat_publication_cmd_t
{
    uint16              publication_address;
    uint8               count_log;
    uint8               period_log;
    uint8               ttl;
    uint16              features;
    uint16              publication_netkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_test_set_local_heartbeat_publication_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_test_set_local_config_cmd_t
{
    uint16              id;
    uint16              netkey_index;
    uint8array          value;
});
PACKSTRUCT( struct gecko_msg_mesh_test_set_local_config_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_test_get_local_config_cmd_t
{
    uint16              id;
    uint16              netkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_test_get_local_config_rsp_t
{
    uint16              result;
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_mesh_test_add_local_key_cmd_t
{
    uint8               key_type;
    aes_key_128         key;
    uint16              key_index;
    uint16              netkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_test_add_local_key_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_test_del_local_key_cmd_t
{
    uint8               key_type;
    uint16              key_index;
});
PACKSTRUCT( struct gecko_msg_mesh_test_del_local_key_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_test_update_local_key_cmd_t
{
    uint8               key_type;
    aes_key_128         key;
    uint16              key_index;
});
PACKSTRUCT( struct gecko_msg_mesh_test_update_local_key_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_test_set_sar_config_cmd_t
{
    uint32              incomplete_timer_ms;
    uint32              pending_ack_base_ms;
    uint32              pending_ack_mul_ms;
    uint32              wait_for_ack_base_ms;
    uint32              wait_for_ack_mul_ms;
    uint8               max_send_rounds;
});
PACKSTRUCT( struct gecko_msg_mesh_test_set_sar_config_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_test_get_element_seqnum_cmd_t
{
    uint16              elem_index;
});
PACKSTRUCT( struct gecko_msg_mesh_test_get_element_seqnum_rsp_t
{
    uint16              result;
    uint32              seqnum;
});
PACKSTRUCT( struct gecko_msg_mesh_test_local_heartbeat_subscription_complete_evt_t
{
    uint16              count;
    uint8               hop_min;
    uint8               hop_max;
});
PACKSTRUCT( struct gecko_msg_mesh_lpn_init_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_lpn_deinit_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_lpn_configure_cmd_t
{
    uint8               queue_length;
    uint32              poll_timeout;
});
PACKSTRUCT( struct gecko_msg_mesh_lpn_configure_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_lpn_establish_friendship_cmd_t
{
    uint16              netkey_index;
});
PACKSTRUCT( struct gecko_msg_mesh_lpn_establish_friendship_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_lpn_poll_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_lpn_terminate_friendship_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_lpn_friendship_established_evt_t
{
    uint16              friend_address;
});
PACKSTRUCT( struct gecko_msg_mesh_lpn_friendship_failed_evt_t
{
    uint16              reason;
});
PACKSTRUCT( struct gecko_msg_mesh_lpn_friendship_terminated_evt_t
{
    uint16              reason;
});
PACKSTRUCT( struct gecko_msg_mesh_friend_init_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_friend_deinit_rsp_t
{
    uint16              result;
});
PACKSTRUCT( struct gecko_msg_mesh_friend_friendship_established_evt_t
{
    uint16              lpn_address;
});
PACKSTRUCT( struct gecko_msg_mesh_friend_friendship_terminated_evt_t
{
    uint16              reason;
});
PACKSTRUCT( struct gecko_msg_user_message_to_target_cmd_t
{
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_user_message_to_target_rsp_t
{
    uint16              result;
    uint8array          data;
});
PACKSTRUCT( struct gecko_msg_user_message_to_host_evt_t
{
    uint8array          data;
});


/**
 * The command packet type. This does not include the size of the byte array data payload in the end.
 * The full size of a command packet is 4 + the configured payload size at system initialization.
 */
PACKSTRUCT( struct gecko_cmd_packet
{
    uint32   header;

union{
    uint8 handle;
    struct gecko_msg_dfu_reset_cmd_t                             cmd_dfu_reset;
    struct gecko_msg_dfu_flash_set_address_cmd_t                 cmd_dfu_flash_set_address;
    struct gecko_msg_dfu_flash_set_address_rsp_t                 rsp_dfu_flash_set_address;
    struct gecko_msg_dfu_flash_upload_cmd_t                      cmd_dfu_flash_upload;
    struct gecko_msg_dfu_flash_upload_rsp_t                      rsp_dfu_flash_upload;
    struct gecko_msg_dfu_flash_upload_finish_rsp_t               rsp_dfu_flash_upload_finish;
    struct gecko_msg_dfu_boot_evt_t                              evt_dfu_boot;
    struct gecko_msg_dfu_boot_failure_evt_t                      evt_dfu_boot_failure;
    struct gecko_msg_system_hello_rsp_t                          rsp_system_hello;
    struct gecko_msg_system_reset_cmd_t                          cmd_system_reset;
    struct gecko_msg_system_get_bt_address_rsp_t                 rsp_system_get_bt_address;
    struct gecko_msg_system_set_bt_address_cmd_t                 cmd_system_set_bt_address;
    struct gecko_msg_system_set_bt_address_rsp_t                 rsp_system_set_bt_address;
    struct gecko_msg_system_set_tx_power_cmd_t                   cmd_system_set_tx_power;
    struct gecko_msg_system_set_tx_power_rsp_t                   rsp_system_set_tx_power;
    struct gecko_msg_system_get_random_data_cmd_t                cmd_system_get_random_data;
    struct gecko_msg_system_get_random_data_rsp_t                rsp_system_get_random_data;
    struct gecko_msg_system_halt_cmd_t                           cmd_system_halt;
    struct gecko_msg_system_halt_rsp_t                           rsp_system_halt;
    struct gecko_msg_system_set_device_name_cmd_t                cmd_system_set_device_name;
    struct gecko_msg_system_set_device_name_rsp_t                rsp_system_set_device_name;
    struct gecko_msg_system_linklayer_configure_cmd_t            cmd_system_linklayer_configure;
    struct gecko_msg_system_linklayer_configure_rsp_t            rsp_system_linklayer_configure;
    struct gecko_msg_system_get_counters_cmd_t                   cmd_system_get_counters;
    struct gecko_msg_system_get_counters_rsp_t                   rsp_system_get_counters;
    struct gecko_msg_system_boot_evt_t                           evt_system_boot;
    struct gecko_msg_system_external_signal_evt_t                evt_system_external_signal;
    struct gecko_msg_system_hardware_error_evt_t                 evt_system_hardware_error;
    struct gecko_msg_system_error_evt_t                          evt_system_error;
    struct gecko_msg_le_gap_open_cmd_t                           cmd_le_gap_open;
    struct gecko_msg_le_gap_open_rsp_t                           rsp_le_gap_open;
    struct gecko_msg_le_gap_set_mode_cmd_t                       cmd_le_gap_set_mode;
    struct gecko_msg_le_gap_set_mode_rsp_t                       rsp_le_gap_set_mode;
    struct gecko_msg_le_gap_discover_cmd_t                       cmd_le_gap_discover;
    struct gecko_msg_le_gap_discover_rsp_t                       rsp_le_gap_discover;
    struct gecko_msg_le_gap_end_procedure_rsp_t                  rsp_le_gap_end_procedure;
    struct gecko_msg_le_gap_set_adv_parameters_cmd_t             cmd_le_gap_set_adv_parameters;
    struct gecko_msg_le_gap_set_adv_parameters_rsp_t             rsp_le_gap_set_adv_parameters;
    struct gecko_msg_le_gap_set_conn_parameters_cmd_t            cmd_le_gap_set_conn_parameters;
    struct gecko_msg_le_gap_set_conn_parameters_rsp_t            rsp_le_gap_set_conn_parameters;
    struct gecko_msg_le_gap_set_scan_parameters_cmd_t            cmd_le_gap_set_scan_parameters;
    struct gecko_msg_le_gap_set_scan_parameters_rsp_t            rsp_le_gap_set_scan_parameters;
    struct gecko_msg_le_gap_set_adv_data_cmd_t                   cmd_le_gap_set_adv_data;
    struct gecko_msg_le_gap_set_adv_data_rsp_t                   rsp_le_gap_set_adv_data;
    struct gecko_msg_le_gap_set_adv_timeout_cmd_t                cmd_le_gap_set_adv_timeout;
    struct gecko_msg_le_gap_set_adv_timeout_rsp_t                rsp_le_gap_set_adv_timeout;
    struct gecko_msg_le_gap_set_phy_cmd_t                        cmd_le_gap_set_phy;
    struct gecko_msg_le_gap_set_phy_rsp_t                        rsp_le_gap_set_phy;
    struct gecko_msg_le_gap_bt5_set_mode_cmd_t                   cmd_le_gap_bt5_set_mode;
    struct gecko_msg_le_gap_bt5_set_mode_rsp_t                   rsp_le_gap_bt5_set_mode;
    struct gecko_msg_le_gap_bt5_set_adv_parameters_cmd_t         cmd_le_gap_bt5_set_adv_parameters;
    struct gecko_msg_le_gap_bt5_set_adv_parameters_rsp_t         rsp_le_gap_bt5_set_adv_parameters;
    struct gecko_msg_le_gap_bt5_set_adv_data_cmd_t               cmd_le_gap_bt5_set_adv_data;
    struct gecko_msg_le_gap_bt5_set_adv_data_rsp_t               rsp_le_gap_bt5_set_adv_data;
    struct gecko_msg_le_gap_set_privacy_mode_cmd_t               cmd_le_gap_set_privacy_mode;
    struct gecko_msg_le_gap_set_privacy_mode_rsp_t               rsp_le_gap_set_privacy_mode;
    struct gecko_msg_le_gap_set_advertise_timing_cmd_t           cmd_le_gap_set_advertise_timing;
    struct gecko_msg_le_gap_set_advertise_timing_rsp_t           rsp_le_gap_set_advertise_timing;
    struct gecko_msg_le_gap_set_advertise_channel_map_cmd_t      cmd_le_gap_set_advertise_channel_map;
    struct gecko_msg_le_gap_set_advertise_channel_map_rsp_t      rsp_le_gap_set_advertise_channel_map;
    struct gecko_msg_le_gap_set_advertise_report_scan_request_cmd_t cmd_le_gap_set_advertise_report_scan_request;
    struct gecko_msg_le_gap_set_advertise_report_scan_request_rsp_t rsp_le_gap_set_advertise_report_scan_request;
    struct gecko_msg_le_gap_set_advertise_phy_cmd_t              cmd_le_gap_set_advertise_phy;
    struct gecko_msg_le_gap_set_advertise_phy_rsp_t              rsp_le_gap_set_advertise_phy;
    struct gecko_msg_le_gap_set_advertise_configuration_cmd_t    cmd_le_gap_set_advertise_configuration;
    struct gecko_msg_le_gap_set_advertise_configuration_rsp_t    rsp_le_gap_set_advertise_configuration;
    struct gecko_msg_le_gap_clear_advertise_configuration_cmd_t  cmd_le_gap_clear_advertise_configuration;
    struct gecko_msg_le_gap_clear_advertise_configuration_rsp_t  rsp_le_gap_clear_advertise_configuration;
    struct gecko_msg_le_gap_start_advertising_cmd_t              cmd_le_gap_start_advertising;
    struct gecko_msg_le_gap_start_advertising_rsp_t              rsp_le_gap_start_advertising;
    struct gecko_msg_le_gap_stop_advertising_cmd_t               cmd_le_gap_stop_advertising;
    struct gecko_msg_le_gap_stop_advertising_rsp_t               rsp_le_gap_stop_advertising;
    struct gecko_msg_le_gap_set_discovery_timing_cmd_t           cmd_le_gap_set_discovery_timing;
    struct gecko_msg_le_gap_set_discovery_timing_rsp_t           rsp_le_gap_set_discovery_timing;
    struct gecko_msg_le_gap_set_discovery_type_cmd_t             cmd_le_gap_set_discovery_type;
    struct gecko_msg_le_gap_set_discovery_type_rsp_t             rsp_le_gap_set_discovery_type;
    struct gecko_msg_le_gap_start_discovery_cmd_t                cmd_le_gap_start_discovery;
    struct gecko_msg_le_gap_start_discovery_rsp_t                rsp_le_gap_start_discovery;
    struct gecko_msg_le_gap_set_data_channel_classification_cmd_t cmd_le_gap_set_data_channel_classification;
    struct gecko_msg_le_gap_set_data_channel_classification_rsp_t rsp_le_gap_set_data_channel_classification;
    struct gecko_msg_le_gap_connect_cmd_t                        cmd_le_gap_connect;
    struct gecko_msg_le_gap_connect_rsp_t                        rsp_le_gap_connect;
    struct gecko_msg_le_gap_set_advertise_tx_power_cmd_t         cmd_le_gap_set_advertise_tx_power;
    struct gecko_msg_le_gap_set_advertise_tx_power_rsp_t         rsp_le_gap_set_advertise_tx_power;
    struct gecko_msg_le_gap_scan_response_evt_t                  evt_le_gap_scan_response;
    struct gecko_msg_le_gap_adv_timeout_evt_t                    evt_le_gap_adv_timeout;
    struct gecko_msg_le_gap_scan_request_evt_t                   evt_le_gap_scan_request;
    struct gecko_msg_le_connection_set_parameters_cmd_t          cmd_le_connection_set_parameters;
    struct gecko_msg_le_connection_set_parameters_rsp_t          rsp_le_connection_set_parameters;
    struct gecko_msg_le_connection_get_rssi_cmd_t                cmd_le_connection_get_rssi;
    struct gecko_msg_le_connection_get_rssi_rsp_t                rsp_le_connection_get_rssi;
    struct gecko_msg_le_connection_disable_slave_latency_cmd_t   cmd_le_connection_disable_slave_latency;
    struct gecko_msg_le_connection_disable_slave_latency_rsp_t   rsp_le_connection_disable_slave_latency;
    struct gecko_msg_le_connection_set_phy_cmd_t                 cmd_le_connection_set_phy;
    struct gecko_msg_le_connection_set_phy_rsp_t                 rsp_le_connection_set_phy;
    struct gecko_msg_le_connection_close_cmd_t                   cmd_le_connection_close;
    struct gecko_msg_le_connection_close_rsp_t                   rsp_le_connection_close;
    struct gecko_msg_le_connection_opened_evt_t                  evt_le_connection_opened;
    struct gecko_msg_le_connection_closed_evt_t                  evt_le_connection_closed;
    struct gecko_msg_le_connection_parameters_evt_t              evt_le_connection_parameters;
    struct gecko_msg_le_connection_rssi_evt_t                    evt_le_connection_rssi;
    struct gecko_msg_le_connection_phy_status_evt_t              evt_le_connection_phy_status;
    struct gecko_msg_gatt_set_max_mtu_cmd_t                      cmd_gatt_set_max_mtu;
    struct gecko_msg_gatt_set_max_mtu_rsp_t                      rsp_gatt_set_max_mtu;
    struct gecko_msg_gatt_discover_primary_services_cmd_t        cmd_gatt_discover_primary_services;
    struct gecko_msg_gatt_discover_primary_services_rsp_t        rsp_gatt_discover_primary_services;
    struct gecko_msg_gatt_discover_primary_services_by_uuid_cmd_t cmd_gatt_discover_primary_services_by_uuid;
    struct gecko_msg_gatt_discover_primary_services_by_uuid_rsp_t rsp_gatt_discover_primary_services_by_uuid;
    struct gecko_msg_gatt_discover_characteristics_cmd_t         cmd_gatt_discover_characteristics;
    struct gecko_msg_gatt_discover_characteristics_rsp_t         rsp_gatt_discover_characteristics;
    struct gecko_msg_gatt_discover_characteristics_by_uuid_cmd_t cmd_gatt_discover_characteristics_by_uuid;
    struct gecko_msg_gatt_discover_characteristics_by_uuid_rsp_t rsp_gatt_discover_characteristics_by_uuid;
    struct gecko_msg_gatt_set_characteristic_notification_cmd_t  cmd_gatt_set_characteristic_notification;
    struct gecko_msg_gatt_set_characteristic_notification_rsp_t  rsp_gatt_set_characteristic_notification;
    struct gecko_msg_gatt_discover_descriptors_cmd_t             cmd_gatt_discover_descriptors;
    struct gecko_msg_gatt_discover_descriptors_rsp_t             rsp_gatt_discover_descriptors;
    struct gecko_msg_gatt_read_characteristic_value_cmd_t        cmd_gatt_read_characteristic_value;
    struct gecko_msg_gatt_read_characteristic_value_rsp_t        rsp_gatt_read_characteristic_value;
    struct gecko_msg_gatt_read_characteristic_value_by_uuid_cmd_t cmd_gatt_read_characteristic_value_by_uuid;
    struct gecko_msg_gatt_read_characteristic_value_by_uuid_rsp_t rsp_gatt_read_characteristic_value_by_uuid;
    struct gecko_msg_gatt_write_characteristic_value_cmd_t       cmd_gatt_write_characteristic_value;
    struct gecko_msg_gatt_write_characteristic_value_rsp_t       rsp_gatt_write_characteristic_value;
    struct gecko_msg_gatt_write_characteristic_value_without_response_cmd_t cmd_gatt_write_characteristic_value_without_response;
    struct gecko_msg_gatt_write_characteristic_value_without_response_rsp_t rsp_gatt_write_characteristic_value_without_response;
    struct gecko_msg_gatt_prepare_characteristic_value_write_cmd_t cmd_gatt_prepare_characteristic_value_write;
    struct gecko_msg_gatt_prepare_characteristic_value_write_rsp_t rsp_gatt_prepare_characteristic_value_write;
    struct gecko_msg_gatt_execute_characteristic_value_write_cmd_t cmd_gatt_execute_characteristic_value_write;
    struct gecko_msg_gatt_execute_characteristic_value_write_rsp_t rsp_gatt_execute_characteristic_value_write;
    struct gecko_msg_gatt_send_characteristic_confirmation_cmd_t cmd_gatt_send_characteristic_confirmation;
    struct gecko_msg_gatt_send_characteristic_confirmation_rsp_t rsp_gatt_send_characteristic_confirmation;
    struct gecko_msg_gatt_read_descriptor_value_cmd_t            cmd_gatt_read_descriptor_value;
    struct gecko_msg_gatt_read_descriptor_value_rsp_t            rsp_gatt_read_descriptor_value;
    struct gecko_msg_gatt_write_descriptor_value_cmd_t           cmd_gatt_write_descriptor_value;
    struct gecko_msg_gatt_write_descriptor_value_rsp_t           rsp_gatt_write_descriptor_value;
    struct gecko_msg_gatt_find_included_services_cmd_t           cmd_gatt_find_included_services;
    struct gecko_msg_gatt_find_included_services_rsp_t           rsp_gatt_find_included_services;
    struct gecko_msg_gatt_read_multiple_characteristic_values_cmd_t cmd_gatt_read_multiple_characteristic_values;
    struct gecko_msg_gatt_read_multiple_characteristic_values_rsp_t rsp_gatt_read_multiple_characteristic_values;
    struct gecko_msg_gatt_read_characteristic_value_from_offset_cmd_t cmd_gatt_read_characteristic_value_from_offset;
    struct gecko_msg_gatt_read_characteristic_value_from_offset_rsp_t rsp_gatt_read_characteristic_value_from_offset;
    struct gecko_msg_gatt_prepare_characteristic_value_reliable_write_cmd_t cmd_gatt_prepare_characteristic_value_reliable_write;
    struct gecko_msg_gatt_prepare_characteristic_value_reliable_write_rsp_t rsp_gatt_prepare_characteristic_value_reliable_write;
    struct gecko_msg_gatt_mtu_exchanged_evt_t                    evt_gatt_mtu_exchanged;
    struct gecko_msg_gatt_service_evt_t                          evt_gatt_service;
    struct gecko_msg_gatt_characteristic_evt_t                   evt_gatt_characteristic;
    struct gecko_msg_gatt_descriptor_evt_t                       evt_gatt_descriptor;
    struct gecko_msg_gatt_characteristic_value_evt_t             evt_gatt_characteristic_value;
    struct gecko_msg_gatt_descriptor_value_evt_t                 evt_gatt_descriptor_value;
    struct gecko_msg_gatt_procedure_completed_evt_t              evt_gatt_procedure_completed;
    struct gecko_msg_gatt_server_read_attribute_value_cmd_t      cmd_gatt_server_read_attribute_value;
    struct gecko_msg_gatt_server_read_attribute_value_rsp_t      rsp_gatt_server_read_attribute_value;
    struct gecko_msg_gatt_server_read_attribute_type_cmd_t       cmd_gatt_server_read_attribute_type;
    struct gecko_msg_gatt_server_read_attribute_type_rsp_t       rsp_gatt_server_read_attribute_type;
    struct gecko_msg_gatt_server_write_attribute_value_cmd_t     cmd_gatt_server_write_attribute_value;
    struct gecko_msg_gatt_server_write_attribute_value_rsp_t     rsp_gatt_server_write_attribute_value;
    struct gecko_msg_gatt_server_send_user_read_response_cmd_t   cmd_gatt_server_send_user_read_response;
    struct gecko_msg_gatt_server_send_user_read_response_rsp_t   rsp_gatt_server_send_user_read_response;
    struct gecko_msg_gatt_server_send_user_write_response_cmd_t  cmd_gatt_server_send_user_write_response;
    struct gecko_msg_gatt_server_send_user_write_response_rsp_t  rsp_gatt_server_send_user_write_response;
    struct gecko_msg_gatt_server_send_characteristic_notification_cmd_t cmd_gatt_server_send_characteristic_notification;
    struct gecko_msg_gatt_server_send_characteristic_notification_rsp_t rsp_gatt_server_send_characteristic_notification;
    struct gecko_msg_gatt_server_find_attribute_cmd_t            cmd_gatt_server_find_attribute;
    struct gecko_msg_gatt_server_find_attribute_rsp_t            rsp_gatt_server_find_attribute;
    struct gecko_msg_gatt_server_set_database_cmd_t              cmd_gatt_server_set_database;
    struct gecko_msg_gatt_server_set_database_rsp_t              rsp_gatt_server_set_database;
    struct gecko_msg_gatt_server_set_capabilities_cmd_t          cmd_gatt_server_set_capabilities;
    struct gecko_msg_gatt_server_set_capabilities_rsp_t          rsp_gatt_server_set_capabilities;
    struct gecko_msg_gatt_server_attribute_value_evt_t           evt_gatt_server_attribute_value;
    struct gecko_msg_gatt_server_user_read_request_evt_t         evt_gatt_server_user_read_request;
    struct gecko_msg_gatt_server_user_write_request_evt_t        evt_gatt_server_user_write_request;
    struct gecko_msg_gatt_server_characteristic_status_evt_t     evt_gatt_server_characteristic_status;
    struct gecko_msg_gatt_server_execute_write_completed_evt_t   evt_gatt_server_execute_write_completed;
    struct gecko_msg_endpoint_close_cmd_t                        cmd_endpoint_close;
    struct gecko_msg_endpoint_close_rsp_t                        rsp_endpoint_close;
    struct gecko_msg_endpoint_status_evt_t                       evt_endpoint_status;
    struct gecko_msg_hardware_set_soft_timer_cmd_t               cmd_hardware_set_soft_timer;
    struct gecko_msg_hardware_set_soft_timer_rsp_t               rsp_hardware_set_soft_timer;
    struct gecko_msg_hardware_get_time_rsp_t                     rsp_hardware_get_time;
    struct gecko_msg_hardware_set_lazy_soft_timer_cmd_t          cmd_hardware_set_lazy_soft_timer;
    struct gecko_msg_hardware_set_lazy_soft_timer_rsp_t          rsp_hardware_set_lazy_soft_timer;
    struct gecko_msg_hardware_enable_dcdc_cmd_t                  cmd_hardware_enable_dcdc;
    struct gecko_msg_hardware_enable_dcdc_rsp_t                  rsp_hardware_enable_dcdc;
    struct gecko_msg_hardware_soft_timer_evt_t                   evt_hardware_soft_timer;
    struct gecko_msg_flash_ps_erase_all_rsp_t                    rsp_flash_ps_erase_all;
    struct gecko_msg_flash_ps_save_cmd_t                         cmd_flash_ps_save;
    struct gecko_msg_flash_ps_save_rsp_t                         rsp_flash_ps_save;
    struct gecko_msg_flash_ps_load_cmd_t                         cmd_flash_ps_load;
    struct gecko_msg_flash_ps_load_rsp_t                         rsp_flash_ps_load;
    struct gecko_msg_flash_ps_erase_cmd_t                        cmd_flash_ps_erase;
    struct gecko_msg_flash_ps_erase_rsp_t                        rsp_flash_ps_erase;
    struct gecko_msg_test_dtm_tx_cmd_t                           cmd_test_dtm_tx;
    struct gecko_msg_test_dtm_tx_rsp_t                           rsp_test_dtm_tx;
    struct gecko_msg_test_dtm_rx_cmd_t                           cmd_test_dtm_rx;
    struct gecko_msg_test_dtm_rx_rsp_t                           rsp_test_dtm_rx;
    struct gecko_msg_test_dtm_end_rsp_t                          rsp_test_dtm_end;
    struct gecko_msg_test_debug_command_cmd_t                    cmd_test_debug_command;
    struct gecko_msg_test_debug_command_rsp_t                    rsp_test_debug_command;
    struct gecko_msg_test_debug_counter_cmd_t                    cmd_test_debug_counter;
    struct gecko_msg_test_debug_counter_rsp_t                    rsp_test_debug_counter;
    struct gecko_msg_test_dtm_completed_evt_t                    evt_test_dtm_completed;
    struct gecko_msg_test_hcidump_evt_t                          evt_test_hcidump;
    struct gecko_msg_sm_set_bondable_mode_cmd_t                  cmd_sm_set_bondable_mode;
    struct gecko_msg_sm_set_bondable_mode_rsp_t                  rsp_sm_set_bondable_mode;
    struct gecko_msg_sm_configure_cmd_t                          cmd_sm_configure;
    struct gecko_msg_sm_configure_rsp_t                          rsp_sm_configure;
    struct gecko_msg_sm_store_bonding_configuration_cmd_t        cmd_sm_store_bonding_configuration;
    struct gecko_msg_sm_store_bonding_configuration_rsp_t        rsp_sm_store_bonding_configuration;
    struct gecko_msg_sm_increase_security_cmd_t                  cmd_sm_increase_security;
    struct gecko_msg_sm_increase_security_rsp_t                  rsp_sm_increase_security;
    struct gecko_msg_sm_delete_bonding_cmd_t                     cmd_sm_delete_bonding;
    struct gecko_msg_sm_delete_bonding_rsp_t                     rsp_sm_delete_bonding;
    struct gecko_msg_sm_delete_bondings_rsp_t                    rsp_sm_delete_bondings;
    struct gecko_msg_sm_enter_passkey_cmd_t                      cmd_sm_enter_passkey;
    struct gecko_msg_sm_enter_passkey_rsp_t                      rsp_sm_enter_passkey;
    struct gecko_msg_sm_passkey_confirm_cmd_t                    cmd_sm_passkey_confirm;
    struct gecko_msg_sm_passkey_confirm_rsp_t                    rsp_sm_passkey_confirm;
    struct gecko_msg_sm_set_oob_data_cmd_t                       cmd_sm_set_oob_data;
    struct gecko_msg_sm_set_oob_data_rsp_t                       rsp_sm_set_oob_data;
    struct gecko_msg_sm_list_all_bondings_rsp_t                  rsp_sm_list_all_bondings;
    struct gecko_msg_sm_bonding_confirm_cmd_t                    cmd_sm_bonding_confirm;
    struct gecko_msg_sm_bonding_confirm_rsp_t                    rsp_sm_bonding_confirm;
    struct gecko_msg_sm_set_debug_mode_rsp_t                     rsp_sm_set_debug_mode;
    struct gecko_msg_sm_set_passkey_cmd_t                        cmd_sm_set_passkey;
    struct gecko_msg_sm_set_passkey_rsp_t                        rsp_sm_set_passkey;
    struct gecko_msg_sm_use_sc_oob_cmd_t                         cmd_sm_use_sc_oob;
    struct gecko_msg_sm_use_sc_oob_rsp_t                         rsp_sm_use_sc_oob;
    struct gecko_msg_sm_set_sc_remote_oob_data_cmd_t             cmd_sm_set_sc_remote_oob_data;
    struct gecko_msg_sm_set_sc_remote_oob_data_rsp_t             rsp_sm_set_sc_remote_oob_data;
    struct gecko_msg_sm_passkey_display_evt_t                    evt_sm_passkey_display;
    struct gecko_msg_sm_passkey_request_evt_t                    evt_sm_passkey_request;
    struct gecko_msg_sm_confirm_passkey_evt_t                    evt_sm_confirm_passkey;
    struct gecko_msg_sm_bonded_evt_t                             evt_sm_bonded;
    struct gecko_msg_sm_bonding_failed_evt_t                     evt_sm_bonding_failed;
    struct gecko_msg_sm_list_bonding_entry_evt_t                 evt_sm_list_bonding_entry;
    struct gecko_msg_sm_confirm_bonding_evt_t                    evt_sm_confirm_bonding;
    struct gecko_msg_homekit_configure_cmd_t                     cmd_homekit_configure;
    struct gecko_msg_homekit_configure_rsp_t                     rsp_homekit_configure;
    struct gecko_msg_homekit_advertise_cmd_t                     cmd_homekit_advertise;
    struct gecko_msg_homekit_advertise_rsp_t                     rsp_homekit_advertise;
    struct gecko_msg_homekit_delete_pairings_rsp_t               rsp_homekit_delete_pairings;
    struct gecko_msg_homekit_check_authcp_rsp_t                  rsp_homekit_check_authcp;
    struct gecko_msg_homekit_get_pairing_id_cmd_t                cmd_homekit_get_pairing_id;
    struct gecko_msg_homekit_get_pairing_id_rsp_t                rsp_homekit_get_pairing_id;
    struct gecko_msg_homekit_send_write_response_cmd_t           cmd_homekit_send_write_response;
    struct gecko_msg_homekit_send_write_response_rsp_t           rsp_homekit_send_write_response;
    struct gecko_msg_homekit_send_read_response_cmd_t            cmd_homekit_send_read_response;
    struct gecko_msg_homekit_send_read_response_rsp_t            rsp_homekit_send_read_response;
    struct gecko_msg_homekit_gsn_action_cmd_t                    cmd_homekit_gsn_action;
    struct gecko_msg_homekit_gsn_action_rsp_t                    rsp_homekit_gsn_action;
    struct gecko_msg_homekit_event_notification_cmd_t            cmd_homekit_event_notification;
    struct gecko_msg_homekit_event_notification_rsp_t            rsp_homekit_event_notification;
    struct gecko_msg_homekit_broadcast_action_cmd_t              cmd_homekit_broadcast_action;
    struct gecko_msg_homekit_broadcast_action_rsp_t              rsp_homekit_broadcast_action;
    struct gecko_msg_homekit_setupcode_display_evt_t             evt_homekit_setupcode_display;
    struct gecko_msg_homekit_paired_evt_t                        evt_homekit_paired;
    struct gecko_msg_homekit_pair_verified_evt_t                 evt_homekit_pair_verified;
    struct gecko_msg_homekit_connection_opened_evt_t             evt_homekit_connection_opened;
    struct gecko_msg_homekit_connection_closed_evt_t             evt_homekit_connection_closed;
    struct gecko_msg_homekit_identify_evt_t                      evt_homekit_identify;
    struct gecko_msg_homekit_write_request_evt_t                 evt_homekit_write_request;
    struct gecko_msg_homekit_read_request_evt_t                  evt_homekit_read_request;
    struct gecko_msg_homekit_disconnection_required_evt_t        evt_homekit_disconnection_required;
    struct gecko_msg_homekit_pairing_removed_evt_t               evt_homekit_pairing_removed;
    struct gecko_msg_homekit_setuppayload_display_evt_t          evt_homekit_setuppayload_display;
    struct gecko_msg_mesh_node_init_rsp_t                        rsp_mesh_node_init;
    struct gecko_msg_mesh_node_start_unprov_beaconing_cmd_t      cmd_mesh_node_start_unprov_beaconing;
    struct gecko_msg_mesh_node_start_unprov_beaconing_rsp_t      rsp_mesh_node_start_unprov_beaconing;
    struct gecko_msg_mesh_node_input_oob_request_rsp_cmd_t       cmd_mesh_node_input_oob_request_rsp;
    struct gecko_msg_mesh_node_input_oob_request_rsp_rsp_t       rsp_mesh_node_input_oob_request_rsp;
    struct gecko_msg_mesh_node_get_uuid_rsp_t                    rsp_mesh_node_get_uuid;
    struct gecko_msg_mesh_node_set_provisioning_data_cmd_t       cmd_mesh_node_set_provisioning_data;
    struct gecko_msg_mesh_node_set_provisioning_data_rsp_t       rsp_mesh_node_set_provisioning_data;
    struct gecko_msg_mesh_node_init_oob_cmd_t                    cmd_mesh_node_init_oob;
    struct gecko_msg_mesh_node_init_oob_rsp_t                    rsp_mesh_node_init_oob;
    struct gecko_msg_mesh_node_set_ivrecovery_mode_cmd_t         cmd_mesh_node_set_ivrecovery_mode;
    struct gecko_msg_mesh_node_set_ivrecovery_mode_rsp_t         rsp_mesh_node_set_ivrecovery_mode;
    struct gecko_msg_mesh_node_get_ivrecovery_mode_rsp_t         rsp_mesh_node_get_ivrecovery_mode;
    struct gecko_msg_mesh_node_set_adv_event_filter_cmd_t        cmd_mesh_node_set_adv_event_filter;
    struct gecko_msg_mesh_node_set_adv_event_filter_rsp_t        rsp_mesh_node_set_adv_event_filter;
    struct gecko_msg_mesh_node_get_statistics_rsp_t              rsp_mesh_node_get_statistics;
    struct gecko_msg_mesh_node_clear_statistics_rsp_t            rsp_mesh_node_clear_statistics;
    struct gecko_msg_mesh_node_set_net_relay_delay_cmd_t         cmd_mesh_node_set_net_relay_delay;
    struct gecko_msg_mesh_node_set_net_relay_delay_rsp_t         rsp_mesh_node_set_net_relay_delay;
    struct gecko_msg_mesh_node_get_net_relay_delay_rsp_t         rsp_mesh_node_get_net_relay_delay;
    struct gecko_msg_mesh_node_get_ivupdate_state_rsp_t          rsp_mesh_node_get_ivupdate_state;
    struct gecko_msg_mesh_node_request_ivupdate_rsp_t            rsp_mesh_node_request_ivupdate;
    struct gecko_msg_mesh_node_get_seq_remaining_cmd_t           cmd_mesh_node_get_seq_remaining;
    struct gecko_msg_mesh_node_get_seq_remaining_rsp_t           rsp_mesh_node_get_seq_remaining;
    struct gecko_msg_mesh_node_save_replay_protection_list_rsp_t rsp_mesh_node_save_replay_protection_list;
    struct gecko_msg_mesh_node_set_uuid_cmd_t                    cmd_mesh_node_set_uuid;
    struct gecko_msg_mesh_node_set_uuid_rsp_t                    rsp_mesh_node_set_uuid;
    struct gecko_msg_mesh_node_get_element_address_cmd_t         cmd_mesh_node_get_element_address;
    struct gecko_msg_mesh_node_get_element_address_rsp_t         rsp_mesh_node_get_element_address;
    struct gecko_msg_mesh_node_static_oob_request_rsp_cmd_t      cmd_mesh_node_static_oob_request_rsp;
    struct gecko_msg_mesh_node_static_oob_request_rsp_rsp_t      rsp_mesh_node_static_oob_request_rsp;
    struct gecko_msg_mesh_node_initialized_evt_t                 evt_mesh_node_initialized;
    struct gecko_msg_mesh_node_provisioned_evt_t                 evt_mesh_node_provisioned;
    struct gecko_msg_mesh_node_config_get_evt_t                  evt_mesh_node_config_get;
    struct gecko_msg_mesh_node_config_set_evt_t                  evt_mesh_node_config_set;
    struct gecko_msg_mesh_node_display_output_oob_evt_t          evt_mesh_node_display_output_oob;
    struct gecko_msg_mesh_node_input_oob_request_evt_t           evt_mesh_node_input_oob_request;
    struct gecko_msg_mesh_node_provisioning_started_evt_t        evt_mesh_node_provisioning_started;
    struct gecko_msg_mesh_node_provisioning_failed_evt_t         evt_mesh_node_provisioning_failed;
    struct gecko_msg_mesh_node_key_added_evt_t                   evt_mesh_node_key_added;
    struct gecko_msg_mesh_node_model_config_changed_evt_t        evt_mesh_node_model_config_changed;
    struct gecko_msg_mesh_node_ivrecovery_needed_evt_t           evt_mesh_node_ivrecovery_needed;
    struct gecko_msg_mesh_node_changed_ivupdate_state_evt_t      evt_mesh_node_changed_ivupdate_state;
    struct gecko_msg_mesh_prov_init_rsp_t                        rsp_mesh_prov_init;
    struct gecko_msg_mesh_prov_scan_unprov_beacons_rsp_t         rsp_mesh_prov_scan_unprov_beacons;
    struct gecko_msg_mesh_prov_provision_device_cmd_t            cmd_mesh_prov_provision_device;
    struct gecko_msg_mesh_prov_provision_device_rsp_t            rsp_mesh_prov_provision_device;
    struct gecko_msg_mesh_prov_create_network_cmd_t              cmd_mesh_prov_create_network;
    struct gecko_msg_mesh_prov_create_network_rsp_t              rsp_mesh_prov_create_network;
    struct gecko_msg_mesh_prov_get_dcd_cmd_t                     cmd_mesh_prov_get_dcd;
    struct gecko_msg_mesh_prov_get_dcd_rsp_t                     rsp_mesh_prov_get_dcd;
    struct gecko_msg_mesh_prov_get_config_cmd_t                  cmd_mesh_prov_get_config;
    struct gecko_msg_mesh_prov_get_config_rsp_t                  rsp_mesh_prov_get_config;
    struct gecko_msg_mesh_prov_set_config_cmd_t                  cmd_mesh_prov_set_config;
    struct gecko_msg_mesh_prov_set_config_rsp_t                  rsp_mesh_prov_set_config;
    struct gecko_msg_mesh_prov_create_appkey_cmd_t               cmd_mesh_prov_create_appkey;
    struct gecko_msg_mesh_prov_create_appkey_rsp_t               rsp_mesh_prov_create_appkey;
    struct gecko_msg_mesh_prov_oob_pkey_rsp_cmd_t                cmd_mesh_prov_oob_pkey_rsp;
    struct gecko_msg_mesh_prov_oob_pkey_rsp_rsp_t                rsp_mesh_prov_oob_pkey_rsp;
    struct gecko_msg_mesh_prov_oob_auth_rsp_cmd_t                cmd_mesh_prov_oob_auth_rsp;
    struct gecko_msg_mesh_prov_oob_auth_rsp_rsp_t                rsp_mesh_prov_oob_auth_rsp;
    struct gecko_msg_mesh_prov_set_oob_requirements_cmd_t        cmd_mesh_prov_set_oob_requirements;
    struct gecko_msg_mesh_prov_set_oob_requirements_rsp_t        rsp_mesh_prov_set_oob_requirements;
    struct gecko_msg_mesh_prov_key_refresh_start_cmd_t           cmd_mesh_prov_key_refresh_start;
    struct gecko_msg_mesh_prov_key_refresh_start_rsp_t           rsp_mesh_prov_key_refresh_start;
    struct gecko_msg_mesh_prov_get_key_refresh_blacklist_cmd_t   cmd_mesh_prov_get_key_refresh_blacklist;
    struct gecko_msg_mesh_prov_get_key_refresh_blacklist_rsp_t   rsp_mesh_prov_get_key_refresh_blacklist;
    struct gecko_msg_mesh_prov_set_key_refresh_blacklist_cmd_t   cmd_mesh_prov_set_key_refresh_blacklist;
    struct gecko_msg_mesh_prov_set_key_refresh_blacklist_rsp_t   rsp_mesh_prov_set_key_refresh_blacklist;
    struct gecko_msg_mesh_prov_appkey_add_cmd_t                  cmd_mesh_prov_appkey_add;
    struct gecko_msg_mesh_prov_appkey_add_rsp_t                  rsp_mesh_prov_appkey_add;
    struct gecko_msg_mesh_prov_appkey_delete_cmd_t               cmd_mesh_prov_appkey_delete;
    struct gecko_msg_mesh_prov_appkey_delete_rsp_t               rsp_mesh_prov_appkey_delete;
    struct gecko_msg_mesh_prov_model_app_bind_cmd_t              cmd_mesh_prov_model_app_bind;
    struct gecko_msg_mesh_prov_model_app_bind_rsp_t              rsp_mesh_prov_model_app_bind;
    struct gecko_msg_mesh_prov_model_app_unbind_cmd_t            cmd_mesh_prov_model_app_unbind;
    struct gecko_msg_mesh_prov_model_app_unbind_rsp_t            rsp_mesh_prov_model_app_unbind;
    struct gecko_msg_mesh_prov_model_app_get_cmd_t               cmd_mesh_prov_model_app_get;
    struct gecko_msg_mesh_prov_model_app_get_rsp_t               rsp_mesh_prov_model_app_get;
    struct gecko_msg_mesh_prov_model_sub_add_cmd_t               cmd_mesh_prov_model_sub_add;
    struct gecko_msg_mesh_prov_model_sub_add_rsp_t               rsp_mesh_prov_model_sub_add;
    struct gecko_msg_mesh_prov_model_pub_set_cmd_t               cmd_mesh_prov_model_pub_set;
    struct gecko_msg_mesh_prov_model_pub_set_rsp_t               rsp_mesh_prov_model_pub_set;
    struct gecko_msg_mesh_prov_provision_gatt_device_cmd_t       cmd_mesh_prov_provision_gatt_device;
    struct gecko_msg_mesh_prov_provision_gatt_device_rsp_t       rsp_mesh_prov_provision_gatt_device;
    struct gecko_msg_mesh_prov_ddb_get_cmd_t                     cmd_mesh_prov_ddb_get;
    struct gecko_msg_mesh_prov_ddb_get_rsp_t                     rsp_mesh_prov_ddb_get;
    struct gecko_msg_mesh_prov_ddb_delete_cmd_t                  cmd_mesh_prov_ddb_delete;
    struct gecko_msg_mesh_prov_ddb_delete_rsp_t                  rsp_mesh_prov_ddb_delete;
    struct gecko_msg_mesh_prov_ddb_add_cmd_t                     cmd_mesh_prov_ddb_add;
    struct gecko_msg_mesh_prov_ddb_add_rsp_t                     rsp_mesh_prov_ddb_add;
    struct gecko_msg_mesh_prov_ddb_list_devices_rsp_t            rsp_mesh_prov_ddb_list_devices;
    struct gecko_msg_mesh_prov_network_add_cmd_t                 cmd_mesh_prov_network_add;
    struct gecko_msg_mesh_prov_network_add_rsp_t                 rsp_mesh_prov_network_add;
    struct gecko_msg_mesh_prov_network_delete_cmd_t              cmd_mesh_prov_network_delete;
    struct gecko_msg_mesh_prov_network_delete_rsp_t              rsp_mesh_prov_network_delete;
    struct gecko_msg_mesh_prov_nettx_get_cmd_t                   cmd_mesh_prov_nettx_get;
    struct gecko_msg_mesh_prov_nettx_get_rsp_t                   rsp_mesh_prov_nettx_get;
    struct gecko_msg_mesh_prov_nettx_set_cmd_t                   cmd_mesh_prov_nettx_set;
    struct gecko_msg_mesh_prov_nettx_set_rsp_t                   rsp_mesh_prov_nettx_set;
    struct gecko_msg_mesh_prov_model_sub_del_cmd_t               cmd_mesh_prov_model_sub_del;
    struct gecko_msg_mesh_prov_model_sub_del_rsp_t               rsp_mesh_prov_model_sub_del;
    struct gecko_msg_mesh_prov_model_sub_add_va_cmd_t            cmd_mesh_prov_model_sub_add_va;
    struct gecko_msg_mesh_prov_model_sub_add_va_rsp_t            rsp_mesh_prov_model_sub_add_va;
    struct gecko_msg_mesh_prov_model_sub_del_va_cmd_t            cmd_mesh_prov_model_sub_del_va;
    struct gecko_msg_mesh_prov_model_sub_del_va_rsp_t            rsp_mesh_prov_model_sub_del_va;
    struct gecko_msg_mesh_prov_model_sub_set_cmd_t               cmd_mesh_prov_model_sub_set;
    struct gecko_msg_mesh_prov_model_sub_set_rsp_t               rsp_mesh_prov_model_sub_set;
    struct gecko_msg_mesh_prov_model_sub_set_va_cmd_t            cmd_mesh_prov_model_sub_set_va;
    struct gecko_msg_mesh_prov_model_sub_set_va_rsp_t            rsp_mesh_prov_model_sub_set_va;
    struct gecko_msg_mesh_prov_heartbeat_publication_get_cmd_t   cmd_mesh_prov_heartbeat_publication_get;
    struct gecko_msg_mesh_prov_heartbeat_publication_get_rsp_t   rsp_mesh_prov_heartbeat_publication_get;
    struct gecko_msg_mesh_prov_heartbeat_publication_set_cmd_t   cmd_mesh_prov_heartbeat_publication_set;
    struct gecko_msg_mesh_prov_heartbeat_publication_set_rsp_t   rsp_mesh_prov_heartbeat_publication_set;
    struct gecko_msg_mesh_prov_heartbeat_subscription_get_cmd_t  cmd_mesh_prov_heartbeat_subscription_get;
    struct gecko_msg_mesh_prov_heartbeat_subscription_get_rsp_t  rsp_mesh_prov_heartbeat_subscription_get;
    struct gecko_msg_mesh_prov_heartbeat_subscription_set_cmd_t  cmd_mesh_prov_heartbeat_subscription_set;
    struct gecko_msg_mesh_prov_heartbeat_subscription_set_rsp_t  rsp_mesh_prov_heartbeat_subscription_set;
    struct gecko_msg_mesh_prov_relay_get_cmd_t                   cmd_mesh_prov_relay_get;
    struct gecko_msg_mesh_prov_relay_get_rsp_t                   rsp_mesh_prov_relay_get;
    struct gecko_msg_mesh_prov_relay_set_cmd_t                   cmd_mesh_prov_relay_set;
    struct gecko_msg_mesh_prov_relay_set_rsp_t                   rsp_mesh_prov_relay_set;
    struct gecko_msg_mesh_prov_reset_node_cmd_t                  cmd_mesh_prov_reset_node;
    struct gecko_msg_mesh_prov_reset_node_rsp_t                  rsp_mesh_prov_reset_node;
    struct gecko_msg_mesh_prov_appkey_get_cmd_t                  cmd_mesh_prov_appkey_get;
    struct gecko_msg_mesh_prov_appkey_get_rsp_t                  rsp_mesh_prov_appkey_get;
    struct gecko_msg_mesh_prov_network_get_cmd_t                 cmd_mesh_prov_network_get;
    struct gecko_msg_mesh_prov_network_get_rsp_t                 rsp_mesh_prov_network_get;
    struct gecko_msg_mesh_prov_model_sub_clear_cmd_t             cmd_mesh_prov_model_sub_clear;
    struct gecko_msg_mesh_prov_model_sub_clear_rsp_t             rsp_mesh_prov_model_sub_clear;
    struct gecko_msg_mesh_prov_model_pub_get_cmd_t               cmd_mesh_prov_model_pub_get;
    struct gecko_msg_mesh_prov_model_pub_get_rsp_t               rsp_mesh_prov_model_pub_get;
    struct gecko_msg_mesh_prov_model_pub_set_va_cmd_t            cmd_mesh_prov_model_pub_set_va;
    struct gecko_msg_mesh_prov_model_pub_set_va_rsp_t            rsp_mesh_prov_model_pub_set_va;
    struct gecko_msg_mesh_prov_model_pub_set_cred_cmd_t          cmd_mesh_prov_model_pub_set_cred;
    struct gecko_msg_mesh_prov_model_pub_set_cred_rsp_t          rsp_mesh_prov_model_pub_set_cred;
    struct gecko_msg_mesh_prov_model_pub_set_va_cred_cmd_t       cmd_mesh_prov_model_pub_set_va_cred;
    struct gecko_msg_mesh_prov_model_pub_set_va_cred_rsp_t       rsp_mesh_prov_model_pub_set_va_cred;
    struct gecko_msg_mesh_prov_model_sub_get_cmd_t               cmd_mesh_prov_model_sub_get;
    struct gecko_msg_mesh_prov_model_sub_get_rsp_t               rsp_mesh_prov_model_sub_get;
    struct gecko_msg_mesh_prov_friend_timeout_get_cmd_t          cmd_mesh_prov_friend_timeout_get;
    struct gecko_msg_mesh_prov_friend_timeout_get_rsp_t          rsp_mesh_prov_friend_timeout_get;
    struct gecko_msg_mesh_prov_initialized_evt_t                 evt_mesh_prov_initialized;
    struct gecko_msg_mesh_prov_provisioning_failed_evt_t         evt_mesh_prov_provisioning_failed;
    struct gecko_msg_mesh_prov_device_provisioned_evt_t          evt_mesh_prov_device_provisioned;
    struct gecko_msg_mesh_prov_unprov_beacon_evt_t               evt_mesh_prov_unprov_beacon;
    struct gecko_msg_mesh_prov_dcd_status_evt_t                  evt_mesh_prov_dcd_status;
    struct gecko_msg_mesh_prov_config_status_evt_t               evt_mesh_prov_config_status;
    struct gecko_msg_mesh_prov_oob_pkey_request_evt_t            evt_mesh_prov_oob_pkey_request;
    struct gecko_msg_mesh_prov_oob_auth_request_evt_t            evt_mesh_prov_oob_auth_request;
    struct gecko_msg_mesh_prov_oob_display_input_evt_t           evt_mesh_prov_oob_display_input;
    struct gecko_msg_mesh_prov_ddb_list_evt_t                    evt_mesh_prov_ddb_list;
    struct gecko_msg_mesh_prov_heartbeat_publication_status_evt_t evt_mesh_prov_heartbeat_publication_status;
    struct gecko_msg_mesh_prov_heartbeat_subscription_status_evt_t evt_mesh_prov_heartbeat_subscription_status;
    struct gecko_msg_mesh_prov_relay_status_evt_t                evt_mesh_prov_relay_status;
    struct gecko_msg_mesh_prov_uri_evt_t                         evt_mesh_prov_uri;
    struct gecko_msg_mesh_prov_node_reset_evt_t                  evt_mesh_prov_node_reset;
    struct gecko_msg_mesh_prov_appkey_list_evt_t                 evt_mesh_prov_appkey_list;
    struct gecko_msg_mesh_prov_appkey_list_end_evt_t             evt_mesh_prov_appkey_list_end;
    struct gecko_msg_mesh_prov_network_list_evt_t                evt_mesh_prov_network_list;
    struct gecko_msg_mesh_prov_network_list_end_evt_t            evt_mesh_prov_network_list_end;
    struct gecko_msg_mesh_prov_model_pub_status_evt_t            evt_mesh_prov_model_pub_status;
    struct gecko_msg_mesh_prov_key_refresh_phase_update_evt_t    evt_mesh_prov_key_refresh_phase_update;
    struct gecko_msg_mesh_prov_key_refresh_node_update_evt_t     evt_mesh_prov_key_refresh_node_update;
    struct gecko_msg_mesh_prov_key_refresh_complete_evt_t        evt_mesh_prov_key_refresh_complete;
    struct gecko_msg_mesh_prov_model_sub_addr_evt_t              evt_mesh_prov_model_sub_addr;
    struct gecko_msg_mesh_prov_model_sub_addr_end_evt_t          evt_mesh_prov_model_sub_addr_end;
    struct gecko_msg_mesh_prov_friend_timeout_status_evt_t       evt_mesh_prov_friend_timeout_status;
    struct gecko_msg_mesh_debug_dump_keys_cmd_t                  cmd_mesh_debug_dump_keys;
    struct gecko_msg_mesh_debug_dump_keys_rsp_t                  rsp_mesh_debug_dump_keys;
    struct gecko_msg_mesh_debug_prov_dump_database_rsp_t         rsp_mesh_debug_prov_dump_database;
    struct gecko_msg_mesh_debug_prov_load_database_entries_cmd_t cmd_mesh_debug_prov_load_database_entries;
    struct gecko_msg_mesh_debug_prov_load_database_entries_rsp_t rsp_mesh_debug_prov_load_database_entries;
    struct gecko_msg_mesh_debug_set_mask_cmd_t                   cmd_mesh_debug_set_mask;
    struct gecko_msg_mesh_debug_set_mask_rsp_t                   rsp_mesh_debug_set_mask;
    struct gecko_msg_mesh_debug_set_kludges_cmd_t                cmd_mesh_debug_set_kludges;
    struct gecko_msg_mesh_debug_set_kludges_rsp_t                rsp_mesh_debug_set_kludges;
    struct gecko_msg_mesh_debug_rssi_limit_set_cmd_t             cmd_mesh_debug_rssi_limit_set;
    struct gecko_msg_mesh_debug_rssi_limit_set_rsp_t             rsp_mesh_debug_rssi_limit_set;
    struct gecko_msg_mesh_debug_add_va_cmd_t                     cmd_mesh_debug_add_va;
    struct gecko_msg_mesh_debug_add_va_rsp_t                     rsp_mesh_debug_add_va;
    struct gecko_msg_mesh_debug_unref_va_cmd_t                   cmd_mesh_debug_unref_va;
    struct gecko_msg_mesh_debug_unref_va_rsp_t                   rsp_mesh_debug_unref_va;
    struct gecko_msg_mesh_debug_dump_va_rsp_t                    rsp_mesh_debug_dump_va;
    struct gecko_msg_mesh_debug_set_white_list_item_cmd_t        cmd_mesh_debug_set_white_list_item;
    struct gecko_msg_mesh_debug_set_white_list_item_rsp_t        rsp_mesh_debug_set_white_list_item;
    struct gecko_msg_mesh_debug_set_white_list_active_cmd_t      cmd_mesh_debug_set_white_list_active;
    struct gecko_msg_mesh_debug_set_white_list_active_rsp_t      rsp_mesh_debug_set_white_list_active;
    struct gecko_msg_mesh_debug_node_set_static_oob_data_cmd_t   cmd_mesh_debug_node_set_static_oob_data;
    struct gecko_msg_mesh_debug_node_set_static_oob_data_rsp_t   rsp_mesh_debug_node_set_static_oob_data;
    struct gecko_msg_mesh_debug_node_set_oob_eckey_cmd_t         cmd_mesh_debug_node_set_oob_eckey;
    struct gecko_msg_mesh_debug_node_set_oob_eckey_rsp_t         rsp_mesh_debug_node_set_oob_eckey;
    struct gecko_msg_mesh_debug_node_get_oob_eckey_rsp_t         rsp_mesh_debug_node_get_oob_eckey;
    struct gecko_msg_mesh_debug_node_get_static_oob_data_rsp_t   rsp_mesh_debug_node_get_static_oob_data;
    struct gecko_msg_mesh_debug_network_trace_config_cmd_t       cmd_mesh_debug_network_trace_config;
    struct gecko_msg_mesh_debug_network_trace_config_rsp_t       rsp_mesh_debug_network_trace_config;
    struct gecko_msg_mesh_debug_network_update_cmd_t             cmd_mesh_debug_network_update;
    struct gecko_msg_mesh_debug_network_update_rsp_t             rsp_mesh_debug_network_update;
    struct gecko_msg_mesh_debug_appkey_update_cmd_t              cmd_mesh_debug_appkey_update;
    struct gecko_msg_mesh_debug_appkey_update_rsp_t              rsp_mesh_debug_appkey_update;
    struct gecko_msg_mesh_debug_proxy_listen_rsp_t               rsp_mesh_debug_proxy_listen;
    struct gecko_msg_mesh_debug_set_scan_cmd_t                   cmd_mesh_debug_set_scan;
    struct gecko_msg_mesh_debug_set_scan_rsp_t                   rsp_mesh_debug_set_scan;
    struct gecko_msg_mesh_debug_node_set_oob_uri_cmd_t           cmd_mesh_debug_node_set_oob_uri;
    struct gecko_msg_mesh_debug_node_set_oob_uri_rsp_t           rsp_mesh_debug_node_set_oob_uri;
    struct gecko_msg_mesh_debug_node_get_oob_uri_rsp_t           rsp_mesh_debug_node_get_oob_uri;
    struct gecko_msg_mesh_debug_node_init_cfgcl_rsp_t            rsp_mesh_debug_node_init_cfgcl;
    struct gecko_msg_mesh_debug_key_refresh_start_noauto_cmd_t   cmd_mesh_debug_key_refresh_start_noauto;
    struct gecko_msg_mesh_debug_key_refresh_start_noauto_rsp_t   rsp_mesh_debug_key_refresh_start_noauto;
    struct gecko_msg_mesh_debug_key_refresh_next_phase_cmd_t     cmd_mesh_debug_key_refresh_next_phase;
    struct gecko_msg_mesh_debug_key_refresh_next_phase_rsp_t     rsp_mesh_debug_key_refresh_next_phase;
    struct gecko_msg_mesh_debug_net_send_cmd_t                   cmd_mesh_debug_net_send;
    struct gecko_msg_mesh_debug_net_send_rsp_t                   rsp_mesh_debug_net_send;
    struct gecko_msg_mesh_debug_key_evt_t                        evt_mesh_debug_key;
    struct gecko_msg_mesh_debug_msg_evt_t                        evt_mesh_debug_msg;
    struct gecko_msg_mesh_debug_prov_database_entry_evt_t        evt_mesh_debug_prov_database_entry;
    struct gecko_msg_mesh_debug_va_evt_t                         evt_mesh_debug_va;
    struct gecko_msg_mesh_debug_network_trace_pdu_evt_t          evt_mesh_debug_network_trace_pdu;
    struct gecko_msg_mesh_debug_network_trace_access_payload_evt_t evt_mesh_debug_network_trace_access_payload;
    struct gecko_msg_mesh_debug_network_status_evt_t             evt_mesh_debug_network_status;
    struct gecko_msg_mesh_debug_appkey_status_evt_t              evt_mesh_debug_appkey_status;
    struct gecko_msg_mesh_debug_transport_rx_cancelled_evt_t     evt_mesh_debug_transport_rx_cancelled;
    struct gecko_msg_proxy_radio_proxy_send_adv_cmd_t            cmd_proxy_radio_proxy_send_adv;
    struct gecko_msg_proxy_radio_proxy_send_adv_rsp_t            rsp_proxy_radio_proxy_send_adv;
    struct gecko_msg_proxy_radio_child_adv_req_done_cmd_t        cmd_proxy_radio_child_adv_req_done;
    struct gecko_msg_proxy_radio_child_adv_req_done_rsp_t        rsp_proxy_radio_child_adv_req_done;
    struct gecko_msg_proxy_radio_child_adv_data_cmd_t            cmd_proxy_radio_child_adv_data;
    struct gecko_msg_proxy_radio_child_adv_data_rsp_t            rsp_proxy_radio_child_adv_data;
    struct gecko_msg_proxy_radio_get_ms_ticks_rsp_t              rsp_proxy_radio_get_ms_ticks;
    struct gecko_msg_proxy_radio_test_timer_cmd_t                cmd_proxy_radio_test_timer;
    struct gecko_msg_proxy_radio_test_timer_rsp_t                rsp_proxy_radio_test_timer;
    struct gecko_msg_proxy_radio_proxy_adv_data_evt_t            evt_proxy_radio_proxy_adv_data;
    struct gecko_msg_proxy_radio_child_adv_req_evt_t             evt_proxy_radio_child_adv_req;
    struct gecko_msg_proxy_radio_child_adv_params_req_evt_t      evt_proxy_radio_child_adv_params_req;
    struct gecko_msg_proxy_radio_test_timer_expired_evt_t        evt_proxy_radio_test_timer_expired;
    struct gecko_msg_mesh_proxy_connect_cmd_t                    cmd_mesh_proxy_connect;
    struct gecko_msg_mesh_proxy_connect_rsp_t                    rsp_mesh_proxy_connect;
    struct gecko_msg_mesh_proxy_disconnect_cmd_t                 cmd_mesh_proxy_disconnect;
    struct gecko_msg_mesh_proxy_disconnect_rsp_t                 rsp_mesh_proxy_disconnect;
    struct gecko_msg_mesh_proxy_set_filter_type_cmd_t            cmd_mesh_proxy_set_filter_type;
    struct gecko_msg_mesh_proxy_set_filter_type_rsp_t            rsp_mesh_proxy_set_filter_type;
    struct gecko_msg_mesh_proxy_allow_cmd_t                      cmd_mesh_proxy_allow;
    struct gecko_msg_mesh_proxy_allow_rsp_t                      rsp_mesh_proxy_allow;
    struct gecko_msg_mesh_proxy_deny_cmd_t                       cmd_mesh_proxy_deny;
    struct gecko_msg_mesh_proxy_deny_rsp_t                       rsp_mesh_proxy_deny;
    struct gecko_msg_mesh_proxy_connected_evt_t                  evt_mesh_proxy_connected;
    struct gecko_msg_mesh_proxy_disconnected_evt_t               evt_mesh_proxy_disconnected;
    struct gecko_msg_mesh_proxy_filter_status_evt_t              evt_mesh_proxy_filter_status;
    struct gecko_msg_mesh_vendor_model_send_cmd_t                cmd_mesh_vendor_model_send;
    struct gecko_msg_mesh_vendor_model_send_rsp_t                rsp_mesh_vendor_model_send;
    struct gecko_msg_mesh_vendor_model_set_publication_cmd_t     cmd_mesh_vendor_model_set_publication;
    struct gecko_msg_mesh_vendor_model_set_publication_rsp_t     rsp_mesh_vendor_model_set_publication;
    struct gecko_msg_mesh_vendor_model_clear_publication_cmd_t   cmd_mesh_vendor_model_clear_publication;
    struct gecko_msg_mesh_vendor_model_clear_publication_rsp_t   rsp_mesh_vendor_model_clear_publication;
    struct gecko_msg_mesh_vendor_model_publish_cmd_t             cmd_mesh_vendor_model_publish;
    struct gecko_msg_mesh_vendor_model_publish_rsp_t             rsp_mesh_vendor_model_publish;
    struct gecko_msg_mesh_vendor_model_init_cmd_t                cmd_mesh_vendor_model_init;
    struct gecko_msg_mesh_vendor_model_init_rsp_t                rsp_mesh_vendor_model_init;
    struct gecko_msg_mesh_vendor_model_deinit_cmd_t              cmd_mesh_vendor_model_deinit;
    struct gecko_msg_mesh_vendor_model_deinit_rsp_t              rsp_mesh_vendor_model_deinit;
    struct gecko_msg_mesh_vendor_model_receive_evt_t             evt_mesh_vendor_model_receive;
    struct gecko_msg_mesh_health_client_get_cmd_t                cmd_mesh_health_client_get;
    struct gecko_msg_mesh_health_client_get_rsp_t                rsp_mesh_health_client_get;
    struct gecko_msg_mesh_health_client_clear_cmd_t              cmd_mesh_health_client_clear;
    struct gecko_msg_mesh_health_client_clear_rsp_t              rsp_mesh_health_client_clear;
    struct gecko_msg_mesh_health_client_test_cmd_t               cmd_mesh_health_client_test;
    struct gecko_msg_mesh_health_client_test_rsp_t               rsp_mesh_health_client_test;
    struct gecko_msg_mesh_health_client_get_period_cmd_t         cmd_mesh_health_client_get_period;
    struct gecko_msg_mesh_health_client_get_period_rsp_t         rsp_mesh_health_client_get_period;
    struct gecko_msg_mesh_health_client_set_period_cmd_t         cmd_mesh_health_client_set_period;
    struct gecko_msg_mesh_health_client_set_period_rsp_t         rsp_mesh_health_client_set_period;
    struct gecko_msg_mesh_health_client_get_attention_cmd_t      cmd_mesh_health_client_get_attention;
    struct gecko_msg_mesh_health_client_get_attention_rsp_t      rsp_mesh_health_client_get_attention;
    struct gecko_msg_mesh_health_client_set_attention_cmd_t      cmd_mesh_health_client_set_attention;
    struct gecko_msg_mesh_health_client_set_attention_rsp_t      rsp_mesh_health_client_set_attention;
    struct gecko_msg_mesh_health_client_server_status_evt_t      evt_mesh_health_client_server_status;
    struct gecko_msg_mesh_health_client_server_status_period_evt_t evt_mesh_health_client_server_status_period;
    struct gecko_msg_mesh_health_client_server_status_attention_evt_t evt_mesh_health_client_server_status_attention;
    struct gecko_msg_mesh_health_server_set_fault_cmd_t          cmd_mesh_health_server_set_fault;
    struct gecko_msg_mesh_health_server_set_fault_rsp_t          rsp_mesh_health_server_set_fault;
    struct gecko_msg_mesh_health_server_clear_fault_cmd_t        cmd_mesh_health_server_clear_fault;
    struct gecko_msg_mesh_health_server_clear_fault_rsp_t        rsp_mesh_health_server_clear_fault;
    struct gecko_msg_mesh_health_server_test_response_cmd_t      cmd_mesh_health_server_test_response;
    struct gecko_msg_mesh_health_server_test_response_rsp_t      rsp_mesh_health_server_test_response;
    struct gecko_msg_mesh_health_server_attention_evt_t          evt_mesh_health_server_attention;
    struct gecko_msg_mesh_health_server_test_request_evt_t       evt_mesh_health_server_test_request;
    struct gecko_msg_mesh_srtest_client_init_cmd_t               cmd_mesh_srtest_client_init;
    struct gecko_msg_mesh_srtest_client_init_rsp_t               rsp_mesh_srtest_client_init;
    struct gecko_msg_mesh_srtest_client_deinit_cmd_t             cmd_mesh_srtest_client_deinit;
    struct gecko_msg_mesh_srtest_client_deinit_rsp_t             rsp_mesh_srtest_client_deinit;
    struct gecko_msg_mesh_srtest_client_run_cmd_t                cmd_mesh_srtest_client_run;
    struct gecko_msg_mesh_srtest_client_run_rsp_t                rsp_mesh_srtest_client_run;
    struct gecko_msg_mesh_srtest_client_stop_cmd_t               cmd_mesh_srtest_client_stop;
    struct gecko_msg_mesh_srtest_client_stop_rsp_t               rsp_mesh_srtest_client_stop;
    struct gecko_msg_mesh_srtest_client_status_cmd_t             cmd_mesh_srtest_client_status;
    struct gecko_msg_mesh_srtest_client_status_rsp_t             rsp_mesh_srtest_client_status;
    struct gecko_msg_mesh_srtest_client_statistics_cmd_t         cmd_mesh_srtest_client_statistics;
    struct gecko_msg_mesh_srtest_client_statistics_rsp_t         rsp_mesh_srtest_client_statistics;
    struct gecko_msg_mesh_srtest_client_server_status_evt_t      evt_mesh_srtest_client_server_status;
    struct gecko_msg_mesh_srtest_server_init_cmd_t               cmd_mesh_srtest_server_init;
    struct gecko_msg_mesh_srtest_server_init_rsp_t               rsp_mesh_srtest_server_init;
    struct gecko_msg_mesh_srtest_server_deinit_cmd_t             cmd_mesh_srtest_server_deinit;
    struct gecko_msg_mesh_srtest_server_deinit_rsp_t             rsp_mesh_srtest_server_deinit;
    struct gecko_msg_mesh_srtest_server_statistics_cmd_t         cmd_mesh_srtest_server_statistics;
    struct gecko_msg_mesh_srtest_server_statistics_rsp_t         rsp_mesh_srtest_server_statistics;
    struct gecko_msg_mesh_srtest_server_state_changed_evt_t      evt_mesh_srtest_server_state_changed;
    struct gecko_msg_mesh_srtest_server_run_started_evt_t        evt_mesh_srtest_server_run_started;
    struct gecko_msg_mesh_srtest_server_run_ended_evt_t          evt_mesh_srtest_server_run_ended;
    struct gecko_msg_mesh_srtest_server_statistics_dump_evt_t    evt_mesh_srtest_server_statistics_dump;
    struct gecko_msg_mesh_generic_client_get_cmd_t               cmd_mesh_generic_client_get;
    struct gecko_msg_mesh_generic_client_get_rsp_t               rsp_mesh_generic_client_get;
    struct gecko_msg_mesh_generic_client_set_cmd_t               cmd_mesh_generic_client_set;
    struct gecko_msg_mesh_generic_client_set_rsp_t               rsp_mesh_generic_client_set;
    struct gecko_msg_mesh_generic_client_publish_cmd_t           cmd_mesh_generic_client_publish;
    struct gecko_msg_mesh_generic_client_publish_rsp_t           rsp_mesh_generic_client_publish;
    struct gecko_msg_mesh_generic_client_get_params_cmd_t        cmd_mesh_generic_client_get_params;
    struct gecko_msg_mesh_generic_client_get_params_rsp_t        rsp_mesh_generic_client_get_params;
    struct gecko_msg_mesh_generic_client_init_rsp_t              rsp_mesh_generic_client_init;
    struct gecko_msg_mesh_generic_client_server_status_evt_t     evt_mesh_generic_client_server_status;
    struct gecko_msg_mesh_generic_server_response_cmd_t          cmd_mesh_generic_server_response;
    struct gecko_msg_mesh_generic_server_response_rsp_t          rsp_mesh_generic_server_response;
    struct gecko_msg_mesh_generic_server_update_cmd_t            cmd_mesh_generic_server_update;
    struct gecko_msg_mesh_generic_server_update_rsp_t            rsp_mesh_generic_server_update;
    struct gecko_msg_mesh_generic_server_publish_cmd_t           cmd_mesh_generic_server_publish;
    struct gecko_msg_mesh_generic_server_publish_rsp_t           rsp_mesh_generic_server_publish;
    struct gecko_msg_mesh_generic_server_init_rsp_t              rsp_mesh_generic_server_init;
    struct gecko_msg_mesh_generic_server_client_request_evt_t    evt_mesh_generic_server_client_request;
    struct gecko_msg_mesh_generic_server_state_changed_evt_t     evt_mesh_generic_server_state_changed;
    struct gecko_msg_coex_set_options_cmd_t                      cmd_coex_set_options;
    struct gecko_msg_coex_set_options_rsp_t                      rsp_coex_set_options;
    struct gecko_msg_coex_get_counters_cmd_t                     cmd_coex_get_counters;
    struct gecko_msg_coex_get_counters_rsp_t                     rsp_coex_get_counters;
    struct gecko_msg_mesh_test_get_nettx_rsp_t                   rsp_mesh_test_get_nettx;
    struct gecko_msg_mesh_test_set_nettx_cmd_t                   cmd_mesh_test_set_nettx;
    struct gecko_msg_mesh_test_set_nettx_rsp_t                   rsp_mesh_test_set_nettx;
    struct gecko_msg_mesh_test_get_relay_rsp_t                   rsp_mesh_test_get_relay;
    struct gecko_msg_mesh_test_set_relay_cmd_t                   cmd_mesh_test_set_relay;
    struct gecko_msg_mesh_test_set_relay_rsp_t                   rsp_mesh_test_set_relay;
    struct gecko_msg_mesh_test_set_adv_scan_params_cmd_t         cmd_mesh_test_set_adv_scan_params;
    struct gecko_msg_mesh_test_set_adv_scan_params_rsp_t         rsp_mesh_test_set_adv_scan_params;
    struct gecko_msg_mesh_test_set_ivupdate_test_mode_cmd_t      cmd_mesh_test_set_ivupdate_test_mode;
    struct gecko_msg_mesh_test_set_ivupdate_test_mode_rsp_t      rsp_mesh_test_set_ivupdate_test_mode;
    struct gecko_msg_mesh_test_get_ivupdate_test_mode_rsp_t      rsp_mesh_test_get_ivupdate_test_mode;
    struct gecko_msg_mesh_test_set_segment_send_delay_cmd_t      cmd_mesh_test_set_segment_send_delay;
    struct gecko_msg_mesh_test_set_segment_send_delay_rsp_t      rsp_mesh_test_set_segment_send_delay;
    struct gecko_msg_mesh_test_set_ivupdate_state_cmd_t          cmd_mesh_test_set_ivupdate_state;
    struct gecko_msg_mesh_test_set_ivupdate_state_rsp_t          rsp_mesh_test_set_ivupdate_state;
    struct gecko_msg_mesh_test_send_beacons_rsp_t                rsp_mesh_test_send_beacons;
    struct gecko_msg_mesh_test_bind_local_model_app_cmd_t        cmd_mesh_test_bind_local_model_app;
    struct gecko_msg_mesh_test_bind_local_model_app_rsp_t        rsp_mesh_test_bind_local_model_app;
    struct gecko_msg_mesh_test_unbind_local_model_app_cmd_t      cmd_mesh_test_unbind_local_model_app;
    struct gecko_msg_mesh_test_unbind_local_model_app_rsp_t      rsp_mesh_test_unbind_local_model_app;
    struct gecko_msg_mesh_test_add_local_model_sub_cmd_t         cmd_mesh_test_add_local_model_sub;
    struct gecko_msg_mesh_test_add_local_model_sub_rsp_t         rsp_mesh_test_add_local_model_sub;
    struct gecko_msg_mesh_test_del_local_model_sub_cmd_t         cmd_mesh_test_del_local_model_sub;
    struct gecko_msg_mesh_test_del_local_model_sub_rsp_t         rsp_mesh_test_del_local_model_sub;
    struct gecko_msg_mesh_test_add_local_model_sub_va_cmd_t      cmd_mesh_test_add_local_model_sub_va;
    struct gecko_msg_mesh_test_add_local_model_sub_va_rsp_t      rsp_mesh_test_add_local_model_sub_va;
    struct gecko_msg_mesh_test_del_local_model_sub_va_cmd_t      cmd_mesh_test_del_local_model_sub_va;
    struct gecko_msg_mesh_test_del_local_model_sub_va_rsp_t      rsp_mesh_test_del_local_model_sub_va;
    struct gecko_msg_mesh_test_get_local_model_sub_cmd_t         cmd_mesh_test_get_local_model_sub;
    struct gecko_msg_mesh_test_get_local_model_sub_rsp_t         rsp_mesh_test_get_local_model_sub;
    struct gecko_msg_mesh_test_set_local_model_pub_cmd_t         cmd_mesh_test_set_local_model_pub;
    struct gecko_msg_mesh_test_set_local_model_pub_rsp_t         rsp_mesh_test_set_local_model_pub;
    struct gecko_msg_mesh_test_set_local_model_pub_va_cmd_t      cmd_mesh_test_set_local_model_pub_va;
    struct gecko_msg_mesh_test_set_local_model_pub_va_rsp_t      rsp_mesh_test_set_local_model_pub_va;
    struct gecko_msg_mesh_test_get_local_model_pub_cmd_t         cmd_mesh_test_get_local_model_pub;
    struct gecko_msg_mesh_test_get_local_model_pub_rsp_t         rsp_mesh_test_get_local_model_pub;
    struct gecko_msg_mesh_test_set_local_heartbeat_subscription_cmd_t cmd_mesh_test_set_local_heartbeat_subscription;
    struct gecko_msg_mesh_test_set_local_heartbeat_subscription_rsp_t rsp_mesh_test_set_local_heartbeat_subscription;
    struct gecko_msg_mesh_test_get_local_heartbeat_subscription_rsp_t rsp_mesh_test_get_local_heartbeat_subscription;
    struct gecko_msg_mesh_test_get_local_heartbeat_publication_rsp_t rsp_mesh_test_get_local_heartbeat_publication;
    struct gecko_msg_mesh_test_set_local_heartbeat_publication_cmd_t cmd_mesh_test_set_local_heartbeat_publication;
    struct gecko_msg_mesh_test_set_local_heartbeat_publication_rsp_t rsp_mesh_test_set_local_heartbeat_publication;
    struct gecko_msg_mesh_test_set_local_config_cmd_t            cmd_mesh_test_set_local_config;
    struct gecko_msg_mesh_test_set_local_config_rsp_t            rsp_mesh_test_set_local_config;
    struct gecko_msg_mesh_test_get_local_config_cmd_t            cmd_mesh_test_get_local_config;
    struct gecko_msg_mesh_test_get_local_config_rsp_t            rsp_mesh_test_get_local_config;
    struct gecko_msg_mesh_test_add_local_key_cmd_t               cmd_mesh_test_add_local_key;
    struct gecko_msg_mesh_test_add_local_key_rsp_t               rsp_mesh_test_add_local_key;
    struct gecko_msg_mesh_test_del_local_key_cmd_t               cmd_mesh_test_del_local_key;
    struct gecko_msg_mesh_test_del_local_key_rsp_t               rsp_mesh_test_del_local_key;
    struct gecko_msg_mesh_test_update_local_key_cmd_t            cmd_mesh_test_update_local_key;
    struct gecko_msg_mesh_test_update_local_key_rsp_t            rsp_mesh_test_update_local_key;
    struct gecko_msg_mesh_test_set_sar_config_cmd_t              cmd_mesh_test_set_sar_config;
    struct gecko_msg_mesh_test_set_sar_config_rsp_t              rsp_mesh_test_set_sar_config;
    struct gecko_msg_mesh_test_get_element_seqnum_cmd_t          cmd_mesh_test_get_element_seqnum;
    struct gecko_msg_mesh_test_get_element_seqnum_rsp_t          rsp_mesh_test_get_element_seqnum;
    struct gecko_msg_mesh_test_local_heartbeat_subscription_complete_evt_t evt_mesh_test_local_heartbeat_subscription_complete;
    struct gecko_msg_mesh_lpn_init_rsp_t                         rsp_mesh_lpn_init;
    struct gecko_msg_mesh_lpn_deinit_rsp_t                       rsp_mesh_lpn_deinit;
    struct gecko_msg_mesh_lpn_configure_cmd_t                    cmd_mesh_lpn_configure;
    struct gecko_msg_mesh_lpn_configure_rsp_t                    rsp_mesh_lpn_configure;
    struct gecko_msg_mesh_lpn_establish_friendship_cmd_t         cmd_mesh_lpn_establish_friendship;
    struct gecko_msg_mesh_lpn_establish_friendship_rsp_t         rsp_mesh_lpn_establish_friendship;
    struct gecko_msg_mesh_lpn_poll_rsp_t                         rsp_mesh_lpn_poll;
    struct gecko_msg_mesh_lpn_terminate_friendship_rsp_t         rsp_mesh_lpn_terminate_friendship;
    struct gecko_msg_mesh_lpn_friendship_established_evt_t       evt_mesh_lpn_friendship_established;
    struct gecko_msg_mesh_lpn_friendship_failed_evt_t            evt_mesh_lpn_friendship_failed;
    struct gecko_msg_mesh_lpn_friendship_terminated_evt_t        evt_mesh_lpn_friendship_terminated;
    struct gecko_msg_mesh_friend_init_rsp_t                      rsp_mesh_friend_init;
    struct gecko_msg_mesh_friend_deinit_rsp_t                    rsp_mesh_friend_deinit;
    struct gecko_msg_mesh_friend_friendship_established_evt_t    evt_mesh_friend_friendship_established;
    struct gecko_msg_mesh_friend_friendship_terminated_evt_t     evt_mesh_friend_friendship_terminated;
    struct gecko_msg_user_message_to_target_cmd_t                cmd_user_message_to_target;
    struct gecko_msg_user_message_to_target_rsp_t                rsp_user_message_to_target;
    struct gecko_msg_user_message_to_host_evt_t                  evt_user_message_to_host;
})data;
};


void gecko_handle_command(uint32_t,void*);
void gecko_handle_command_noresponse(uint32_t,void*);
/** This command can be used to reset the system. This command does not have a response, but it triggers one of the boot events (normal reset or boot to DFU mode) after re-boot.  **/
void gecko_cmd_dfu_reset(const struct gecko_msg_dfu_reset_cmd_t *msg);
/** After re-booting the local device into DFU mode, this command can be used to define the starting address on the flash to where the new firmware will be written in. **/
void gecko_cmd_dfu_flash_set_address(const struct gecko_msg_dfu_flash_set_address_cmd_t *msg);
/** This command can be used to upload the whole firmware image file into the Bluetooth device. The passed data length must be a multiple of 4 bytes. As the BGAPI command payload size is limited, multiple commands need to be issued one after the other until the whole .bin firmware image file is uploaded to the device. The next address of the flash sector in memory to write to is automatically updated by the bootloader after each individual command. **/
void gecko_cmd_dfu_flash_upload(const struct gecko_msg_dfu_flash_upload_cmd_t *msg);
/** This command can be used to tell to the device that the DFU file has been fully uploaded. To return the device back to normal mode the command {a href="#cmd_dfu_reset"}DFU Reset {/a} must be issued next. **/
void gecko_cmd_dfu_flash_upload_finish(const void *nul);
/** This command does not trigger any event but the response to the command is used to verify that communication between the host and the device is working. **/
void gecko_cmd_system_hello(const void *nul);
/** 
            This command can be used to reset the system. It does not have a response, but it triggers one of the boot events (normal reset or boot to DFU mode) depending on the selected boot mode. **/
void gecko_cmd_system_reset(const struct gecko_msg_system_reset_cmd_t *msg);
/** This command can be used to read the Bluetooth public address used by the device. **/
void gecko_cmd_system_get_bt_address(const void *nul);
/** 
                This command can be used to set the Bluetooth public address used by the device. A valid address set with this command overrides the default Bluetooth public address programmed at production, and it will be effective in the next system reboot. The stack treats 00:00:00:00:00:00 and ff:ff:ff:ff:ff:ff as invalid addresses. Thus passing one of them into this command will cause the stack to use the default address in the next system reboot.
             **/
void gecko_cmd_system_set_bt_address(const struct gecko_msg_system_set_bt_address_cmd_t *msg);
/** 
                This command can be used to set the maximum TX power for Bluetooth. The returned value in the response is the selected maximum output power level after applying RF path compensation. If the GATT server contains a Tx Power service, the Tx Power Level attribute of the service will be updated accordingly.
                {p}The stack will choose the maximum allowed for Bluetooth connections. The chosen power level may be less than the specified value if the device does not meet the power requirements. For Bluetooth connections the maximum TX power will be limited to 10 dBm if Adaptive Frequency Hopping (AFH) is not enabled.{/p}
                {p}{b}NOTE:{/b} This command should not be used while advertising, scanning or during connection.{/p}
             **/
void gecko_cmd_system_set_tx_power(const struct gecko_msg_system_set_tx_power_cmd_t *msg);
/** 
                This command can be used to get random data up to 16 bytes.
             **/
void gecko_cmd_system_get_random_data(const struct gecko_msg_system_get_random_data_cmd_t *msg);
/** 
                This command forces radio to idle state and allows device to sleep. Advertising, scanning, connections and software timers are halted by this commands. Halted operations are resumed by calling this command with parameter 0. Connections stay alive if system is resumed before connection supervision timeout.
                {p}{b}NOTE:{/b}Software timer is also halted. Hardware interrupts are the only way to wake up from energy mode 2 when system is halted.{/p}
             **/
void gecko_cmd_system_halt(const struct gecko_msg_system_halt_cmd_t *msg);
/** This command can be used to set the device name. Currently it is possible to set the name which will be used during the OTA update. The name will be stored in persistent storage.
            If the OTA device name is also set in gecko configuration, the name stored in persistent storage is overwritten with the name in gecko configuration during device boot. **/
void gecko_cmd_system_set_device_name(const struct gecko_msg_system_set_device_name_cmd_t *msg);
/** Send configuration data to linklayer **/
void gecko_cmd_system_linklayer_configure(const struct gecko_msg_system_linklayer_configure_cmd_t *msg);
/** Get packet and error counters **/
void gecko_cmd_system_get_counters(const struct gecko_msg_system_get_counters_cmd_t *msg);
/** 
                {p}{b}Deprecated{/b}. Replacement is {a href="#cmd_le_gap_connect"}le_gap_connect{/a} command which allows to open a connection with a specified PHY.{/p}
                {p}This command can be used to connect an advertising device with initiating PHY being the LE 1M PHY.
             **/
void gecko_cmd_le_gap_open(const struct gecko_msg_le_gap_open_cmd_t *msg);
/** 
            {p}{b}Deprecated{/b}. Use {a href="#cmd_le_gap_start_advertising"}le_gap_start_advertising{/a} command for enabling the advertising, and {a href="#cmd_le_gap_stop_advertising"}le_gap_stop_advertising{/a} command for disabling the advertising.{/p}
            {p}This command is only effective on the first advertising set (handle value 0). Other advertising sets are not affected.{/p}
             **/
void gecko_cmd_le_gap_set_mode(const struct gecko_msg_le_gap_set_mode_cmd_t *msg);
/** 
            {p}{b}Deprecated{/b}. Replacement is {a href="#cmd_le_gap_start_discovery"}le_gap_start_discovery{/a} command which allows to scan on LE 1M PHY or LE Coded PHY.{/p}
            {p}This command can be used to start the GAP discovery procedure to scan for advertising devices on LE 1M PHY. To cancel an ongoing 
            discovery process use the {a href="#cmd_le_gap_end_procedure"}le_gap_end_procedure{/a} command.{/p} **/
void gecko_cmd_le_gap_discover(const struct gecko_msg_le_gap_discover_cmd_t *msg);
/** This command can be used to end a current GAP procedure. **/
void gecko_cmd_le_gap_end_procedure(const void *nul);
/** 
            {p}{b}Deprecated{/b}. Replacements are {a href="#cmd_le_gap_set_advertise_timing"}le_gap_set_advertise_timing{/a} command for setting the advertising intervals, and {a href="#cmd_le_gap_set_advertise_channel_map"}le_gap_set_advertise_channel_map{/a} command for setting the channel map.{/p}
            {p}This command is only effective on the first advertising set (handle value 0). Other advertising sets are not affected.{/p}
             **/
void gecko_cmd_le_gap_set_adv_parameters(const struct gecko_msg_le_gap_set_adv_parameters_cmd_t *msg);
/** This command can be used to set the default Bluetooth connection parameters. The configured values are valid for all subsequent connections that will 
            be established. For changing the parameters of an already established connection use the command {a href="#cmd_le_connection_set_parameters"}le_connection_set_parameters{/a}. **/
void gecko_cmd_le_gap_set_conn_parameters(const struct gecko_msg_le_gap_set_conn_parameters_cmd_t *msg);
/** 
            {p}{b}Deprecated{/b}. Replacements are {a href="#cmd_le_gap_set_discovery_timing"}le_gap_set_discovery_timing{/a} command for setting timing parameters, and {a href="#cmd_le_gap_set_discovery_type"}le_gap_set_discovery_type{/a} command for the scan type.{/p}
            {p}The parameters set by this command is only effective on the LE 1M PHY. For LE Coded PHY, above replacement command must be used.{/p}
             **/
void gecko_cmd_le_gap_set_scan_parameters(const struct gecko_msg_le_gap_set_scan_parameters_cmd_t *msg);
/** 
            {p}{b}Deprecated{/b}. Use {a href="#cmd_le_gap_bt5_set_adv_data"}le_gap_bt5_set_adv_data{/a} command to set the advertising data and scan response data.{/p}
            {p}This command is only effective on the first advertising set (handle value 0). Other advertising sets are not affected.{/p}
             **/
void gecko_cmd_le_gap_set_adv_data(const struct gecko_msg_le_gap_set_adv_data_cmd_t *msg);
/** 
            {p}{b}Deprecated{/b}. New command {a href="#cmd_le_gap_set_advertise_timing"}le_gap_set_advertise_timing{/a} should be used for this functionality.{/p}
            {p}This command is only effective on the first advertising set (handle value 0). Other advertising sets are not affected.{/p}
             **/
void gecko_cmd_le_gap_set_adv_timeout(const struct gecko_msg_le_gap_set_adv_timeout_cmd_t *msg);
/**  **/
void gecko_cmd_le_gap_set_phy(const struct gecko_msg_le_gap_set_phy_cmd_t *msg);
/** 
            {p}{b}Deprecated{/b}. Replacements are {a href="#cmd_le_gap_start_advertising"}le_gap_start_advertising{/a} command to start the advertising, and {a href="#cmd_le_gap_stop_advertising"}le_gap_stop_advertising{/a} command to stop the advertising.
            {a href="#cmd_le_gap_set_advertise_timing"}le_gap_set_advertise_timing{/a} command can be used for setting the maxevents and command {a href="#cmd_le_gap_set_advertise_configuration"}le_gap_set_advertise_configuration{/a} can be used to for setting address types.{/p}
             **/
void gecko_cmd_le_gap_bt5_set_mode(const struct gecko_msg_le_gap_bt5_set_mode_cmd_t *msg);
/** 
            {p}{b}Deprecated{/b}. Replacements are {a href="#cmd_le_gap_set_advertise_timing"}le_gap_set_advertise_timing{/a} command for setting the advertising intervals, {a href="#cmd_le_gap_set_advertise_channel_map"}le_gap_set_advertise_channel_map{/a} command for setting the channel map, and {a href="#cmd_le_gap_set_advertise_report_scan_request"}le_gap_set_advertise_report_scan_request{/a} command for enabling and disabling scan request notifications.{/p}
             **/
void gecko_cmd_le_gap_bt5_set_adv_parameters(const struct gecko_msg_le_gap_bt5_set_adv_parameters_cmd_t *msg);
/** 
            {p}This command can be used together with {a href="#cmd_le_gap_start_advertising"}le_gap_start_advertising{/a} to advertise user defined data. First use this command to set the data in advertising packets and/or in the scan response packets, and then use command {a href="#cmd_le_gap_start_advertising"}le_gap_start_advertising{/a} to start the advertising in user_data mode.{/p}
            {p} The maximum data length is 31 bytes for legacy advertising and 191 bytes for extended advertising. If advertising mode is currently active the new advertising data will be used immediately.{/p}
            {p}The invalid parameter error will be returned in following situations:
            {ul}
                {li}The data length is more than 31 bytes but the advertiser can only advertise using legacy advertising PDUs;{/li}
                {li}The data length is more than 191 bytes when the advertiser can advertise using extended advertising PDUs;{/li}
                {li}Set the data of advertising data packet when the advertiser is advertising in scannable mode using extended advertising PDUs;{/li}
                {li}Set the data of scan response data packet when the advertiser is advertising in connectable mode using extended advertising PDUs.{/li}
            {/ul}
            {/p}
            {p}Note that the user defined data may be overwritten by the system when the advertising is later enabled in other discoverable mode than user_data.{/p}
 **/
void gecko_cmd_le_gap_bt5_set_adv_data(const struct gecko_msg_le_gap_bt5_set_adv_data_cmd_t *msg);
/** 
            This command can be used to enable or disable privacy feature on all GAP roles. The new privacy mode will take effect for advertising on the next advertising enabling, for scanning on the next scan enabling, and for initiating on the next open connection command. When privacy is enabled and the device is advertising or scanning, the stack will maintain a periodic timer with the specified time interval as timeout value. At each timeout the stack will generate a new private resolvable address and use it in advertising data packets and scanning requests.
            {p}By default, privacy feature is disabled.{/p}
             **/
void gecko_cmd_le_gap_set_privacy_mode(const struct gecko_msg_le_gap_set_privacy_mode_cmd_t *msg);
/** This command can be used to set the advertising timing parameters of the given advertising set. This setting will take effect on the next advertising enabling. **/
void gecko_cmd_le_gap_set_advertise_timing(const struct gecko_msg_le_gap_set_advertise_timing_cmd_t *msg);
/** This command can be used to set the primary advertising channel map of the given advertising set. This setting will take effect on the next advertising enabling. **/
void gecko_cmd_le_gap_set_advertise_channel_map(const struct gecko_msg_le_gap_set_advertise_channel_map_cmd_t *msg);
/** This command can be used to enable or disable the scan request notification of the given advertising set. This setting will take effect on the next advertising enabling. **/
void gecko_cmd_le_gap_set_advertise_report_scan_request(const struct gecko_msg_le_gap_set_advertise_report_scan_request_cmd_t *msg);
/** This command can be used to set the advertising PHYs of the given advertising set. This setting will take effect on the next advertising enabling. "Invalid Parameter" error will be returned if a PHY value is invalid or the device does not support a given PHY. **/
void gecko_cmd_le_gap_set_advertise_phy(const struct gecko_msg_le_gap_set_advertise_phy_cmd_t *msg);
/** This command can be used to configure the type of advertising event and other advertising properties of the given advertising set. The command {a href="#cmd_le_gap_clear_advertise_configuration"}le_gap_clear_advertise_configuration{/a} can be used to clear the configurations set by this command. This setting will take effect on the next advertising enabling. **/
void gecko_cmd_le_gap_set_advertise_configuration(const struct gecko_msg_le_gap_set_advertise_configuration_cmd_t *msg);
/** This command can be used to disable advertising configurations on the given advertising set. The command {a href="#cmd_le_gap_set_advertise_configuration"}le_gap_set_advertise_configuration{/a} can be used to set configurations. This setting will take effect on the next advertising enabling. **/
void gecko_cmd_le_gap_clear_advertise_configuration(const struct gecko_msg_le_gap_clear_advertise_configuration_cmd_t *msg);
/** This command can be used to start the advertising of the given advertising set with specified discoverable and connectable modes.
            {p}The default advertising configuration in the stack is set to using legacy advertising PDUs on LE 1M PHY. The stack will automatically select extended advertising PDUs if either of the followings has occurred under the default configuration:
                {ol}
                    {li}The connectable mode is set to le_gap_connectable_non_scannable.{/li}
                    {li}The primary advertising PHY has been set to LE Coded PHY by command {a href="#cmd_le_gap_set_advertise_phy"}le_gap_set_advertise_phy{/a}.{/li}
                {/ol}
            {/p}
            {p}If currently set parameters can't be used then an error will be returned. Specifically, this command fails with "Connection Limit Exceeded" error if the number of connections has reached the max_connections value configured. It fails with "Invalid Parameter" error if one of the following cases occur:
                {ol}
                    {li}Non-resolvable random address is used but the connectable mode is le_gap_connectable_scannable or le_gap_connectable_non_scannable.{/li}
                    {li}The connectable mode is le_gap_connectable_non_scannable, but using legacy advertising PDUs has been explicitly enabled with command {a href="#cmd_le_gap_set_advertise_configuration"}le_gap_set_advertise_configuration{/a}.{/li}
                    {li}The primary advertising PHY is LE Coded PHY but using legacy advertising PDUs has been explicitly enabled with command {a href="#cmd_le_gap_set_advertise_configuration"}le_gap_set_advertise_configuration{/a}.{/li}
                    {li}The connectable mode is le_gap_connectable_scannable but using extended advertising PDUs has been explicitly enabled or the primary advertising PHY has been set to LE Coded PHY.{/li}
                {/ol}
            {/p}
            {p}If advertising will be enabled in user_data mode, {a href="#cmd_le_gap_bt5_set_adv_data"}le_gap_bt5_set_adv_data{/a} should be used to set advertising and scan response data before issuing this command. When the advertising is enabled in other modes than user_data, the advertising and scan response data is generated by the stack using the following procedure:
                {ol}
                    {li}Add a Flags field to advertising data.{/li}
                    {li}Add a TX power level field to advertising data if TX power service exists in the local GATT database.{/li}
                    {li}Add a Slave Connection Interval Range field to advertising data if the GAP peripheral preferred connection parameters characteristic exists in the local GATT database.{/li}
                    {li}Add a list of 16-bit Service UUIDs to advertising data if there are one or more 16-bit service UUIDs to advertise. The list is complete if all advertised 16-bit UUIDs are in advertising data; otherwise the list is incomplete.{/li}
                    {li}Add a list of 128-bit service UUIDs to advertising data if there are one or more 128-bit service UUIDs to advertise and there is still free space for this field. The list is complete if all advertised 128-bit UUIDs are in advertising data; otherwise the list is incomplete. Note that an advertising data packet can contain at most one 128-bit service UUID.{/li}
                    {li}Try to add the full local name to advertising data if device is not in privacy mode. In case the full local name does not fit into the remaining free space, the advertised name is a shortened version by cutting off the end if the free space has at least 6 bytes; Otherwise, the local name is added to scan response data.{/li}
                {/ol}
            {/p}
            {p}Event {a href="#evt_le_connection_opened"}le_connection_opened{/a} will be received when a remote device opens a connection to the advertiser on this advertising set.{/p}
             **/
void gecko_cmd_le_gap_start_advertising(const struct gecko_msg_le_gap_start_advertising_cmd_t *msg);
/** This command can be used to stop the advertising of the given advertising set.
             **/
void gecko_cmd_le_gap_stop_advertising(const struct gecko_msg_le_gap_stop_advertising_cmd_t *msg);
/** This command can be used to set the timing parameters of the specified PHYs. If the device is currently scanning for advertising devices the PHYs, new parameters will take effect when the scanning is restarted. **/
void gecko_cmd_le_gap_set_discovery_timing(const struct gecko_msg_le_gap_set_discovery_timing_cmd_t *msg);
/** This command can be used to set the scan type of the specified PHYs. If the device is currently scanning for advertising devices on the PHYs, new parameters will take effect when the scanning is restarted **/
void gecko_cmd_le_gap_set_discovery_type(const struct gecko_msg_le_gap_set_discovery_type_cmd_t *msg);
/** 
            {p}This command can be used to start the GAP discovery procedure to scan for advertising devices on the specified scanning PHY, that is to perform a device discovery. To cancel an ongoing 
            discovery process use the {a href="#cmd_le_gap_end_procedure"}le_gap_end_procedure{/a} command.{/p}
            {p}"Invalid Parameter" error will be returned if the scanning PHY value is invalid or the device does not support the PHY.{/p}
             **/
void gecko_cmd_le_gap_start_discovery(const struct gecko_msg_le_gap_start_discovery_cmd_t *msg);
/** This command can be used to specify a channel classification for data channels. This classification persists until overwritten with a subsequent command or until the system is reset. **/
void gecko_cmd_le_gap_set_data_channel_classification(const struct gecko_msg_le_gap_set_data_channel_classification_cmd_t *msg);
/** 
                {p}This command can be used to connect an advertising device with the specified initiating PHY.
                The Bluetooth stack will enter a state where it continuously
                scans for the connectable advertising packets from the remote
                device which matches the Bluetooth address given as a
                parameter. Upon receiving the advertising packet, the module
                will send a connection request packet to the target device to
                initiate a Bluetooth connection. To cancel an ongoing
                connection process use the {a href="#cmd_le_connection_close"}le_connection_close{/a} command with the
                handle received in the response from this command.{/p}

                {p}A connection is opened in no-security mode. If the GATT
                client needs to read or write the attributes on GATT server
                requiring encryption or authentication, it must first encrypt
                the connection using an appropriate authentication method.{/p}

                {p}This command fails with "Connection Limit Exceeded" error if 
                the number of connections attempted to be opened exceeds the
                max_connections value configured.{/p}
                
                {p}This command fails with "Invalid Parameter" error if the initiating PHY value is invalid or the device does not support the PHY.{/p}

                {p}Later calls of this command have to wait for the ongoing command
                 to complete. A received event 
                 {a href="#evt_le_connection_opened"}le_connection_opened{/a}
                 indicates connection opened successfully and a received event
                {a href="#evt_le_connection_closed"}le_connection_closed{/a} 
                indicates connection failures have occurred.
             **/
void gecko_cmd_le_gap_connect(const struct gecko_msg_le_gap_connect_cmd_t *msg);
/** 
                This command can be used to set the maximum power level at which the advertising packets can be transmitted.
                The RF path gain configuration and power output capability of the device will affect the actual output power,
                thus the selected output power level may be different than the given value.
                The maximum TX power of legacy advertising is always clipped to 10 dBm.
                Extended advertising TX power can be higher than 10 dBm if Adaptive Frequency Hopping has been enabled.
                {p}This setting will take effect on the next advertising enabling.{/p}
             **/
void gecko_cmd_le_gap_set_advertise_tx_power(const struct gecko_msg_le_gap_set_advertise_tx_power_cmd_t *msg);
/** This command can be used to request a change in the connection parameters of a Bluetooth  connection. **/
void gecko_cmd_le_connection_set_parameters(const struct gecko_msg_le_connection_set_parameters_cmd_t *msg);
/** This command can be used to get the latest RSSI value of a Bluetooth connection. **/
void gecko_cmd_le_connection_get_rssi(const struct gecko_msg_le_connection_get_rssi_cmd_t *msg);
/** This command temporarily enables or disables slave latency. Used only when Bluetooth device is in slave role. **/
void gecko_cmd_le_connection_disable_slave_latency(const struct gecko_msg_le_connection_disable_slave_latency_cmd_t *msg);
/** This command can be used to set preferred PHYs for connection. Preferred PHYs are connection specific. Event {a href="#evt_le_connection_phy_status"}le_connection_phy_status{/a} is received when PHY update procedure has been completed. Other than preferred PHY can also be set if remote device does not accept any of the preferred PHYs. {p}{b}NOTE:{/b} 2 Mbit and Coded PHYs are not supported by all devices.{/p} **/
void gecko_cmd_le_connection_set_phy(const struct gecko_msg_le_connection_set_phy_cmd_t *msg);
/** This command can be used to close a Bluetooth connection or cancel an ongoing
                connection establishment process. The parameter is a connection handle which is reported in {a href="#evt_le_connection_opened"}le_connection_opened{/a} event or le_gap_open response. **/
void gecko_cmd_le_connection_close(const struct gecko_msg_le_connection_close_cmd_t *msg);
/** This command can be used to set the maximum size of ATT Message Transfer Units (MTU). If the given value is too large according to the maximum BGAPI payload size, the system will select the maximal possible value as the maximum ATT_MTU. If maximum ATT_MTU is larger than 23, MTU is exchanged automatically after a Bluetooth connection has been established. **/
void gecko_cmd_gatt_set_max_mtu(const struct gecko_msg_gatt_set_max_mtu_cmd_t *msg);
/** This command can be used to discover all the primary services of a remote GATT database. This command generates a unique gatt_service event for 
            every discovered primary service. Received {a href="#evt_gatt_procedure_completed"}gatt_procedure_completed{/a} event indicates that this GATT procedure 
            has successfully completed or failed with error. **/
void gecko_cmd_gatt_discover_primary_services(const struct gecko_msg_gatt_discover_primary_services_cmd_t *msg);
/** This command can be used to discover primary services with the specified UUID in a remote GATT database. This command generates unique gatt_service event for every discovered primary service. Received {a href="#evt_gatt_procedure_completed"}gatt_procedure_completed{/a} event indicates that this GATT procedure has succesfully completed or failed with error. **/
void gecko_cmd_gatt_discover_primary_services_by_uuid(const struct gecko_msg_gatt_discover_primary_services_by_uuid_cmd_t *msg);
/** This command can be used to discover all characteristics of the defined GATT service from a remote GATT database. This command generates a unique gatt_characteristic event for every discovered characteristic. Received {a href="#evt_gatt_procedure_completed"}gatt_procedure_completed{/a} event indicates that this GATT procedure has succesfully completed or failed with error. **/
void gecko_cmd_gatt_discover_characteristics(const struct gecko_msg_gatt_discover_characteristics_cmd_t *msg);
/** This command can be used to discover all the characteristics of the specified GATT service in a remote GATT database having the specified UUID. This command
generates a unique gatt_characteristic event for every discovered
characteristic having the specified UUID. Received {a href="#evt_gatt_procedure_completed"}gatt_procedure_completed{/a} event indicates that
this GATT procedure has successfully completed or failed with error.
             **/
void gecko_cmd_gatt_discover_characteristics_by_uuid(const struct gecko_msg_gatt_discover_characteristics_by_uuid_cmd_t *msg);
/** This command can be used to enable or disable the notifications and indications being sent from a remote GATT server. This procedure discovers a 
            characteristic client configuration descriptor and writes the related configuration flags to a remote GATT database. A received {a href="#evt_gatt_procedure_completed"}gatt_procedure_completed{/a} event
            indicates that this GATT procedure has successfully completed or that is has failed with an error. **/
void gecko_cmd_gatt_set_characteristic_notification(const struct gecko_msg_gatt_set_characteristic_notification_cmd_t *msg);
/** This command can be used to discover all the descriptors of the specified remote GATT characteristics in a remote GATT database. This command generates a unique gatt_descriptor event for every discovered descriptor. Received {a href="#evt_gatt_procedure_completed"}gatt_procedure_completed{/a} event indicates that this GATT procedure has succesfully completed or failed with error. **/
void gecko_cmd_gatt_discover_descriptors(const struct gecko_msg_gatt_discover_descriptors_cmd_t *msg);
/** 
            This command can be used to read the value of a characteristic from a remote GATT database. 
            A single {a href="#evt_gatt_characteristic_value"}gatt_characteristic_value{/a} event is generated if the 
            characteristic value fits in one ATT PDU. Otherwise more than one {a href="#evt_gatt_characteristic_value"}
            gatt_characteristic_value{/a} events are generated because the firmware will automatically use the "read long" 
            GATT procedure. A received {a href="#evt_gatt_procedure_completed"}gatt_procedure_completed{/a} event indicates
            that all data has been read successfully or that an error response has been received.
            {p}Note that the GATT client does not verify if the requested atrribute is a characteristic value.
            Thus before calling this command the application should make sure the attribute handle is for a characteristic
            value in some means, for example, by performing characteristic discovery.{/p}
             **/
void gecko_cmd_gatt_read_characteristic_value(const struct gecko_msg_gatt_read_characteristic_value_cmd_t *msg);
/** This command can be used to read the characteristic value of a service from a remote GATT database
            by giving the UUID of the characteristic and the handle of the service containing this characteristic. A single
            {a href="#evt_gatt_characteristic_value"}gatt_characteristic_value{/a} event is generated if the characteristic
            value fits in one ATT PDU. Otherwise more than one {a href="#evt_gatt_characteristic_value"}
            gatt_characteristic_value{/a} events are generated because the firmware will automatically use the "read long" GATT procedure. 
            A received {a href="#evt_gatt_procedure_completed"}gatt_procedure_completed{/a} event indicates that all data has been read successfully or that an error response has been received. **/
void gecko_cmd_gatt_read_characteristic_value_by_uuid(const struct gecko_msg_gatt_read_characteristic_value_by_uuid_cmd_t *msg);
/** This command can be used to write the value of a characteristic in a remote GATT database. If the given value does not fit in one ATT PDU, "write long" GATT procedure is used automatically. Received 
            {a href="#evt_gatt_procedure_completed"}gatt_procedure_completed{/a} event indicates that all data has been written successfully or that an error response 
            has been received. **/
void gecko_cmd_gatt_write_characteristic_value(const struct gecko_msg_gatt_write_characteristic_value_cmd_t *msg);
/** This command can be used to write the value of a characteristic in a
            remote GATT server. This command does not generate any event. All failures on the server are ignored silently. 
            For example, if an error is generated in the remote GATT server and the given value is not written into database no error message will be reported to the local 
            GATT client. Note that this command cannot be used to write long values. At most ATT_MTU - 3 amount of data can be sent once. **/
void gecko_cmd_gatt_write_characteristic_value_without_response(const struct gecko_msg_gatt_write_characteristic_value_without_response_cmd_t *msg);
/** {p}This command can be used to add a characteristic value to the write queue of a remote GATT server. 
            This command can be used in cases where very long attributes need to be written, or a set of values needs to be written atomically. At most ATT_MTU - 5 amount of data can be sent once. Writes are executed or cancelled with the {a href="#cmd_gatt_execute_characteristic_value_write"}execute_characteristic_value_write{/a} command.
            Whether the writes succeeded or not are indicated in the response of the {a href="#cmd_gatt_execute_characteristic_value_write"}execute_characteristic_value_write{/a} command.{/p}
            {p}In all cases where the amount of data to transfer fits into the BGAPI payload the command 
            {a href="#cmd_gatt_write_characteristic_value"}gatt_write_characteristic_value{/a} is recommended for writing long values since it transparently 
            performs the prepare_write and execute_write commands.{/p}
             **/
void gecko_cmd_gatt_prepare_characteristic_value_write(const struct gecko_msg_gatt_prepare_characteristic_value_write_cmd_t *msg);
/** This command can be used to commit or cancel previously queued writes to a long characteristic of a remote GATT server.
            Writes are sent to queue with {a href="#cmd_gatt_prepare_characteristic_value_write"}prepare_characteristic_value_write{/a} command. 
            Content, offset and length of queued values are validated by this procedure. A received {a href="#evt_gatt_procedure_completed"}gatt_procedure_completed{/a}
            event indicates that all data has been written successfully or that an error response has been received.
             **/
void gecko_cmd_gatt_execute_characteristic_value_write(const struct gecko_msg_gatt_execute_characteristic_value_write_cmd_t *msg);
/** This command must be used to send a characteristic confirmation to a remote GATT server after receiving an indication. 
            The {a href="#evt_gatt_characteristic_value"}gatt_characteristic_value_event{/a} carries the att_opcode containing handle_value_indication (0x1d) which reveals 
            that an indication has been received and this must be confirmed with this command. Confirmation needs to be sent within 30 seconds, otherwise the GATT transactions 
            between the client and the server are discontinued. **/
void gecko_cmd_gatt_send_characteristic_confirmation(const struct gecko_msg_gatt_send_characteristic_confirmation_cmd_t *msg);
/** This command can be used to read the descriptor value of a characteristic in a remote GATT database. A single {a href="#evt_gatt_descriptor_value"}
            gatt_descriptor_value{/a} event is generated if the descriptor value fits in one ATT PDU. Otherwise more than one {a href="#evt_gatt_descriptor_value"}gatt_descriptor_value{/a} events are generated because the firmware 
            will automatically use the "read long" GATT procedure. A received {a href="#evt_gatt_procedure_completed"}gatt_procedure_completed{/a} event indicates that all 
            data has been read successfully or that an error response has been received. **/
void gecko_cmd_gatt_read_descriptor_value(const struct gecko_msg_gatt_read_descriptor_value_cmd_t *msg);
/** This command can be used to write the value of a characteristic descriptor in a remote GATT database. If the given value does not fit in one ATT PDU, "write long" GATT procedure is used automatically. Received {a href="#evt_gatt_procedure_completed"}gatt_procedure_completed{/a} 
            event indicates that all data has been written succesfully or that an error response has been received.
             **/
void gecko_cmd_gatt_write_descriptor_value(const struct gecko_msg_gatt_write_descriptor_value_cmd_t *msg);
/** This command can be used to find out if a service of a remote GATT database includes one or more other services. This command generates a unique gatt_service_completed event for each included service. This command generates a unique gatt_service event for every discovered service. Received {a href="#evt_gatt_procedure_completed"}gatt_procedure_completed{/a} event indicates that this GATT procedure has successfully completed or failed with error. **/
void gecko_cmd_gatt_find_included_services(const struct gecko_msg_gatt_find_included_services_cmd_t *msg);
/** This command can be used to read the values of multiple characteristics from a remote GATT database at once. 
            {a href="#evt_gatt_characteristic_value"}gatt_characteristic_value{/a} events are generated as the values are returned by the remote GATT server.
            A received {a href="#evt_gatt_procedure_completed"}gatt_procedure_completed{/a} event indicates that either all data has been read successfully or that an error response has been received. **/
void gecko_cmd_gatt_read_multiple_characteristic_values(const struct gecko_msg_gatt_read_multiple_characteristic_values_cmd_t *msg);
/** This command can be used to read a partial characteristic value with specified offset and maximum length 
            from a remote GATT database. It is equivalent to
            {a href="#cmd_gatt_read_characteristic_value"}gatt_read_characteristic_value{/a}
            if both the offset and maximum length parameters are 0.
            A single {a href="#evt_gatt_characteristic_value"}gatt_characteristic_value{/a} event is generated 
            if the value to read fits in one ATT PDU. Otherwise more than one {a href="#evt_gatt_characteristic_value"}
            gatt_characteristic_value{/a} events are generated because the firmware will automatically use the "read long" 
            GATT procedure. A received {a href="#evt_gatt_procedure_completed"}gatt_procedure_completed{/a} event indicates
            that all data has been read successfully or that an error response has been received. **/
void gecko_cmd_gatt_read_characteristic_value_from_offset(const struct gecko_msg_gatt_read_characteristic_value_from_offset_cmd_t *msg);
/** {p}This command can be used to add a characteristic value to the write queue of a remote GATT server and verify if the value was correctly received by the server. Received {a href="#evt_gatt_procedure_completed"}gatt_procedure_completed{/a} event indicates that this GATT procedure has succesfully completed or failed with error. Specifically, error code 0x0194 (data_corrupted) will be returned if the value received from the GATT server's response failed to pass the reliable write verification. At most ATT_MTU - 5 amount of data can be sent once. Writes are executed or cancelled with the {a href="#cmd_gatt_execute_characteristic_value_write"}execute_characteristic_value_write{/a} command.
            Whether the writes succeeded or not are indicated in the response of the {a href="#cmd_gatt_execute_characteristic_value_write"}execute_characteristic_value_write{/a} command.{/p}
             **/
void gecko_cmd_gatt_prepare_characteristic_value_reliable_write(const struct gecko_msg_gatt_prepare_characteristic_value_reliable_write_cmd_t *msg);
/** This command can be used to read the value of an attribute from a local GATT database. Only (maximum BGAPI payload size - 3) amount of data can be read once. The application can continue reading with increased offset value if it receives (maximum BGAPI payload size - 3) amount of data. **/
void gecko_cmd_gatt_server_read_attribute_value(const struct gecko_msg_gatt_server_read_attribute_value_cmd_t *msg);
/** This command can be used to read the type of an attribute from a local GATT database. The type is a UUID, usually 16 or 128 bits long. **/
void gecko_cmd_gatt_server_read_attribute_type(const struct gecko_msg_gatt_server_read_attribute_type_cmd_t *msg);
/** This command can be used to write the value of an attribute in the local GATT database. Writing the value of a characteristic of the local GATT database 
            will not trigger notifications or indications to the remote GATT client in case such characteristic has property of indicate or notify and the client has enabled 
            notification or indication. Notifications and indications are sent to the remote GATT client using {a href="#cmd_gatt_server_send_characteristic_notification"}
            gatt_server_send_characteristic_notification{/a} command. **/
void gecko_cmd_gatt_server_write_attribute_value(const struct gecko_msg_gatt_server_write_attribute_value_cmd_t *msg);
/** This command must be used to send a response to a {a href="#evt_gatt_server_user_read_request"}user_read_request{/a} event. The response needs to be sent within 30 second, otherwise no more GATT 
            transactions are allowed by the remote side. If attr_errorcode is set to 0 the characteristic value is sent to the remote GATT client in the normal way. Other attr_errorcode 
            values will cause the local GATT server to send an attribute protocol error response instead of the actual data.
            At most ATT_MTU - 1 amount of data can be sent once. Client will continue reading by sending new read request with
            increased offset value if it receives ATT_MTU - 1 amount of data. **/
void gecko_cmd_gatt_server_send_user_read_response(const struct gecko_msg_gatt_server_send_user_read_response_cmd_t *msg);
/** This command must be used to send a response to a {a href="#evt_gatt_server_user_write_request"}gatt_server_user_write_request{/a} event when parameter att_opcode in the event is Write Request (see {a href="#enum_gatt_att_opcode"}att_opcode{/a}). The response needs to be sent within 30 seconds, otherwise no more GATT 
            transactions are allowed by the remote side. If attr_errorcode is set to 0 the ATT protocol's write response is sent to indicate to the remote GATT client that 
            the write operation was processed successfully. Other values will cause the local GATT server to send an ATT protocol error response. **/
void gecko_cmd_gatt_server_send_user_write_response(const struct gecko_msg_gatt_server_send_user_write_response_cmd_t *msg);
/** This command can be used to send notifications or indications to one or more remote GATT clients. At most ATT_MTU - 3 amount of data can be sent once.
            {p} A notification or indication is sent only if the client has enabled it by setting the corresponding flag to the Client Characteristic Configuration descriptor. In case the Client Characteristic Configuration descriptor supports both notification and indication, the stack will always send a notification even when the client has enabled both.{/p}
            {p}A new indication to a GATT client cannot be sent until an outstanding indication procedure with the same client has completed. The procedure is completed when a confirmation from the client has been received. The confirmation is indicated 
            by {a href="#evt_gatt_server_characteristic_status"}gatt_server_characteristic_status event{/a}.{/p} **/
void gecko_cmd_gatt_server_send_characteristic_notification(const struct gecko_msg_gatt_server_send_characteristic_notification_cmd_t *msg);
/** This command can be used to find attributes of certain type from a local GATT database. Type is usually given as 16-bit or 128-bit UUID. **/
void gecko_cmd_gatt_server_find_attribute(const struct gecko_msg_gatt_server_find_attribute_cmd_t *msg);
/** 
            Deprecated. Use GATT capability feature for dynamic configuration of services and characteristics in the local GATT database. See {a href="#cmd_gatt_server_set_capabilities"}gatt_server_set_capabilities{/a} command for the details.
            {p}This command can be used to set the local GATT database. The database should not be changed while this device is connected as peripheral since it may cause GATT attributes and data synchronization problems. If the database is changed during advertising mode, advertising packets will not be updated until the advertising is restarted.{/p} **/
void gecko_cmd_gatt_server_set_database(const struct gecko_msg_gatt_server_set_database_cmd_t *msg);
/** 
                This command can be used to set which capabilities should be enabled in the local GATT database. A service is visible to remote GATT clients if at least one of its capabilities has been enabled. The same applies to a characteristic and its attributes. Capability identifiers and their corresponding bit flag values can be found in the auto-generated database header file. See UG118 for how to declare capabilities in GATT database.
                {p} Changing the capabilities of a database effectively causes a database change (attributes being added or removed) from a remote GATT client point of view. If the database has a Generic Attribute service and Service Changed characteristic, the stack will monitor local database change status and manage service changed indications for a GATT client that has enabled the indication configuration of the Service Changed characteristic.{/p}
             **/
void gecko_cmd_gatt_server_set_capabilities(const struct gecko_msg_gatt_server_set_capabilities_cmd_t *msg);
/** Deprecated. Use new command {a href="#cmd_le_connection_close"}le_connection_close{/a} to close Bluetooth connections.{p}This command can be used to close a Bluetooth connection. The parameter is a connection handle which is reported in event {a href="#evt_le_connection_opened"}le_connection_opened{/a}.{/p} **/
void gecko_cmd_endpoint_close(const struct gecko_msg_endpoint_close_cmd_t *msg);
/** This command can be used to start a software timer. Multiple concurrent timers can be running simultaneously. There are 256 unique timer IDs available.
            The maximum number of concurrent timers is configurable at device initialization. Up to 16 concurrent timers can be configured. The default configuration is 4. As the RAM for storing timer data is pre-allocated at initialization, an application should not configure the amount more than it needs for minimizing RAM usage. **/
void gecko_cmd_hardware_set_soft_timer(const struct gecko_msg_hardware_set_soft_timer_cmd_t *msg);
/** Deprecated. Get elapsed time since last reset of RTCC **/
void gecko_cmd_hardware_get_time(const void *nul);
/** This command can be used to start a software timer with some slack. Slack parameter allows stack to optimize wake ups and save power. Timer event is triggered between time and time + slack. See also description of {a href="#cmd_hardware_set_soft_timer"}hardware_set_soft_timer{/a} command. **/
void gecko_cmd_hardware_set_lazy_soft_timer(const struct gecko_msg_hardware_set_lazy_soft_timer_cmd_t *msg);
/** Deprecated. This command can be used to enable or disable DC/DC. **/
void gecko_cmd_hardware_enable_dcdc(const struct gecko_msg_hardware_enable_dcdc_cmd_t *msg);
/** This command can be used to erase all PS keys and their corresponding values. **/
void gecko_cmd_flash_ps_erase_all(const void *nul);
/** This command can be used to store a value into the specified PS key. Allowed PS keys are in range from 0x4000 to 0x407F. At most 56 bytes user data can be stored in one PS key. Error code 0x018a (command_too_long) will be returned if more than 56 bytes data is passed in. **/
void gecko_cmd_flash_ps_save(const struct gecko_msg_flash_ps_save_cmd_t *msg);
/** This command can be used for retrieving the value of the specified PS key. **/
void gecko_cmd_flash_ps_load(const struct gecko_msg_flash_ps_load_cmd_t *msg);
/** This command can be used to erase a single PS key and its value from the persistent store.. **/
void gecko_cmd_flash_ps_erase(const struct gecko_msg_flash_ps_erase_cmd_t *msg);
/** 
                This command can be used to start a transmitter test. The test is meant to be used against a separate Bluetooth tester device. When the command is processed by the radio, a {a href="#evt_test_dtm_completed"}test_dtm_completed{/a} event is triggered. This event indicates if the test started successfully.

                {p}In the transmitter test, the device sends packets continuously with a fixed interval. The type and length of each packet is set by {b}packet_type{/b} and {b}length{/b} parameters. Parameter {b}phy{/b} specifies which PHY is used to transmit the packets. All devices support at least the 1M PHY. There is also a special packet type, {b}test_pkt_carrier{/b}, which can be used to transmit continuous unmodulated carrier. The {b}length{/b} field is ignored in this mode.{/p}

                {p}The test may be stopped using the {a href="#cmd_test_dtm_end"}test_dtm_end{/a} command.{/p}
             **/
void gecko_cmd_test_dtm_tx(const struct gecko_msg_test_dtm_tx_cmd_t *msg);
/** 
                This command can be used to start a receiver test. The test is meant to be used against a separate Bluetooth tester device. When the command is processed by the radio, a {a href="#evt_test_dtm_completed"}test_dtm_completed{/a} event is triggered. This event indicates if the test started successfully.

                {p}Parameter {b}phy{/b} specifies which PHY is used to receive the packets. All devices support at least the 1M PHY.{/p}

                {p}The test may be stopped using the {a href="#cmd_test_dtm_end"}test_dtm_end{/a} command. This will trigger another {a href="#evt_test_dtm_completed"}test_dtm_completed{/a} event, which carries the number of packets received during the test.{/p}
             **/
void gecko_cmd_test_dtm_rx(const struct gecko_msg_test_dtm_rx_cmd_t *msg);
/** 
                This command can be used to end a transmitter or a receiver test. When the command is processed by the radio and the test has ended, a {a href="#evt_test_dtm_completed"}test_dtm_completed{/a} event is triggered.
             **/
void gecko_cmd_test_dtm_end(const void *nul);
/** debug_command **/
void gecko_cmd_test_debug_command(const struct gecko_msg_test_debug_command_cmd_t *msg);
/** debug_counter **/
void gecko_cmd_test_debug_counter(const struct gecko_msg_test_debug_counter_cmd_t *msg);
/** This command can be used to set whether the device should accept new bondings. By default, the device does not accept new bondings. **/
void gecko_cmd_sm_set_bondable_mode(const struct gecko_msg_sm_set_bondable_mode_cmd_t *msg);
/** This command can be used to configure security requirements and I/O capabilities of the system. **/
void gecko_cmd_sm_configure(const struct gecko_msg_sm_configure_cmd_t *msg);
/** This command can be used to set maximum allowed bonding count and bonding policy. The default value is maximum number of bondings supported. **/
void gecko_cmd_sm_store_bonding_configuration(const struct gecko_msg_sm_store_bonding_configuration_cmd_t *msg);
/** This command can be used to enhance the security of a connection to current security requirements. On an unencrypted connection, this will encrypt the connection and will also perform bonding if requested by both devices. On an encrypted connection, this will cause the connection re-encrypted. **/
void gecko_cmd_sm_increase_security(const struct gecko_msg_sm_increase_security_cmd_t *msg);
/** This command can be used to delete specified bonding information from Persistent Store. **/
void gecko_cmd_sm_delete_bonding(const struct gecko_msg_sm_delete_bonding_cmd_t *msg);
/** This command can be used to delete all bonding information from Persistent Store. **/
void gecko_cmd_sm_delete_bondings(const void *nul);
/** This command can be used to enter a passkey after receiving a passkey request event. **/
void gecko_cmd_sm_enter_passkey(const struct gecko_msg_sm_enter_passkey_cmd_t *msg);
/** This command can be used for accepting or rejecting reported confirm value. **/
void gecko_cmd_sm_passkey_confirm(const struct gecko_msg_sm_passkey_confirm_cmd_t *msg);
/** 
                This command can be used to set the OOB data (out-of-band encryption data) for legacy pairing for a device. The OOB data may be, for example, a PIN code exchanged over 
                an alternate path like NFC. The device will not allow any other kind of bonding if OOB data is set. The OOB data cannot be set simultaneously with secure connections OOB data. 
             **/
void gecko_cmd_sm_set_oob_data(const struct gecko_msg_sm_set_oob_data_cmd_t *msg);
/** This command can be used to list all bondings stored in the bonding database. Bondings are reported by using the {a href="#evt_sm_list_bonding_entry"}
            sm_list_bonding_entry{/a} event for each bonding and the report is ended with {a href="#evt_sm_list_all_bondings_complete"}sm_list_all_bondings_complete{/a} event. 
            Recommended to be used only for debugging purposes, because reading from the Persistent Store is relatively slow. **/
void gecko_cmd_sm_list_all_bondings(const void *nul);
/** This command can be used for accepting or rejecting bonding request. **/
void gecko_cmd_sm_bonding_confirm(const struct gecko_msg_sm_bonding_confirm_cmd_t *msg);
/** This command can be used to set Security Manager in debug mode. In this mode the secure connections bonding uses debug keys, so that the encrypted packet can be opened by Bluetooth protocol analyzer. To disable the debug mode, you need to restart the device. **/
void gecko_cmd_sm_set_debug_mode(const void *nul);
/** This command can be used to enter a fixed passkey which will be used in the {a href="#evt_sm_passkey_display"}sm_passkey_display{/a} event. **/
void gecko_cmd_sm_set_passkey(const struct gecko_msg_sm_set_passkey_cmd_t *msg);
/** 
                This command can be used to enable the use of OOB data (out-of-band encryption data) for a device for secure connections pairing.
                The enabling will genarate new OOB data and confirm values which can be sent to the remote device.
                After enabling the secure connections OOB data, the remote devices OOB data can be set with {a href="#cmd_sm_set_sc_remote_oob_data"}sm_set_sc_remote_oob_data{/a}.
                Calling this function will erase any set remote device OOB data and confirm values.
                The device will not allow any other kind of bonding if OOB data is set. The secure connections OOB data cannot be enabled simultaneously with legacy pairing OOB data.
             **/
void gecko_cmd_sm_use_sc_oob(const struct gecko_msg_sm_use_sc_oob_cmd_t *msg);
/** 
                This command can be used to set OOB data and confirm values (out-of-band encryption) received from the remote device for secure connections pairing.
                OOB data must be enabled with {a href="#cmd_sm_use_sc_oob"}sm_use_sc_oob{/a} before setting the remote device OOB data.
             **/
void gecko_cmd_sm_set_sc_remote_oob_data(const struct gecko_msg_sm_set_sc_remote_oob_data_cmd_t *msg);
/** This command can be used to configure the Apple HomeKit accessory and its settings. It is possible to reinitialize configuration in run time. New fast advertising parameters will be used for next fast advertising. **/
void gecko_cmd_homekit_configure(const struct gecko_msg_homekit_configure_cmd_t *msg);
/** This command can be used to start or stop Apple HomeKit accessory advertising. The command and parameters will take effect immediately. If the given parameters can't be used in the currently active mode, an error will be returned. **/
void gecko_cmd_homekit_advertise(const struct gecko_msg_homekit_advertise_cmd_t *msg);
/** This command can be used to delete all Apple HomeKit pairing data. **/
void gecko_cmd_homekit_delete_pairings(const void *nul);
/** This command can be used to make an I2C test connection with Apple authentication co-processor and return error if communication failed. **/
void gecko_cmd_homekit_check_authcp(const void *nul);
/** This command can be used to get pairing ID of the connected iOS device. **/
void gecko_cmd_homekit_get_pairing_id(const struct gecko_msg_homekit_get_pairing_id_cmd_t *msg);
/** This command can be used to send a response to a {a href="#evt_homekit_write_request"}homekit_write_request{/a} event. The response needs to be sent within 30 seconds, otherwise no more GATT 
            transactions are allowed by the remote side. 
            {br}{br}If the status_code is set to 0 the HAP will send a response informing that the write operation was processed successfully and other values will cause the HAP to send a HAP error status response. **/
void gecko_cmd_homekit_send_write_response(const struct gecko_msg_homekit_send_write_response_cmd_t *msg);
/** This command can be used to send a response to a {a href="#evt_homekit_read_request"}homekit_read_request{/a} event. The response needs to be sent within 30 seconds, or otherwise no more GATT transactions are allowed by the remote side.
            {br}{br}If {b}status_code{/b} is set to 0, the characteristic value is sent to the remote GATT client through HomeKit library in a normal way. Other {b}status_code{/b} values will cause a HAP error status response instead of the actual data being sent.
            {br}{br}If the value data size is less than attribute_size then the Apple HomeKit library will send new {a href="#evt_homekit_read_request"}homekit_read_request{/a} event with suitable offset. The Apple HomeKit library provides automatic formatting for the frame as well encryption. **/
void gecko_cmd_homekit_send_read_response(const struct gecko_msg_homekit_send_read_response_cmd_t *msg);
/** This command can be used to make suitable action by HomeKit library for GSN (Global State Number) value. **/
void gecko_cmd_homekit_gsn_action(const struct gecko_msg_homekit_gsn_action_cmd_t *msg);
/** 
                This command can be used to perform suitable actions for HomeKit notifications according to a connection state and the originator of the change. When device is in connected state and it is local change it sends empty indication to controller. When device is disconnected it starts broadcast events advertising, next after timeout it starts fast advertising. Broadcast and fast advertising parameters are set in {a href="#cmd_homekit_configure"}homekit_configure{/a}. After fast advertising timeout it reverts previous advertising settings. For both states it sets suitable Global State Number value accoring to HomeKit specification rules.
             **/
void gecko_cmd_homekit_event_notification(const struct gecko_msg_homekit_event_notification_cmd_t *msg);
/** This command can be used to make suitable action by HomeKit library for broadcast advertisisng. **/
void gecko_cmd_homekit_broadcast_action(const struct gecko_msg_homekit_broadcast_action_cmd_t *msg);
/** Initializes the Mesh stack in Node role. When
            initialization is complete a {a
            href="#evt_mesh_node_initialized"}node initialized{/a}
            event will be generated.
            {br}{br}

            This command must be issued before any other Bluetooth
            Mesh commands, except for {a href="#mesh_node_set_uuid"}
            set node UUID{/a} command.
            {br}{br}

            Note that you may initialize a
            device either in the Provisioner or the Node role, but not
            both.
             **/
void gecko_cmd_mesh_node_init(const void *nul);
/** Start sending Unprovisioned Device Beacons.
            {br}{br}

            This command makes an unprovisioned device available for
            provisioning. The device will start to send periodic
            unprovisioned device beacons containing device UUID. It
            will also start listening for incoming Provisioner
            connection attempts on the specified bearers (PB-ADV,
            PB-GATT, or both). In case of PB-GATT, the device will
            also begin advertising its provisioning GATT service.
            {br}{br}

            At the beginning of a provisioning process a {a
            href="#evt_mesh_node_provisioning_started"}provisioning
            started{/a} event will be generated. When the device
            receives provisioning data from the Provisioner a {a
            href="#evt_mesh_node_provisioned"}node provisioned{/a}
            event will be generates; if provisioning fails with an
            error, a {a href="#evt_mesh_node_provisioning_failed"}
            provisioning failed{/a} event will be generated instead.
            {br}{br}

            Once provisioned, the node elements have been allocated
            addresses and a network key has been deployed to the node,
            making the node ready for further configuration by the
            Provisioner. Note that the node is not yet fully ready
            for communicating with other nodes on the network at this
            stage.
             **/
void gecko_cmd_mesh_node_start_unprov_beaconing(const struct gecko_msg_mesh_node_start_unprov_beaconing_cmd_t *msg);
/** This command is used to provide the stack with the Input out-of-band authentication data which the Provisioner is displaying. **/
void gecko_cmd_mesh_node_input_oob_request_rsp(const struct gecko_msg_mesh_node_input_oob_request_rsp_cmd_t *msg);
/** Get the device UUID.
            {br}{br}

            Every Mesh device has a 128-bit UUID identifying the device.
            It is used primarily during provisioning, as it is broadcast
            in Unprovisioned Device Beacons to indicate that the device
            is ready to be provisioned.{br}{br}

            This command can be used for debugging purposes. During
            provisioning the stack automatically uses the UUID of the
            device and it does not need to be explicitly specified when
            {a href="#cmd_mesh_node_start_unprov_beaconing"}unprovisioned
            device beaconing{/a} is started.
             **/
void gecko_cmd_mesh_node_get_uuid(const void *nul);
/** Used to provision devices completely
            out-of-band. Provisioner's device database needs
            to be populated with the corresponding values to
            make the device reachable and configurable in the
            Provisioner's network. {br}{br}

            See also the Provisioner command for
            {a href="#cmd_mesh_prov_ddb_add"}adding a device{/a}
            to Provisioner's device database. {br}{br}

            {b}NOTE{/b}: the device must be
            reset after this command has been issued. **/
void gecko_cmd_mesh_node_set_provisioning_data(const struct gecko_msg_mesh_node_set_provisioning_data_cmd_t *msg);
/** Initializes the Mesh stack in Node role. When
            initialization is complete a {a
            href="#evt_mesh_node_initialized"}node initialized{/a}
            event will be generated.
            {br}{br}

            This command is the same as the {a
            href="#cmd_mesh_node_init"}node initialization{/a}
            command except for parameters defining whether OOB
            authentication data stored on the device can be used
            during provisioning.
            {br}{br}

            This command must be issued before any other Bluetooth
            Mesh commands, except for {a href="#mesh_node_set_uuid"}
            set node UUID{/a} command.
            {br}{br}

            Note that you may initialize a device either in the
            Provisioner or the Node role, but not both.
             **/
void gecko_cmd_mesh_node_init_oob(const struct gecko_msg_mesh_node_init_oob_cmd_t *msg);
/**  **/
void gecko_cmd_mesh_node_set_ivrecovery_mode(const struct gecko_msg_mesh_node_set_ivrecovery_mode_cmd_t *msg);
/**  **/
void gecko_cmd_mesh_node_get_ivrecovery_mode(const void *nul);
/**  **/
void gecko_cmd_mesh_node_set_adv_event_filter(const struct gecko_msg_mesh_node_set_adv_event_filter_cmd_t *msg);
/**  **/
void gecko_cmd_mesh_node_get_statistics(const void *nul);
/**  **/
void gecko_cmd_mesh_node_clear_statistics(const void *nul);
/**  **/
void gecko_cmd_mesh_node_set_net_relay_delay(const struct gecko_msg_mesh_node_set_net_relay_delay_cmd_t *msg);
/**  **/
void gecko_cmd_mesh_node_get_net_relay_delay(const void *nul);
/** Get the current IV index update state in the network.
           **/
void gecko_cmd_mesh_node_get_ivupdate_state(const void *nul);
/**  **/
void gecko_cmd_mesh_node_request_ivupdate(const void *nul);
/** Get the number of sequence numbers remaining on an element (before sequence numbers are exhausted). Note that every element of a node keeps a separate sequence number counter. "
           **/
void gecko_cmd_mesh_node_get_seq_remaining(const struct gecko_msg_mesh_node_get_seq_remaining_cmd_t *msg);
/**  Save replay protection list to NVM  **/
void gecko_cmd_mesh_node_save_replay_protection_list(const void *nul);
/** Write device UUID into persistent storage. This
          command must be called before the mesh stack is initialized;
          otherwise the change will not take effect before a reboot.
          {br}{br}

          Note that UUID must not be changed when the device is provisioned
          to a network.
          {br}{br}

          Furthermore, UUID should remain constant if a device
          has received a firmware update which requires reprovisioning of the
          device once the update has been applied (e.g., new elements are
          added by the update).  **/
void gecko_cmd_mesh_node_set_uuid(const struct gecko_msg_mesh_node_set_uuid_cmd_t *msg);
/** Get the unicast address configured to an element. **/
void gecko_cmd_mesh_node_get_element_address(const struct gecko_msg_mesh_node_get_element_address_cmd_t *msg);
/** This command is used to provide the stack with static out-of-band authentication data which the stack requested. **/
void gecko_cmd_mesh_node_static_oob_request_rsp(const struct gecko_msg_mesh_node_static_oob_request_rsp_cmd_t *msg);
/** Initializes the Mesh stack in Provisioner
            role. When initialization is complete a {a
            href="#evt_mesh_prov_initialized"}provisioner initialized
            event{/a} will be generated.  {br}{br}

            This command must be issued before any other Bluetooth
            Mesh commands. Note that you may initialize a device
            either in the Provisioner or the Node role, but not both.
             **/
void gecko_cmd_mesh_prov_init(const void *nul);
/** Start scanning for unprovisioned device
            beacons.  {br}{br} Unprovisioned devices send out beacons
            containing their UUID.  An {a
            href="#evt_mesh_prov_unprov_beacon"}unprovisioned beacon
            event{/a} will be generated for each beacon seen. Once the
            UUID of a device is known, the Provisioner may start
            provisioning the device by issuing either the {a
            href="#cmd_mesh_prov_provision_device"} provision device
            over PB-ADV{/a} or {a
            href="#cmd_mesh_prov_provision_gatt_device"}provision
            device over PB-GATT{/a} command.  **/
void gecko_cmd_mesh_prov_scan_unprov_beacons(const void *nul);
/** Provision a device into a network using the
            advertisement bearer (PB-ADV)
            {br}{br}

            Issuing this command starts the provisioning process for
            the specified device. Once the process completes
            successfully, a {a
            href="#evt_mesh_prov_device_provisioned"}device
            provisioned event{/a} is generated. If provisioning does
            not succeed, a {a
            href="#evt_mesh_prov_provisioning_failed"} provisioning
            failed event{/a} will be generated instead. **/
void gecko_cmd_mesh_prov_provision_device(const struct gecko_msg_mesh_prov_provision_device_cmd_t *msg);
/** Creates a new network key on the Provisioner.
            {br}{br}

            The created key can be deployed on a Node using the {a
            href="#cmd_mesh_prov_network_add"}add network key{/a}
            command.
             **/
void gecko_cmd_mesh_prov_create_network(const struct gecko_msg_mesh_prov_create_network_cmd_t *msg);
/** Get the DCD of the device from a remote
            Configuration Server.  If the call succeeds, the retrieved
            DCD will be returned in a {a
            href="#evt_mesh_prov_dcd_status"}DCD status{/a}
            event.  **/
void gecko_cmd_mesh_prov_get_dcd(const struct gecko_msg_mesh_prov_get_dcd_cmd_t *msg);
/** 
              Get a configration state value of a Node.
              {br}{br}

              Node Configuration Server model state contains a number
              of node-wide values (for instance, Node's default TTL
              value) which are represented as single bytes; they can
              be queried with this command. See the {a
              href="#enum_mesh_node_config_state"} list of
              configuration states{/a} for reference.
              {br}{br}

              Querying the more complex states (for instance,
              model-application key bindings) should be done using the
              commands dedicated for the purpose; see, e.g., {a
              href="#cmd_mesh_prov_model_app_get"}get
              model application key bindings{/a} command.
              {br}{br}

              Node response is reported with an {a
              href="#evt_mesh_prov_config_status"}configuration status
              event{/a}.
              {br}{br}

             **/
void gecko_cmd_mesh_prov_get_config(const struct gecko_msg_mesh_prov_get_config_cmd_t *msg);
/** 
              Set a configration state value of a Node.
              {br}{br}

              Node Configuration Server model state contains a number
              of node-wide values (for instance, Node's default TTL
              value) which are represented as single bytes; they can
              be modified with this command. See the {a
              href="#enum_mesh_node_config_state"} list of
              configuration states{/a} for reference.
              {br}{br}

              Setting the more complex states should be done using the
              commands dedicated for the purpose as this command accepts
              only raw binary data as the value to set.
              {br}{br}

              Node response is reported with an {a
              href="#evt_mesh_prov_config_status"}configuration status
              event{/a}.
              {br}{br}

             **/
void gecko_cmd_mesh_prov_set_config(const struct gecko_msg_mesh_prov_set_config_cmd_t *msg);
/** Creates a new application key on the Provisioner.
            {br}{br}

            An application key is always bound to a network key; that
            is, the application key is only valid in the context of a
            particular network key. The selected network key must
            exist on the Provisioner (see {a
            href="#cmd_mesh_prov_create_network"}create network
            key{/a} command). {br}{br}

            The created application key can be deployed on a Node
            using the {a href="#cmd_mesh_prov_appkey_add"}add
            application key{/a} command.
             **/
void gecko_cmd_mesh_prov_create_appkey(const struct gecko_msg_mesh_prov_create_appkey_cmd_t *msg);
/** This command is used to respond to prov_oob_pkey_request **/
void gecko_cmd_mesh_prov_oob_pkey_rsp(const struct gecko_msg_mesh_prov_oob_pkey_rsp_cmd_t *msg);
/** This command is used to respond to prov_oob_auth_request **/
void gecko_cmd_mesh_prov_oob_auth_rsp(const struct gecko_msg_mesh_prov_oob_auth_rsp_cmd_t *msg);
/** Set the OOB requirements for devices to be Provisioned **/
void gecko_cmd_mesh_prov_set_oob_requirements(const struct gecko_msg_mesh_prov_set_oob_requirements_cmd_t *msg);
/** Start a key refresh procedure in the network.
            {br}{br}

            A key refresh procedure updates a network key, and
            optionally application keys associated with it, in all
            nodes of the network except for blacklisted nodes. After
            the refresh procedure is complete the old keys will be
            discarded. Thus the blacklisted nodes which did not
            receive new keys will be shut out of the network at the
            completion of the procedure.  {br}{br}

             **/
void gecko_cmd_mesh_prov_key_refresh_start(const struct gecko_msg_mesh_prov_key_refresh_start_cmd_t *msg);
/** Check the key refresh blacklist status of a
          node. Blacklisted nodes do not participate in the key
          refresh procedure, and can thus be shut out of the
          network.  **/
void gecko_cmd_mesh_prov_get_key_refresh_blacklist(const struct gecko_msg_mesh_prov_get_key_refresh_blacklist_cmd_t *msg);
/** Set the key refresh blacklist status of a
          node. Blacklisted nodes do not participate in the key
          refresh procedure, and can thus be shut out of the
          network.  **/
void gecko_cmd_mesh_prov_set_key_refresh_blacklist(const struct gecko_msg_mesh_prov_set_key_refresh_blacklist_cmd_t *msg);
/** Push an application key to a node. The key
            must exist on the Provisioner (see {a
            href="#cmd_mesh_prov_create_appkey"}create application
            key{/a} command).
            {br}{br}

            An application key is always bound to a network key; that
            is, the application key is only valid in the context of a
            particular network key. The selected network key must
            exist on the Provisioner (see {a
            href="#cmd_mesh_prov_create_network"}create network
            key{/a} command) and must have been deployed on the node
            prior to this command (either during provisioning or with
            an {a href="#cmd_mesh_prov_network_add"}add network
            key{/a} command). {br}{br}
            
            Node response is reported with an {a
            href="#evt_mesh_prov_config_status"}configuration status
            event{/a}. **/
void gecko_cmd_mesh_prov_appkey_add(const struct gecko_msg_mesh_prov_appkey_add_cmd_t *msg);
/** Delete an application key on a node.
            {br}{br}

            Note that the deleted key will be removed from any model
            bindings on the node at the same time automatically; there
            is no need to explicitly delete them using {a
            href="#cmd_mesh_prov_model_app_unbind"}model-application
            key unbind command{/a}.  {br}{br}

            Node response is reported with an {a
            href="#evt_mesh_prov_config_status"}configuration status
            event{/a}. **/
void gecko_cmd_mesh_prov_appkey_delete(const struct gecko_msg_mesh_prov_appkey_delete_cmd_t *msg);
/** Bind a model to an application key. Node response is reported with a {a href="#evt_mesh_prov_config_status"}configuration status{/a} event. **/
void gecko_cmd_mesh_prov_model_app_bind(const struct gecko_msg_mesh_prov_model_app_bind_cmd_t *msg);
/** Remove application key binding from a model. Node response is reported with a {a href="#evt_mesh_prov_config_status"}configuration status{/a} event. **/
void gecko_cmd_mesh_prov_model_app_unbind(const struct gecko_msg_mesh_prov_model_app_unbind_cmd_t *msg);
/** Get application keys to which the model is bound. Node response is reported with a {a href="#evt_mesh_prov_config_status"}configuration status{/a} event. **/
void gecko_cmd_mesh_prov_model_app_get(const struct gecko_msg_mesh_prov_model_app_get_cmd_t *msg);
/** Add an address to a model's subscription list. Node response is reported with a {a href="#evt_mesh_prov_config_status"}configuration status{/a} event. **/
void gecko_cmd_mesh_prov_model_sub_add(const struct gecko_msg_mesh_prov_model_sub_add_cmd_t *msg);
/** Set a model's publication address, key, and parameters.  Node response is reported with a {a href="#evt_mesh_prov_config_status"}configuration status{/a} event. **/
void gecko_cmd_mesh_prov_model_pub_set(const struct gecko_msg_mesh_prov_model_pub_set_cmd_t *msg);
/** Provision a device into a network using the
            GATT bearer (PB-GATT)
            {br}{br}

            Issuing this command starts the provisioning process for
            the specified device. Once the process completes
            successfully, a {a
            href="#evt_mesh_prov_device_provisioned"}device
            provisioned event{/a} is generated. If provisioning does
            not succeed, a {a
            href="#evt_mesh_prov_provisioning_failed"} provisioning
            failed event{/a} will be generated instead.
            {br}{br}

            Note that this command is available only if GATT
            functionality is compiled in to the firmware. If that is
            not the case, the command will return with a "not
            implemented" return code.
             **/
void gecko_cmd_mesh_prov_provision_gatt_device(const struct gecko_msg_mesh_prov_provision_gatt_device_cmd_t *msg);
/** Get a Provisioner device database entry with matching UUID. **/
void gecko_cmd_mesh_prov_ddb_get(const struct gecko_msg_mesh_prov_ddb_get_cmd_t *msg);
/** Delete node information from Provisioner
            database.  This should be followed by a {a
            href="#cmd_mesh_prov_key_refresh_start"} key refresh
            procedure{/a} updating the keys of the remaining nodes to
            make sure the deleted node is shut off from the
            network. **/
void gecko_cmd_mesh_prov_ddb_delete(const struct gecko_msg_mesh_prov_ddb_delete_cmd_t *msg);
/** Add a new node entry to the Provisioner's
            device database.  Note that the device key, primary element
            address, and network key need to be deployed to the node being
            added in order for it to be configurable. See {a
            href="#cmd_mesh_node_set_provisioning_data"}set node
            provisioning data{/a} command.  **/
void gecko_cmd_mesh_prov_ddb_add(const struct gecko_msg_mesh_prov_ddb_add_cmd_t *msg);
/** Lists nodes known by this Provisioner. A
            number of {a href="#evt_mesh_prov_ddb_list"}database
            listing{/a} events will be generated. **/
void gecko_cmd_mesh_prov_ddb_list_devices(const void *nul);
/** Push a Network Key to a Node. The key
            must exist on the Provisioner (see {a
            href="#cmd_mesh_prov_create_network"}create network
            key{/a} command).
            {br}{br}

            Node response is reported with an {a
            href="#evt_mesh_prov_config_status"}configuration status
            event{/a}. **/
void gecko_cmd_mesh_prov_network_add(const struct gecko_msg_mesh_prov_network_add_cmd_t *msg);
/** Delete a network key on a node.
            {br}{br}

            When a network key is deleted the application keys
            bound to it are deleted automatically; there is no
            need to explicitly use the {a href="#cmd_mesh_prov_appkey_delete"}
            delete application key{/a} command.
            {br}{br}
            
            Note that it is not possible to delete the key used in
            encrypting the command itself (which is the first network
            key deployed to the node during provisioning) as otherwise
            the node would not be able to respond. {br}{br}

            Node response is reported with an {a
            href="#evt_mesh_prov_config_status"}configuration status
            event{/a}. **/
void gecko_cmd_mesh_prov_network_delete(const struct gecko_msg_mesh_prov_network_delete_cmd_t *msg);
/** Retrieve network layer transmission parameters of a node. **/
void gecko_cmd_mesh_prov_nettx_get(const struct gecko_msg_mesh_prov_nettx_get_cmd_t *msg);
/** Set network layer transmission parameters of a node. **/
void gecko_cmd_mesh_prov_nettx_set(const struct gecko_msg_mesh_prov_nettx_set_cmd_t *msg);
/** Remove an address from a model's subscription
            list. Node response is reported with a {a
            href="#evt_mesh_prov_config_status"}configuration
            status{/a} event. **/
void gecko_cmd_mesh_prov_model_sub_del(const struct gecko_msg_mesh_prov_model_sub_del_cmd_t *msg);
/** Add an virtual address to a model's subscription list. Node response is reported with a {a href="#evt_mesh_prov_config_status"}configuration status{/a} event. **/
void gecko_cmd_mesh_prov_model_sub_add_va(const struct gecko_msg_mesh_prov_model_sub_add_va_cmd_t *msg);
/** Remove a virtual address from a Model's subscription list. Node response is reported with a {a href="#evt_mesh_prov_config_status"}configuration status{/a} event. **/
void gecko_cmd_mesh_prov_model_sub_del_va(const struct gecko_msg_mesh_prov_model_sub_del_va_cmd_t *msg);
/** Set an address to a model's subscription list, overwriting previous contents. Node response is reported with a {a href="#evt_mesh_prov_config_status"}configuration status{/a} event. **/
void gecko_cmd_mesh_prov_model_sub_set(const struct gecko_msg_mesh_prov_model_sub_set_cmd_t *msg);
/** Set a virtual address to a model's subscription list, overwriting previous contents. Node response is reported with a {a href="#evt_mesh_prov_config_status"}configuration status{/a} event. **/
void gecko_cmd_mesh_prov_model_sub_set_va(const struct gecko_msg_mesh_prov_model_sub_set_va_cmd_t *msg);
/** Get heartbeat publication state of a
            node. Node response will be reported as a {a
            href="#evt_mesh_prov_heartbeat_publication_status"}heartbeat
            publication status{/a} event. **/
void gecko_cmd_mesh_prov_heartbeat_publication_get(const struct gecko_msg_mesh_prov_heartbeat_publication_get_cmd_t *msg);
/** Set heartbeat publication state of a
            node. Node response will be reported as a {a
            href="#evt_mesh_prov_heartbeat_publication_status"}heartbeat
            publication status{/a} event. **/
void gecko_cmd_mesh_prov_heartbeat_publication_set(const struct gecko_msg_mesh_prov_heartbeat_publication_set_cmd_t *msg);
/** Get node heartbeat subscription state. The
            node will respond with a {a
            href="#evt_mesh_prov_heartbeat_subscription_status"}subscription
            status{/a} event. **/
void gecko_cmd_mesh_prov_heartbeat_subscription_get(const struct gecko_msg_mesh_prov_heartbeat_subscription_get_cmd_t *msg);
/** Get node heartbeat subscription state. The
            node will respond with a {a
            href="#evt_mesh_prov_heartbeat_subscription_status"}subscription
            status{/a} event. **/
void gecko_cmd_mesh_prov_heartbeat_subscription_set(const struct gecko_msg_mesh_prov_heartbeat_subscription_set_cmd_t *msg);
/** Get node relay retransmission state. The
            node will respond with a {a
            href="#evt_mesh_prov_relay_status"}subscription
            status{/a} event. **/
void gecko_cmd_mesh_prov_relay_get(const struct gecko_msg_mesh_prov_relay_get_cmd_t *msg);
/** Set node relay retransmission state. The
            node will respond with a {a
            href="#evt_mesh_prov_relay_status"}relay
            status{/a} event. **/
void gecko_cmd_mesh_prov_relay_set(const struct gecko_msg_mesh_prov_relay_set_cmd_t *msg);
/** Send a reset request to a node.
            {br}{br}

            If a node replies to the request, a {a
            href="#evt_mesh_prov_node_reset"}node reset{/a} event will
            be generated. Note that the reply packet may get lost and
            the node has reset itself even in the absence of the
            event. {br}{br}

            Also note that for securely removing a node from the network
            a key refresh, with the removed node blacklisted, should be
            done.
             **/
void gecko_cmd_mesh_prov_reset_node(const struct gecko_msg_mesh_prov_reset_node_cmd_t *msg);
/** Get a list of application keys bound to a network key on a node.
            {br}{br}

            This command is used to return a list of application key
            indices for the application keys bound to a particular
            network key on a node. {br}{br}

            Node response is reported with a number of {a
            href="#evt_mesh_prov_appkey_list"}application key list
            {/a}events, terminated by a {a
            href="#evt_mesh_prov_appkey_list_end"}application key list
            end{/a} event. **/
void gecko_cmd_mesh_prov_appkey_get(const struct gecko_msg_mesh_prov_appkey_get_cmd_t *msg);
/** Get a list of network keys bound from a node.
            {br}{br}

            This command is used to return a list of network key
            indices of network keys deployed to a node. {br}{br}

            Node response is reported with a number of {a
            href="#evt_mesh_prov_network_list"}network key list
            {/a}events, terminated by a {a
            href="#evt_mesh_prov_network_list_end"}network key list
            end{/a} event. **/
void gecko_cmd_mesh_prov_network_get(const struct gecko_msg_mesh_prov_network_get_cmd_t *msg);
/** Clear all addresses from a model's subscription list. Node response is reported with a {a href="#evt_mesh_prov_config_status"}configuration status{/a} event. **/
void gecko_cmd_mesh_prov_model_sub_clear(const struct gecko_msg_mesh_prov_model_sub_clear_cmd_t *msg);
/** Get a model's publication address, key, and parameters.  Node response is reported with a {a href="#evt_mesh_prov_model_pub_status"}model publication parameters{/a} event. **/
void gecko_cmd_mesh_prov_model_pub_get(const struct gecko_msg_mesh_prov_model_pub_get_cmd_t *msg);
/** Set a model's publication virtual address, key, and parameters.  Node response is reported with a {a href="#evt_mesh_prov_config_status"}configuration status{/a} event. **/
void gecko_cmd_mesh_prov_model_pub_set_va(const struct gecko_msg_mesh_prov_model_pub_set_va_cmd_t *msg);
/** This command is otherwise the same as {a href="#cmd_mesh_prov_model_pub_set"}the regular model publication set command{/a} but it also has a parameter for setting the Friendship Credential Flag. **/
void gecko_cmd_mesh_prov_model_pub_set_cred(const struct gecko_msg_mesh_prov_model_pub_set_cred_cmd_t *msg);
/** This command is otherwise the same as {a href="#cmd_mesh_prov_model_pub_set_va"}the regular model publication set virtual address command{/a} but it also has a parameter for setting the Friendship Credential Flag. **/
void gecko_cmd_mesh_prov_model_pub_set_va_cred(const struct gecko_msg_mesh_prov_model_pub_set_va_cred_cmd_t *msg);
/** Get a model's subscription list. Node response is reported with {a href="#evt_mesh_prov_model_sub_addr"}subscription list entry{/a} and {a href="#evt_mesh_prov_model_sub_addr_end"}subscription list entries end{/a} events. **/
void gecko_cmd_mesh_prov_model_sub_get(const struct gecko_msg_mesh_prov_model_sub_get_cmd_t *msg);
/**  {a
            href="#evt_mesh_prov_friend_timeout_status"} friend poll timeout
            status{/a} event. **/
void gecko_cmd_mesh_prov_friend_timeout_get(const struct gecko_msg_mesh_prov_friend_timeout_get_cmd_t *msg);
/** Dumps all keys the node has **/
void gecko_cmd_mesh_debug_dump_keys(const struct gecko_msg_mesh_debug_dump_keys_cmd_t *msg);
/** Dumps all Node entries in the Provisioner's database **/
void gecko_cmd_mesh_debug_prov_dump_database(const void *nul);
/** Inserts a binary dump blob into the database **/
void gecko_cmd_mesh_debug_prov_load_database_entries(const struct gecko_msg_mesh_debug_prov_load_database_entries_cmd_t *msg);
/**  **/
void gecko_cmd_mesh_debug_set_mask(const struct gecko_msg_mesh_debug_set_mask_cmd_t *msg);
/** Sets kludges useful for Mesh debugging. 0x1 = disable le_gap scan response events. **/
void gecko_cmd_mesh_debug_set_kludges(const struct gecko_msg_mesh_debug_set_kludges_cmd_t *msg);
/**  **/
void gecko_cmd_mesh_debug_rssi_limit_set(const struct gecko_msg_mesh_debug_rssi_limit_set_cmd_t *msg);
/**  **/
void gecko_cmd_mesh_debug_add_va(const struct gecko_msg_mesh_debug_add_va_cmd_t *msg);
/**  **/
void gecko_cmd_mesh_debug_unref_va(const struct gecko_msg_mesh_debug_unref_va_cmd_t *msg);
/**  **/
void gecko_cmd_mesh_debug_dump_va(const void *nul);
/** White list a device. Works only Advertisement based mesh **/
void gecko_cmd_mesh_debug_set_white_list_item(const struct gecko_msg_mesh_debug_set_white_list_item_cmd_t *msg);
/** White list activation/deactivation **/
void gecko_cmd_mesh_debug_set_white_list_active(const struct gecko_msg_mesh_debug_set_white_list_active_cmd_t *msg);
/** This command is used to set Static OOB Data. **/
void gecko_cmd_mesh_debug_node_set_static_oob_data(const struct gecko_msg_mesh_debug_node_set_static_oob_data_cmd_t *msg);
/** This command is used to set OOB EC key. **/
void gecko_cmd_mesh_debug_node_set_oob_eckey(const struct gecko_msg_mesh_debug_node_set_oob_eckey_cmd_t *msg);
/** This command is used to get OOB EC key. **/
void gecko_cmd_mesh_debug_node_get_oob_eckey(const void *nul);
/** This command is used to get Static OOB Data. **/
void gecko_cmd_mesh_debug_node_get_static_oob_data(const void *nul);
/** This command is used to configure network
            layer tracing.  When network layer tracing is enabled,
            events will be generated for various network layer
            events. Use with care; events may be generated very fast
            when there is a lot of traffic.  **/
void gecko_cmd_mesh_debug_network_trace_config(const struct gecko_msg_mesh_debug_network_trace_config_cmd_t *msg);
/** Push a network key update to a node. The key
            must exist on the Provisioner (see {a
            href="#cmd_mesh_prov_create_appkey"}create application
            key{/a} command).
            {br}{br}

            Node response is reported with an {a
            href="#evt_mesh_debug_network_status"}network key status
            event{/a}. **/
void gecko_cmd_mesh_debug_network_update(const struct gecko_msg_mesh_debug_network_update_cmd_t *msg);
/** Push an application key to a node. The key
            must exist on the Provisioner (see {a
            href="#cmd_mesh_prov_create_appkey"}create application
            key{/a} command).
            {br}{br}

            Node response is reported with an {a
            href="#evt_mesh_debug_appkey_status"}key status
            event{/a}. **/
void gecko_cmd_mesh_debug_appkey_update(const struct gecko_msg_mesh_debug_appkey_update_cmd_t *msg);
/** Listen for incoming GATT proxy connections.
          Once a
          connection is formed, a {a
          href="#evt_mesh_proxy_connected"} connection
          established{/a} event will be generated.
          This is a debug command because normally the Mesh stack
          initializes the GATT proxy server and starts litening.
           **/
void gecko_cmd_mesh_debug_proxy_listen(const void *nul);
/** 
          	Start and stop scanning 
           **/
void gecko_cmd_mesh_debug_set_scan(const struct gecko_msg_mesh_debug_set_scan_cmd_t *msg);
/** This command is used to set OOB URI. **/
void gecko_cmd_mesh_debug_node_set_oob_uri(const struct gecko_msg_mesh_debug_node_set_oob_uri_cmd_t *msg);
/** This command is used to get OOB URI. **/
void gecko_cmd_mesh_debug_node_get_oob_uri(const void *nul);
/** Initializes the Mesh stack in configuration client role. When
            initialization is complete a {a
            href="#evt_mesh_node_initialized"}node initialized{/a}
            event will be generated.
            {br}{br}

            This command must be issued before any other Bluetooth
            Mesh commands, except for {a href="#mesh_node_set_uuid"}
            set node UUID{/a} command.
            {br}{br}
             **/
void gecko_cmd_mesh_debug_node_init_cfgcl(const void *nul);
/** Start a key refresh procedure in the network
            without automatically switching to new phase{br}{br}
             **/
void gecko_cmd_mesh_debug_key_refresh_start_noauto(const struct gecko_msg_mesh_debug_key_refresh_start_noauto_cmd_t *msg);
/** Move to the next phase of key refresh procedure
             **/
void gecko_cmd_mesh_debug_key_refresh_next_phase(const struct gecko_msg_mesh_debug_key_refresh_next_phase_cmd_t *msg);
/** Send a network packet **/
void gecko_cmd_mesh_debug_net_send(const struct gecko_msg_mesh_debug_net_send_cmd_t *msg);
/** 
                Sends raw advertisement packet on each defined channel once. Generates send_adv_done once complete.
             **/
void gecko_cmd_proxy_radio_proxy_send_adv(const struct gecko_msg_proxy_radio_proxy_send_adv_cmd_t *msg);
/** This command is used to notify the "child" process that its advertisement data was sent over a real radio. **/
void gecko_cmd_proxy_radio_child_adv_req_done(const struct gecko_msg_proxy_radio_child_adv_req_done_cmd_t *msg);
/** Notify "child" of received data. **/
void gecko_cmd_proxy_radio_child_adv_data(const struct gecko_msg_proxy_radio_child_adv_data_cmd_t *msg);
/** Get number of milliseconds elapsed since reboot or clock wrap.
             **/
void gecko_cmd_proxy_radio_get_ms_ticks(const void *nul);
/** Report back in ms milliseconds **/
void gecko_cmd_proxy_radio_test_timer(const struct gecko_msg_proxy_radio_test_timer_cmd_t *msg);
/** Start connecting a proxy client to a proxy server.
          Once the connection is complete, a {a href="#evt_mesh_proxy_connected"}
          connection established{/a} event will be generated. LE-connection must be opened prior
          to opening proxy connection **/
void gecko_cmd_mesh_proxy_connect(const struct gecko_msg_mesh_proxy_connect_cmd_t *msg);
/** Disconnect. This call can be used also for a connection
          which is not yet fully formed. **/
void gecko_cmd_mesh_proxy_disconnect(const struct gecko_msg_mesh_proxy_disconnect_cmd_t *msg);
/** Set up proxy filtering type. At the proxy server side this is a local
          configuration, while on the proxy client a proxy configuration PDU will be sent
          to the proxy server. **/
void gecko_cmd_mesh_proxy_set_filter_type(const struct gecko_msg_mesh_proxy_set_filter_type_cmd_t *msg);
/** Allow messages destined to the given address to be forwarded
          over the proxy connection to the proxy client. At the proxy server side this is a local
          configuration, while on the proxy client a proxy configuration PDU will be sent
          to the proxy server. **/
void gecko_cmd_mesh_proxy_allow(const struct gecko_msg_mesh_proxy_allow_cmd_t *msg);
/** Block messages destined to the given address from being forwarded
          over the proxy connection to the proxy client. At the proxy server side this is a local
          configuration, while on the proxy client a proxy configuration PDU will be sent
          to the proxy server. **/
void gecko_cmd_mesh_proxy_deny(const struct gecko_msg_mesh_proxy_deny_cmd_t *msg);
/** Send vendor specific data
            {br}{br}

            Note that due to bgapi event length restrictions the
            message sent may need to be fragmented into several
            commands. If this is the case, the application must issue
            the commands in the correct order and mark the command
            carrying the last message fragment with the final flag set
            to a nonzero value. The stack will not start sending the
            message until the complete message is provided by the
            application. Fragments from multiple messages must not
            be interleaved. {br}{br}

             **/
void gecko_cmd_mesh_vendor_model_send(const struct gecko_msg_mesh_vendor_model_send_cmd_t *msg);
/** Set vendor model publication message.
            {br}{br}

            The model publication message will be sent out when model
            publication occurs either periodically (if the model is
            configured for periodc publishing) or explicitly (see {a
            href="#cmd_mesh_vendor_model_publish"}vendor model publish
            command{/a}.
            {br}{br}

            Note that due to bgapi length requirements the message may
            need to be fragmented over multiple commands.
            If this is the case, the application must issue
            the commands in the correct order and mark the command
            carrying the last message fragment with the final flag set
            to a nonzero value. The stack will not assign the message
            to the model until the complete message is provided by the
            application.
            {br}{br}

            To disable publication the publication message may be
            erased using the {a
            href="#cmd_mesh_vendor_model_clear_publication"} clear
            vendor model publication message{/a} command.
             **/
void gecko_cmd_mesh_vendor_model_set_publication(const struct gecko_msg_mesh_vendor_model_set_publication_cmd_t *msg);
/** Clear vendor model publication message.
            {br}{br}

            Clearing the model publication message disables model
            publishing; it can be re-enabled by defining the publication
            message using the {a href="#cmd_mesh_vendor_model_set_publication"}
            set vendor model publication{/a} command.
             **/
void gecko_cmd_mesh_vendor_model_clear_publication(const struct gecko_msg_mesh_vendor_model_clear_publication_cmd_t *msg);
/** Publish vendor model publication message.
            {br}{br}

            Sends the stored publication message to the network
            using the application key and destination address
            stored in the model publication parameters.

             **/
void gecko_cmd_mesh_vendor_model_publish(const struct gecko_msg_mesh_vendor_model_publish_cmd_t *msg);
/** Initialize the vendor model. This function
            has to be called before the model can be used. Note that
            the model can be deinitialized if it is not needed
            anymore; see {a
            href="#cmd_mesh_vendor_model_deinit"}deinitialization
            command{/a}.
            {br}{br}

            It is necessary to define the opcodes the model is able to
            receive at initialization. This enables the stack to pass
            only valid messages up to the model during runtime.  Per
            Mesh specification there are up to 64 opcodes per vendor,
            ranging from 0 to 63. Specifying opcodes outside of that
            range will result in an error response. Duplicate opcodes
            in the array do not result in an error, but will of course
            be recorded only once.
             **/
void gecko_cmd_mesh_vendor_model_init(const struct gecko_msg_mesh_vendor_model_init_cmd_t *msg);
/** Deinitialize the model. After this call the
            model cannot be used until it is initialized again; see {a
            href="#cmd_mesh_vendor_model_init"}initialization
            command{/a}.  **/
void gecko_cmd_mesh_vendor_model_deinit(const struct gecko_msg_mesh_vendor_model_deinit_cmd_t *msg);
/** Get the registered fault status of a Health
            Server model or models in the network.
            {br}{br}

            Besides the immediate result code the response or
            responses (in case the destination server address is a
            group address) from the network will generate {a
            href="#evt_mesh_health_client_server_status"}
            server status report events{/a}.

             **/
void gecko_cmd_mesh_health_client_get(const struct gecko_msg_mesh_health_client_get_cmd_t *msg);
/** Clear the fault status of a Health
            Server model or models in the network.
            {br}{br}

            Besides the immediate result code the response or
            responses (in case the destination server address is a
            group address) from the network will generate {a
            href="#evt_mesh_health_client_server_status"}
            server status report events{/a}.

             **/
void gecko_cmd_mesh_health_client_clear(const struct gecko_msg_mesh_health_client_clear_cmd_t *msg);
/** Execute a self test on a
            server model or models in the network
            {br}{br}

             **/
void gecko_cmd_mesh_health_client_test(const struct gecko_msg_mesh_health_client_test_cmd_t *msg);
/** Get the health period log of a Health
            Server model or models in the network.
            {br}{br}

            Besides the immediate result code the response or
            responses (in case the destination server address is a
            group address) from the network will generate {a
            href="#evt_mesh_health_client_server_status"}
            server status report events{/a}.

             **/
void gecko_cmd_mesh_health_client_get_period(const struct gecko_msg_mesh_health_client_get_period_cmd_t *msg);
/** Set the health period divisor of a Health
            Server model or models in the network.
            {br}{br}

            Besides the immediate result code the response or
            responses (in case the destination server address is a
            group address) from the network will generate {a
            href="#evt_mesh_health_client_server_status"}
            server status report events{/a}.

             **/
void gecko_cmd_mesh_health_client_set_period(const struct gecko_msg_mesh_health_client_set_period_cmd_t *msg);
/** Get the attention timer value of a Health
            Server model or models in the network.
            {br}{br}

            Besides the immediate result code the response or
            responses (in case the destination server address is a
            group address) from the network will generate {a
            href="#evt_mesh_health_client_server_status"}
            server status report events{/a}.

             **/
void gecko_cmd_mesh_health_client_get_attention(const struct gecko_msg_mesh_health_client_get_attention_cmd_t *msg);
/** Set the attention timer value of a Health
            Server model or models in the network.
            {br}{br}

            Besides the immediate result code the response or
            responses (in case the destination server address is a
            group address) from the network will generate {a
            href="#evt_mesh_health_client_server_status"}
            server status report events{/a}.

             **/
void gecko_cmd_mesh_health_client_set_attention(const struct gecko_msg_mesh_health_client_set_attention_cmd_t *msg);
/** Set fault condition on an element. **/
void gecko_cmd_mesh_health_server_set_fault(const struct gecko_msg_mesh_health_server_set_fault_cmd_t *msg);
/** Clear fault condition on an element. **/
void gecko_cmd_mesh_health_server_clear_fault(const struct gecko_msg_mesh_health_server_clear_fault_cmd_t *msg);
/** Indicate to the stack that a test request has
            been completed, and that the status may be communicated to
            the Health Client which made the test request.

             **/
void gecko_cmd_mesh_health_server_test_response(const struct gecko_msg_mesh_health_server_test_response_cmd_t *msg);
/**  **/
void gecko_cmd_mesh_srtest_client_init(const struct gecko_msg_mesh_srtest_client_init_cmd_t *msg);
/**  **/
void gecko_cmd_mesh_srtest_client_deinit(const struct gecko_msg_mesh_srtest_client_deinit_cmd_t *msg);
/**  **/
void gecko_cmd_mesh_srtest_client_run(const struct gecko_msg_mesh_srtest_client_run_cmd_t *msg);
/**  **/
void gecko_cmd_mesh_srtest_client_stop(const struct gecko_msg_mesh_srtest_client_stop_cmd_t *msg);
/**  **/
void gecko_cmd_mesh_srtest_client_status(const struct gecko_msg_mesh_srtest_client_status_cmd_t *msg);
/**  **/
void gecko_cmd_mesh_srtest_client_statistics(const struct gecko_msg_mesh_srtest_client_statistics_cmd_t *msg);
/**  **/
void gecko_cmd_mesh_srtest_server_init(const struct gecko_msg_mesh_srtest_server_init_cmd_t *msg);
/**  **/
void gecko_cmd_mesh_srtest_server_deinit(const struct gecko_msg_mesh_srtest_server_deinit_cmd_t *msg);
/**  **/
void gecko_cmd_mesh_srtest_server_statistics(const struct gecko_msg_mesh_srtest_server_statistics_cmd_t *msg);
/** Get the current state of a server
            model or models in the network. Besides the immediate
            result code, the response or responses from the network
            will generate server state report events for the replies
            received. 

            The server model responses will be reported in
            {a href="#evt_mesh_generic_client_server_status"}
            server status{/a} events.
             **/
void gecko_cmd_mesh_generic_client_get(const struct gecko_msg_mesh_generic_client_get_cmd_t *msg);
/** Set the current state of a server
            model or models in the network. Besides the immediate
            result code, the response or responses from the network
            will generate erver state report events for the replies
            received. {br}{br}

            The server model responses will be reported in {a
            href="#evt_mesh_generic_client_server_status"} server
            status{/a} events. Note that for responses to be generated
            the corresponding flag needs to be set.
             **/
void gecko_cmd_mesh_generic_client_set(const struct gecko_msg_mesh_generic_client_set_cmd_t *msg);
/** Publish a set request to the network using
            the publish address and publish application key of the
            model. The message will be received by the server models
            which subscribe to the publish address, and there's no
            need to explicitly specify a destination address or
            application key. {br}{br}

            The server model responses will be reported in {a
            href="#evt_mesh_generic_client_server_status"} server
            status{/a} events. Note that for responses to be generated
            the corresponding flag needs to be set.  **/
void gecko_cmd_mesh_generic_client_publish(const struct gecko_msg_mesh_generic_client_publish_cmd_t *msg);
/** Get the current state of a server
            model or models in the network, with additional parameters
            detailing the request. Besides the immediate
            result code, the response or responses from the network
            will generate server state report events for the replies
            received. 

            The server model responses will be reported in
            {a href="#evt_mesh_generic_client_server_status"}
            server status{/a} events.
            {br}{br}

            This call is used to query properties, for which the
            property ID is given as a parameter.
             **/
void gecko_cmd_mesh_generic_client_get_params(const struct gecko_msg_mesh_generic_client_get_params_cmd_t *msg);
/** Initialize generic client models **/
void gecko_cmd_mesh_generic_client_init(const void *nul);
/** Server response to a client request. This
            command must be used when an application updates the
            server model state as a response to a {a
            href="#evt_mesh_generic_server_client_request"} client request{/a}
            event which required a response.  **/
void gecko_cmd_mesh_generic_server_response(const struct gecko_msg_mesh_generic_server_response_cmd_t *msg);
/** Server state update. This
            command must be used when an application updates the
            server model state as a response to a {a
            href="#evt_mesh_generic_server_client_request"} client request{/a}
            event which did not require a response, but also when the
            application state changes spontaneously or as a result of some
            external (non-Mesh) event.  **/
void gecko_cmd_mesh_generic_server_update(const struct gecko_msg_mesh_generic_server_update_cmd_t *msg);
/** Publish server state into the network using
           the publish parameters configured into the
           model. The message is constructed using the cached
           state in the stack. **/
void gecko_cmd_mesh_generic_server_publish(const struct gecko_msg_mesh_generic_server_publish_cmd_t *msg);
/** Initialize generic server models **/
void gecko_cmd_mesh_generic_server_init(const void *nul);
/** This command is used to configure coexistence options at runtime. **/
void gecko_cmd_coex_set_options(const struct gecko_msg_coex_set_options_cmd_t *msg);
/** This command is used to read coexistence statistic counters from the device. Response contains the list of uint32 type counter values. Counters in the list are in following order: low priority requested, high priority requested, low priority denied, high priority denied, low priority tx aborted, high priority tx aborted. **/
void gecko_cmd_coex_get_counters(const struct gecko_msg_coex_get_counters_cmd_t *msg);
/** Get the network transmit state of a node.
           **/
void gecko_cmd_mesh_test_get_nettx(const void *nul);
/** Set the network transmit state of a node locally.
          Normally, the network transmit state is controlled by the Provisioner.
          This command overrides any setting done by the Provisioner.
           **/
void gecko_cmd_mesh_test_set_nettx(const struct gecko_msg_mesh_test_set_nettx_cmd_t *msg);
/**  **/
void gecko_cmd_mesh_test_get_relay(const void *nul);
/** Set the relay state and the relay retransmit
          state of a node locally.  Normally, these states are
          controlled by the Provisioner.  This command overrides any
          setting done by the Provisioner.
           **/
void gecko_cmd_mesh_test_set_relay(const struct gecko_msg_mesh_test_set_relay_cmd_t *msg);
/** Set non-default advertisement and scanning
            parameters used in mesh communications. Note that this
            command needs to be called before {a
            href="#cmd_mesh_node_init"}node initialization{/a} or {a
            href="#cmd_mesh_prov_init"}Provisioner initialization{/a}
            for the settings to take effect. **/
void gecko_cmd_mesh_test_set_adv_scan_params(const struct gecko_msg_mesh_test_set_adv_scan_params_cmd_t *msg);
/**  **/
void gecko_cmd_mesh_test_set_ivupdate_test_mode(const struct gecko_msg_mesh_test_set_ivupdate_test_mode_cmd_t *msg);
/**  **/
void gecko_cmd_mesh_test_get_ivupdate_test_mode(const void *nul);
/** Set delay in milliseconds between sending consecutive segments of a segmented message.
            The default value is 0. Note that this
            command needs to be called before {a
            href="#cmd_mesh_node_init"}node initialization{/a} or {a
            href="#cmd_mesh_prov_init"}Provisioner initialization{/a}
            for the settings to take effect. **/
void gecko_cmd_mesh_test_set_segment_send_delay(const struct gecko_msg_mesh_test_set_segment_send_delay_cmd_t *msg);
/**  **/
void gecko_cmd_mesh_test_set_ivupdate_state(const struct gecko_msg_mesh_test_set_ivupdate_state_cmd_t *msg);
/**  **/
void gecko_cmd_mesh_test_send_beacons(const void *nul);
/** Bind a Model to an Appkey locally. **/
void gecko_cmd_mesh_test_bind_local_model_app(const struct gecko_msg_mesh_test_bind_local_model_app_cmd_t *msg);
/** Remove a binding between a Model and an Appkey locally. **/
void gecko_cmd_mesh_test_unbind_local_model_app(const struct gecko_msg_mesh_test_unbind_local_model_app_cmd_t *msg);
/** Add an address to a local model's subscription list. **/
void gecko_cmd_mesh_test_add_local_model_sub(const struct gecko_msg_mesh_test_add_local_model_sub_cmd_t *msg);
/** Remove an address from a local Model's subscription list. **/
void gecko_cmd_mesh_test_del_local_model_sub(const struct gecko_msg_mesh_test_del_local_model_sub_cmd_t *msg);
/** Add a virtual address to a local model's subscription list. **/
void gecko_cmd_mesh_test_add_local_model_sub_va(const struct gecko_msg_mesh_test_add_local_model_sub_va_cmd_t *msg);
/** Remove a virtual address from a local model's subscription list. **/
void gecko_cmd_mesh_test_del_local_model_sub_va(const struct gecko_msg_mesh_test_del_local_model_sub_va_cmd_t *msg);
/** Get all entries in a local model's subscription list. **/
void gecko_cmd_mesh_test_get_local_model_sub(const struct gecko_msg_mesh_test_get_local_model_sub_cmd_t *msg);
/** Set a local model's publication address, key, and parameters. **/
void gecko_cmd_mesh_test_set_local_model_pub(const struct gecko_msg_mesh_test_set_local_model_pub_cmd_t *msg);
/** Set a model's publication virtual address, key, and parameters.  **/
void gecko_cmd_mesh_test_set_local_model_pub_va(const struct gecko_msg_mesh_test_set_local_model_pub_va_cmd_t *msg);
/** Get a local model's publication address, key, and parameters. **/
void gecko_cmd_mesh_test_get_local_model_pub(const struct gecko_msg_mesh_test_get_local_model_pub_cmd_t *msg);
/** Set local node heartbeat subscription parameters.
            Normally heartbeat subscription is controlled by the Provisioner.
             **/
void gecko_cmd_mesh_test_set_local_heartbeat_subscription(const struct gecko_msg_mesh_test_set_local_heartbeat_subscription_cmd_t *msg);
/** Get local node heartbeat subscription
            state **/
void gecko_cmd_mesh_test_get_local_heartbeat_subscription(const void *nul);
/** Get heartbeat publication state of a
            local node. **/
void gecko_cmd_mesh_test_get_local_heartbeat_publication(const void *nul);
/** Set heartbeat publication state of a
            local node. **/
void gecko_cmd_mesh_test_set_local_heartbeat_publication(const struct gecko_msg_mesh_test_set_local_heartbeat_publication_cmd_t *msg);
/** Set a state to a value in the local configuration server model; this should be used for testing and debugging purposes only. **/
void gecko_cmd_mesh_test_set_local_config(const struct gecko_msg_mesh_test_set_local_config_cmd_t *msg);
/** Get the value of a state in the configuration server model; this should be used for testing and debugging purposes only. **/
void gecko_cmd_mesh_test_get_local_config(const struct gecko_msg_mesh_test_get_local_config_cmd_t *msg);
/** Add a network or application key locally. **/
void gecko_cmd_mesh_test_add_local_key(const struct gecko_msg_mesh_test_add_local_key_cmd_t *msg);
/** Delete a network or application key locally. **/
void gecko_cmd_mesh_test_del_local_key(const struct gecko_msg_mesh_test_del_local_key_cmd_t *msg);
/** Update network or application key value locally.
            {br}{br}

            Copies the existing network key value to the old value
            and replaces the current value with the given key data.
            {br}{br}

            Note that the normal way to update keys on Provisioner
            as well as on nodes is to run the key refresh procedure.
            This command is for debugging only.
             **/
void gecko_cmd_mesh_test_update_local_key(const struct gecko_msg_mesh_test_update_local_key_cmd_t *msg);
/** Changes the transport layer segmentation and
          reassembly configuration values. This command must be issued
          before initializing the Mesh stack or the changes will not
          take effect. **/
void gecko_cmd_mesh_test_set_sar_config(const struct gecko_msg_mesh_test_set_sar_config_cmd_t *msg);
/** Get current sequence number of an element
             **/
void gecko_cmd_mesh_test_get_element_seqnum(const struct gecko_msg_mesh_test_get_element_seqnum_cmd_t *msg);
/** 
          Initialize the Low Power node (LPN) mode. The node needs to be
          provisioned before calling this command. Once the LPN mode is
          initialized, the node cannot operate in the network without a Friend
          node. In order to establish a friendship with a nearby Friend node,
          the {a href="#cmd_mesh_lpn_establish_friendship"}establish
          friendship{/a} command should be used. This call has to be made before
          calling the other commands in this class.
         **/
void gecko_cmd_mesh_lpn_init(const void *nul);
/** 
          Deinitialize the LPN functionality. After calling this command, a
          possible friendship with a Friend node is terminated and the node can
          operate in the network independently. After calling this command, no
          other command in this class should be called before the Low Power mode
          is {a href="#cmd_mesh_lpn_init"}initialized{/a} again.
         **/
void gecko_cmd_mesh_lpn_deinit(const void *nul);
/** Configure the parameters for friendship
        establishment **/
void gecko_cmd_mesh_lpn_configure(const struct gecko_msg_mesh_lpn_configure_cmd_t *msg);
/** Establish a friendship. Once a frienship has been established
        the node can start saving power.  **/
void gecko_cmd_mesh_lpn_establish_friendship(const struct gecko_msg_mesh_lpn_establish_friendship_cmd_t *msg);
/** 
          Poll the Friend node for stored messages and security updates. This
          command may be used if the application is expecting to receive
          messages at a specific time. However, it is not required for correct
          operation, as the procedure will be performed autonomously before the
          poll timeout expires.
         **/
void gecko_cmd_mesh_lpn_poll(const void *nul);
/** 
          Terminate an already established friendship. {a
          href="#evt_mesh_lpn_friendship_terminated"}Friendship terminated{/a}
          event will be emitted when the friendship termination has been
          completed.
         **/
void gecko_cmd_mesh_lpn_terminate_friendship(const void *nul);
/** 
          Initialize the Friend mode. The node needs to be
          provisioned before calling this command. Once the Friend mode is
          initialized, it is ready to accept friend requests from Low Power Nodes. 
          This call has to be made before
          calling the other commands in this class.
         **/
void gecko_cmd_mesh_friend_init(const void *nul);
/** 
          Deinitialize the Friend functionality. After calling this command, a
          possible friendship with a Low Power node is terminated and all friendsips
          are terminated. After calling this command, no
          other command in this class should be called before the Friend mode
          is {a href="#cmd_mesh_friend_init"}initialized{/a} again.
         **/
void gecko_cmd_mesh_friend_deinit(const void *nul);
/** This command can be used by an NCP host to send a message to the target application on device. **/
void gecko_cmd_user_message_to_target(const struct gecko_msg_user_message_to_target_cmd_t *msg);

extern struct gecko_cmd_packet gecko_apihandler_rsp;
/** This command can be used to reset the system. This command does not have a response, but it triggers one of the boot events (normal reset or boot to DFU mode) after re-boot.  **/
#define gecko_rsp_dfu_reset() \
{\
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko))|((uint32)0x0<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}
/** 
            This command can be used to reset the system. It does not have a response, but it triggers one of the boot events (normal reset or boot to DFU mode) depending on the selected boot mode. **/
#define gecko_rsp_system_reset() \
{\
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko))|((uint32)0x1<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}
/**  **/
#define gecko_rsp_dfu_flash_set_address(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_dfu_flash_set_address.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x0<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_dfu_flash_upload(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_dfu_flash_upload.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x0<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_dfu_flash_upload_finish(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_dfu_flash_upload_finish.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x0<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_dfu_boot(VERSION) \
{\
gecko_apihandler_rsp.data.evt_dfu_boot.version=(VERSION); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)4)>>8)))|((((uint32)4)&0xff)<<8)|((uint32)0x0<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_dfu_boot_failure(REASON) \
{\
gecko_apihandler_rsp.data.evt_dfu_boot_failure.reason=(REASON); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x0<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_system_hello(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_system_hello.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_system_get_bt_address(ADDRESS) \
{\
memcpy(&gecko_apihandler_rsp.data.rsp_system_get_bt_address.address,ADDRESS,sizeof(bd_addr)); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)6)>>8)))|((((uint32)6)&0xff)<<8)|((uint32)0x1<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+6,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_system_set_bt_address(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_system_set_bt_address.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_system_set_tx_power(SET_POWER) \
{\
gecko_apihandler_rsp.data.rsp_system_set_tx_power.set_power=(SET_POWER); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1<<16)|((uint32)0xa<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_system_get_random_data(RESULT,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.rsp_system_get_random_data.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_system_get_random_data.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_system_get_random_data.data.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_system_get_random_data.data.len)&0xff)<<8)|((uint32)0x1<<16)|((uint32)0xb<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_system_get_random_data.data.len,(uint8*)DATA_DATA,1); \
}

/**  **/
#define gecko_rsp_system_get_random_data_BGBUF(RESULT,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.rsp_system_get_random_data.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_system_get_random_data.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_system_get_random_data.data.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_system_get_random_data.data.len)&0xff)<<8)|((uint32)0x1<<16)|((uint32)0xb<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_system_get_random_data.data.len,(uint8*)DATA_DATA,2); \
}
/**  **/
#define gecko_rsp_system_halt(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_system_halt.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1<<16)|((uint32)0xc<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_system_set_device_name(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_system_set_device_name.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1<<16)|((uint32)0xd<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_system_linklayer_configure(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_system_linklayer_configure.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1<<16)|((uint32)0xe<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_system_get_counters(RESULT,TX_PACKETS,RX_PACKETS,CRC_ERRORS,FAILURES) \
{\
gecko_apihandler_rsp.data.rsp_system_get_counters.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_system_get_counters.tx_packets=(TX_PACKETS); \
gecko_apihandler_rsp.data.rsp_system_get_counters.rx_packets=(RX_PACKETS); \
gecko_apihandler_rsp.data.rsp_system_get_counters.crc_errors=(CRC_ERRORS); \
gecko_apihandler_rsp.data.rsp_system_get_counters.failures=(FAILURES); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)10)>>8)))|((((uint32)10)&0xff)<<8)|((uint32)0x1<<16)|((uint32)0xf<<24); \
gecko_handle_library_packet(4+10,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_system_boot(MAJOR,MINOR,PATCH,BUILD,BOOTLOADER,HW,HASH) \
{\
gecko_apihandler_rsp.data.evt_system_boot.major=(MAJOR); \
gecko_apihandler_rsp.data.evt_system_boot.minor=(MINOR); \
gecko_apihandler_rsp.data.evt_system_boot.patch=(PATCH); \
gecko_apihandler_rsp.data.evt_system_boot.build=(BUILD); \
gecko_apihandler_rsp.data.evt_system_boot.bootloader=(BOOTLOADER); \
gecko_apihandler_rsp.data.evt_system_boot.hw=(HW); \
gecko_apihandler_rsp.data.evt_system_boot.hash=(HASH); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)18)>>8)))|((((uint32)18)&0xff)<<8)|((uint32)0x1<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+18,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_system_external_signal(EXTSIGNALS) \
{\
gecko_apihandler_rsp.data.evt_system_external_signal.extsignals=(EXTSIGNALS); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)4)>>8)))|((((uint32)4)&0xff)<<8)|((uint32)0x1<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_system_awake() \
{\
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)0)>>8)))|((((uint32)0)&0xff)<<8)|((uint32)0x1<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+0,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_system_hardware_error(STATUS) \
{\
gecko_apihandler_rsp.data.evt_system_hardware_error.status=(STATUS); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1<<16)|((uint32)0x5<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_system_error(REASON,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_system_error.reason=(REASON); \
gecko_apihandler_rsp.data.evt_system_error.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.evt_system_error.data.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.evt_system_error.data.len)&0xff)<<8)|((uint32)0x1<<16)|((uint32)0x6<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_system_error.data.len,(uint8*)DATA_DATA,1); \
}

/**  **/
#define gecko_evt_system_error_BGBUF(REASON,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_system_error.reason=(REASON); \
gecko_apihandler_rsp.data.evt_system_error.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.evt_system_error.data.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.evt_system_error.data.len)&0xff)<<8)|((uint32)0x1<<16)|((uint32)0x6<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_system_error.data.len,(uint8*)DATA_DATA,2); \
}
/**  **/
#define gecko_rsp_le_gap_open(RESULT,CONNECTION) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_open.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_le_gap_open.connection=(CONNECTION); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3)>>8)))|((((uint32)3)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_set_mode(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_set_mode.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_discover(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_discover.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_end_procedure(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_end_procedure.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_set_adv_parameters(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_set_adv_parameters.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_set_conn_parameters(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_set_conn_parameters.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0x5<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_set_scan_parameters(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_set_scan_parameters.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0x6<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_set_adv_data(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_set_adv_data.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0x7<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_set_adv_timeout(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_set_adv_timeout.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0x8<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_set_phy(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_set_phy.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0x9<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_bt5_set_mode(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_bt5_set_mode.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0xa<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_bt5_set_adv_parameters(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_bt5_set_adv_parameters.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0xb<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_bt5_set_adv_data(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_bt5_set_adv_data.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0xc<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_set_privacy_mode(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_set_privacy_mode.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0xd<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_set_advertise_timing(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_set_advertise_timing.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0xe<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_set_advertise_channel_map(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_set_advertise_channel_map.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0xf<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_set_advertise_report_scan_request(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_set_advertise_report_scan_request.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0x10<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_set_advertise_phy(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_set_advertise_phy.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0x11<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_set_advertise_configuration(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_set_advertise_configuration.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0x12<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_clear_advertise_configuration(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_clear_advertise_configuration.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0x13<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_start_advertising(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_start_advertising.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0x14<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_stop_advertising(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_stop_advertising.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0x15<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_set_discovery_timing(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_set_discovery_timing.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0x16<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_set_discovery_type(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_set_discovery_type.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0x17<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_start_discovery(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_start_discovery.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0x18<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_set_data_channel_classification(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_set_data_channel_classification.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0x19<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_connect(RESULT,CONNECTION) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_connect.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_le_gap_connect.connection=(CONNECTION); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3)>>8)))|((((uint32)3)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0x1a<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_gap_set_advertise_tx_power(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_gap_set_advertise_tx_power.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0x1b<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_le_gap_scan_response(RSSI,PACKET_TYPE,ADDRESS,ADDRESS_TYPE,BONDING,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_le_gap_scan_response.rssi=(RSSI); \
gecko_apihandler_rsp.data.evt_le_gap_scan_response.packet_type=(PACKET_TYPE); \
memcpy(&gecko_apihandler_rsp.data.evt_le_gap_scan_response.address,ADDRESS,sizeof(bd_addr)); \
gecko_apihandler_rsp.data.evt_le_gap_scan_response.address_type=(ADDRESS_TYPE); \
gecko_apihandler_rsp.data.evt_le_gap_scan_response.bonding=(BONDING); \
gecko_apihandler_rsp.data.evt_le_gap_scan_response.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)11+gecko_apihandler_rsp.data.evt_le_gap_scan_response.data.len)>>8)))|((((uint32)11+gecko_apihandler_rsp.data.evt_le_gap_scan_response.data.len)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+11,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_le_gap_scan_response.data.len,(uint8*)DATA_DATA,1); \
}

/**  **/
#define gecko_evt_le_gap_scan_response_BGBUF(RSSI,PACKET_TYPE,ADDRESS,ADDRESS_TYPE,BONDING,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_le_gap_scan_response.rssi=(RSSI); \
gecko_apihandler_rsp.data.evt_le_gap_scan_response.packet_type=(PACKET_TYPE); \
memcpy(&gecko_apihandler_rsp.data.evt_le_gap_scan_response.address,ADDRESS,sizeof(bd_addr)); \
gecko_apihandler_rsp.data.evt_le_gap_scan_response.address_type=(ADDRESS_TYPE); \
gecko_apihandler_rsp.data.evt_le_gap_scan_response.bonding=(BONDING); \
gecko_apihandler_rsp.data.evt_le_gap_scan_response.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)11+gecko_apihandler_rsp.data.evt_le_gap_scan_response.data.len)>>8)))|((((uint32)11+gecko_apihandler_rsp.data.evt_le_gap_scan_response.data.len)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+11,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_le_gap_scan_response.data.len,(uint8*)DATA_DATA,2); \
}
/**  **/
#define gecko_evt_le_gap_adv_timeout(HANDLE) \
{\
gecko_apihandler_rsp.data.evt_le_gap_adv_timeout.handle=(HANDLE); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)1)>>8)))|((((uint32)1)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+1,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_le_gap_scan_request(HANDLE,ADDRESS,ADDRESS_TYPE,BONDING) \
{\
gecko_apihandler_rsp.data.evt_le_gap_scan_request.handle=(HANDLE); \
memcpy(&gecko_apihandler_rsp.data.evt_le_gap_scan_request.address,ADDRESS,sizeof(bd_addr)); \
gecko_apihandler_rsp.data.evt_le_gap_scan_request.address_type=(ADDRESS_TYPE); \
gecko_apihandler_rsp.data.evt_le_gap_scan_request.bonding=(BONDING); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)9)>>8)))|((((uint32)9)&0xff)<<8)|((uint32)0x3<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+9,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_connection_set_parameters(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_connection_set_parameters.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x8<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_connection_get_rssi(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_connection_get_rssi.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x8<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_connection_disable_slave_latency(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_connection_disable_slave_latency.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x8<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_connection_set_phy(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_connection_set_phy.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x8<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_le_connection_close(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_le_connection_close.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x8<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_le_connection_opened(ADDRESS,ADDRESS_TYPE,MASTER,CONNECTION,BONDING,ADVERTISER) \
{\
memcpy(&gecko_apihandler_rsp.data.evt_le_connection_opened.address,ADDRESS,sizeof(bd_addr)); \
gecko_apihandler_rsp.data.evt_le_connection_opened.address_type=(ADDRESS_TYPE); \
gecko_apihandler_rsp.data.evt_le_connection_opened.master=(MASTER); \
gecko_apihandler_rsp.data.evt_le_connection_opened.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_le_connection_opened.bonding=(BONDING); \
gecko_apihandler_rsp.data.evt_le_connection_opened.advertiser=(ADVERTISER); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)11)>>8)))|((((uint32)11)&0xff)<<8)|((uint32)0x8<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+11,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_le_connection_closed(REASON,CONNECTION) \
{\
gecko_apihandler_rsp.data.evt_le_connection_closed.reason=(REASON); \
gecko_apihandler_rsp.data.evt_le_connection_closed.connection=(CONNECTION); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)3)>>8)))|((((uint32)3)&0xff)<<8)|((uint32)0x8<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_le_connection_parameters(CONNECTION,INTERVAL,LATENCY,TIMEOUT,SECURITY_MODE,TXSIZE) \
{\
gecko_apihandler_rsp.data.evt_le_connection_parameters.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_le_connection_parameters.interval=(INTERVAL); \
gecko_apihandler_rsp.data.evt_le_connection_parameters.latency=(LATENCY); \
gecko_apihandler_rsp.data.evt_le_connection_parameters.timeout=(TIMEOUT); \
gecko_apihandler_rsp.data.evt_le_connection_parameters.security_mode=(SECURITY_MODE); \
gecko_apihandler_rsp.data.evt_le_connection_parameters.txsize=(TXSIZE); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)10)>>8)))|((((uint32)10)&0xff)<<8)|((uint32)0x8<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+10,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_le_connection_rssi(CONNECTION,STATUS,RSSI) \
{\
gecko_apihandler_rsp.data.evt_le_connection_rssi.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_le_connection_rssi.status=(STATUS); \
gecko_apihandler_rsp.data.evt_le_connection_rssi.rssi=(RSSI); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)3)>>8)))|((((uint32)3)&0xff)<<8)|((uint32)0x8<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_le_connection_phy_status(CONNECTION,PHY) \
{\
gecko_apihandler_rsp.data.evt_le_connection_phy_status.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_le_connection_phy_status.phy=(PHY); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x8<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_set_max_mtu(RESULT,MAX_MTU) \
{\
gecko_apihandler_rsp.data.rsp_gatt_set_max_mtu.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_gatt_set_max_mtu.max_mtu=(MAX_MTU); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)4)>>8)))|((((uint32)4)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_discover_primary_services(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_gatt_discover_primary_services.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_discover_primary_services_by_uuid(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_gatt_discover_primary_services_by_uuid.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_discover_characteristics(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_gatt_discover_characteristics.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_discover_characteristics_by_uuid(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_gatt_discover_characteristics_by_uuid.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_set_characteristic_notification(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_gatt_set_characteristic_notification.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0x5<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_discover_descriptors(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_gatt_discover_descriptors.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0x6<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_read_characteristic_value(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_gatt_read_characteristic_value.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0x7<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_read_characteristic_value_by_uuid(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_gatt_read_characteristic_value_by_uuid.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0x8<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_write_characteristic_value(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_gatt_write_characteristic_value.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0x9<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_write_characteristic_value_without_response(RESULT,SENT_LEN) \
{\
gecko_apihandler_rsp.data.rsp_gatt_write_characteristic_value_without_response.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_gatt_write_characteristic_value_without_response.sent_len=(SENT_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)4)>>8)))|((((uint32)4)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0xa<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_prepare_characteristic_value_write(RESULT,SENT_LEN) \
{\
gecko_apihandler_rsp.data.rsp_gatt_prepare_characteristic_value_write.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_gatt_prepare_characteristic_value_write.sent_len=(SENT_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)4)>>8)))|((((uint32)4)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0xb<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_execute_characteristic_value_write(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_gatt_execute_characteristic_value_write.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0xc<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_send_characteristic_confirmation(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_gatt_send_characteristic_confirmation.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0xd<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_read_descriptor_value(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_gatt_read_descriptor_value.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0xe<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_write_descriptor_value(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_gatt_write_descriptor_value.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0xf<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_find_included_services(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_gatt_find_included_services.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0x10<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_read_multiple_characteristic_values(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_gatt_read_multiple_characteristic_values.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0x11<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_read_characteristic_value_from_offset(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_gatt_read_characteristic_value_from_offset.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0x12<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_prepare_characteristic_value_reliable_write(RESULT,SENT_LEN) \
{\
gecko_apihandler_rsp.data.rsp_gatt_prepare_characteristic_value_reliable_write.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_gatt_prepare_characteristic_value_reliable_write.sent_len=(SENT_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)4)>>8)))|((((uint32)4)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0x13<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_gatt_mtu_exchanged(CONNECTION,MTU) \
{\
gecko_apihandler_rsp.data.evt_gatt_mtu_exchanged.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_gatt_mtu_exchanged.mtu=(MTU); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)3)>>8)))|((((uint32)3)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_gatt_service(CONNECTION,SERVICE,UUID_LEN,UUID_DATA) \
{\
gecko_apihandler_rsp.data.evt_gatt_service.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_gatt_service.service=(SERVICE); \
gecko_apihandler_rsp.data.evt_gatt_service.uuid.len=(UUID_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)6+gecko_apihandler_rsp.data.evt_gatt_service.uuid.len)>>8)))|((((uint32)6+gecko_apihandler_rsp.data.evt_gatt_service.uuid.len)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+6,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_gatt_service.uuid.len,(uint8*)UUID_DATA,1); \
}

/**  **/
#define gecko_evt_gatt_service_BGBUF(CONNECTION,SERVICE,UUID_LEN,UUID_DATA) \
{\
gecko_apihandler_rsp.data.evt_gatt_service.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_gatt_service.service=(SERVICE); \
gecko_apihandler_rsp.data.evt_gatt_service.uuid.len=(UUID_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)6+gecko_apihandler_rsp.data.evt_gatt_service.uuid.len)>>8)))|((((uint32)6+gecko_apihandler_rsp.data.evt_gatt_service.uuid.len)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+6,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_gatt_service.uuid.len,(uint8*)UUID_DATA,2); \
}
/**  **/
#define gecko_evt_gatt_characteristic(CONNECTION,CHARACTERISTIC,PROPERTIES,UUID_LEN,UUID_DATA) \
{\
gecko_apihandler_rsp.data.evt_gatt_characteristic.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_gatt_characteristic.characteristic=(CHARACTERISTIC); \
gecko_apihandler_rsp.data.evt_gatt_characteristic.properties=(PROPERTIES); \
gecko_apihandler_rsp.data.evt_gatt_characteristic.uuid.len=(UUID_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)5+gecko_apihandler_rsp.data.evt_gatt_characteristic.uuid.len)>>8)))|((((uint32)5+gecko_apihandler_rsp.data.evt_gatt_characteristic.uuid.len)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+5,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_gatt_characteristic.uuid.len,(uint8*)UUID_DATA,1); \
}

/**  **/
#define gecko_evt_gatt_characteristic_BGBUF(CONNECTION,CHARACTERISTIC,PROPERTIES,UUID_LEN,UUID_DATA) \
{\
gecko_apihandler_rsp.data.evt_gatt_characteristic.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_gatt_characteristic.characteristic=(CHARACTERISTIC); \
gecko_apihandler_rsp.data.evt_gatt_characteristic.properties=(PROPERTIES); \
gecko_apihandler_rsp.data.evt_gatt_characteristic.uuid.len=(UUID_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)5+gecko_apihandler_rsp.data.evt_gatt_characteristic.uuid.len)>>8)))|((((uint32)5+gecko_apihandler_rsp.data.evt_gatt_characteristic.uuid.len)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+5,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_gatt_characteristic.uuid.len,(uint8*)UUID_DATA,2); \
}
/**  **/
#define gecko_evt_gatt_descriptor(CONNECTION,DESCRIPTOR,UUID_LEN,UUID_DATA) \
{\
gecko_apihandler_rsp.data.evt_gatt_descriptor.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_gatt_descriptor.descriptor=(DESCRIPTOR); \
gecko_apihandler_rsp.data.evt_gatt_descriptor.uuid.len=(UUID_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)4+gecko_apihandler_rsp.data.evt_gatt_descriptor.uuid.len)>>8)))|((((uint32)4+gecko_apihandler_rsp.data.evt_gatt_descriptor.uuid.len)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_gatt_descriptor.uuid.len,(uint8*)UUID_DATA,1); \
}

/**  **/
#define gecko_evt_gatt_descriptor_BGBUF(CONNECTION,DESCRIPTOR,UUID_LEN,UUID_DATA) \
{\
gecko_apihandler_rsp.data.evt_gatt_descriptor.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_gatt_descriptor.descriptor=(DESCRIPTOR); \
gecko_apihandler_rsp.data.evt_gatt_descriptor.uuid.len=(UUID_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)4+gecko_apihandler_rsp.data.evt_gatt_descriptor.uuid.len)>>8)))|((((uint32)4+gecko_apihandler_rsp.data.evt_gatt_descriptor.uuid.len)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_gatt_descriptor.uuid.len,(uint8*)UUID_DATA,2); \
}
/**  **/
#define gecko_evt_gatt_characteristic_value(CONNECTION,CHARACTERISTIC,ATT_OPCODE,OFFSET,VALUE_LEN,VALUE_DATA) \
{\
gecko_apihandler_rsp.data.evt_gatt_characteristic_value.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_gatt_characteristic_value.characteristic=(CHARACTERISTIC); \
gecko_apihandler_rsp.data.evt_gatt_characteristic_value.att_opcode=(ATT_OPCODE); \
gecko_apihandler_rsp.data.evt_gatt_characteristic_value.offset=(OFFSET); \
gecko_apihandler_rsp.data.evt_gatt_characteristic_value.value.len=(VALUE_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)7+gecko_apihandler_rsp.data.evt_gatt_characteristic_value.value.len)>>8)))|((((uint32)7+gecko_apihandler_rsp.data.evt_gatt_characteristic_value.value.len)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+7,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_gatt_characteristic_value.value.len,(uint8*)VALUE_DATA,1); \
}

/**  **/
#define gecko_evt_gatt_characteristic_value_BGBUF(CONNECTION,CHARACTERISTIC,ATT_OPCODE,OFFSET,VALUE_LEN,VALUE_DATA) \
{\
gecko_apihandler_rsp.data.evt_gatt_characteristic_value.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_gatt_characteristic_value.characteristic=(CHARACTERISTIC); \
gecko_apihandler_rsp.data.evt_gatt_characteristic_value.att_opcode=(ATT_OPCODE); \
gecko_apihandler_rsp.data.evt_gatt_characteristic_value.offset=(OFFSET); \
gecko_apihandler_rsp.data.evt_gatt_characteristic_value.value.len=(VALUE_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)7+gecko_apihandler_rsp.data.evt_gatt_characteristic_value.value.len)>>8)))|((((uint32)7+gecko_apihandler_rsp.data.evt_gatt_characteristic_value.value.len)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+7,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_gatt_characteristic_value.value.len,(uint8*)VALUE_DATA,2); \
}
/**  **/
#define gecko_evt_gatt_descriptor_value(CONNECTION,DESCRIPTOR,OFFSET,VALUE_LEN,VALUE_DATA) \
{\
gecko_apihandler_rsp.data.evt_gatt_descriptor_value.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_gatt_descriptor_value.descriptor=(DESCRIPTOR); \
gecko_apihandler_rsp.data.evt_gatt_descriptor_value.offset=(OFFSET); \
gecko_apihandler_rsp.data.evt_gatt_descriptor_value.value.len=(VALUE_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)6+gecko_apihandler_rsp.data.evt_gatt_descriptor_value.value.len)>>8)))|((((uint32)6+gecko_apihandler_rsp.data.evt_gatt_descriptor_value.value.len)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0x5<<24); \
gecko_handle_library_packet(4+6,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_gatt_descriptor_value.value.len,(uint8*)VALUE_DATA,1); \
}

/**  **/
#define gecko_evt_gatt_descriptor_value_BGBUF(CONNECTION,DESCRIPTOR,OFFSET,VALUE_LEN,VALUE_DATA) \
{\
gecko_apihandler_rsp.data.evt_gatt_descriptor_value.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_gatt_descriptor_value.descriptor=(DESCRIPTOR); \
gecko_apihandler_rsp.data.evt_gatt_descriptor_value.offset=(OFFSET); \
gecko_apihandler_rsp.data.evt_gatt_descriptor_value.value.len=(VALUE_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)6+gecko_apihandler_rsp.data.evt_gatt_descriptor_value.value.len)>>8)))|((((uint32)6+gecko_apihandler_rsp.data.evt_gatt_descriptor_value.value.len)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0x5<<24); \
gecko_handle_library_packet(4+6,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_gatt_descriptor_value.value.len,(uint8*)VALUE_DATA,2); \
}
/**  **/
#define gecko_evt_gatt_procedure_completed(CONNECTION,RESULT) \
{\
gecko_apihandler_rsp.data.evt_gatt_procedure_completed.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_gatt_procedure_completed.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)3)>>8)))|((((uint32)3)&0xff)<<8)|((uint32)0x9<<16)|((uint32)0x6<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_server_read_attribute_value(RESULT,VALUE_LEN,VALUE_DATA) \
{\
gecko_apihandler_rsp.data.rsp_gatt_server_read_attribute_value.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_gatt_server_read_attribute_value.value.len=(VALUE_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_gatt_server_read_attribute_value.value.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_gatt_server_read_attribute_value.value.len)&0xff)<<8)|((uint32)0xa<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_gatt_server_read_attribute_value.value.len,(uint8*)VALUE_DATA,1); \
}

/**  **/
#define gecko_rsp_gatt_server_read_attribute_value_BGBUF(RESULT,VALUE_LEN,VALUE_DATA) \
{\
gecko_apihandler_rsp.data.rsp_gatt_server_read_attribute_value.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_gatt_server_read_attribute_value.value.len=(VALUE_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_gatt_server_read_attribute_value.value.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_gatt_server_read_attribute_value.value.len)&0xff)<<8)|((uint32)0xa<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_gatt_server_read_attribute_value.value.len,(uint8*)VALUE_DATA,2); \
}
/**  **/
#define gecko_rsp_gatt_server_read_attribute_type(RESULT,TYPE_LEN,TYPE_DATA) \
{\
gecko_apihandler_rsp.data.rsp_gatt_server_read_attribute_type.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_gatt_server_read_attribute_type.type.len=(TYPE_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_gatt_server_read_attribute_type.type.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_gatt_server_read_attribute_type.type.len)&0xff)<<8)|((uint32)0xa<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_gatt_server_read_attribute_type.type.len,(uint8*)TYPE_DATA,1); \
}

/**  **/
#define gecko_rsp_gatt_server_read_attribute_type_BGBUF(RESULT,TYPE_LEN,TYPE_DATA) \
{\
gecko_apihandler_rsp.data.rsp_gatt_server_read_attribute_type.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_gatt_server_read_attribute_type.type.len=(TYPE_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_gatt_server_read_attribute_type.type.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_gatt_server_read_attribute_type.type.len)&0xff)<<8)|((uint32)0xa<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_gatt_server_read_attribute_type.type.len,(uint8*)TYPE_DATA,2); \
}
/**  **/
#define gecko_rsp_gatt_server_write_attribute_value(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_gatt_server_write_attribute_value.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xa<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_server_send_user_read_response(RESULT,SENT_LEN) \
{\
gecko_apihandler_rsp.data.rsp_gatt_server_send_user_read_response.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_gatt_server_send_user_read_response.sent_len=(SENT_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)4)>>8)))|((((uint32)4)&0xff)<<8)|((uint32)0xa<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_server_send_user_write_response(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_gatt_server_send_user_write_response.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xa<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_server_send_characteristic_notification(RESULT,SENT_LEN) \
{\
gecko_apihandler_rsp.data.rsp_gatt_server_send_characteristic_notification.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_gatt_server_send_characteristic_notification.sent_len=(SENT_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)4)>>8)))|((((uint32)4)&0xff)<<8)|((uint32)0xa<<16)|((uint32)0x5<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_server_find_attribute(RESULT,ATTRIBUTE) \
{\
gecko_apihandler_rsp.data.rsp_gatt_server_find_attribute.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_gatt_server_find_attribute.attribute=(ATTRIBUTE); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)4)>>8)))|((((uint32)4)&0xff)<<8)|((uint32)0xa<<16)|((uint32)0x6<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_server_set_database(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_gatt_server_set_database.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xa<<16)|((uint32)0x7<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_gatt_server_set_capabilities(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_gatt_server_set_capabilities.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xa<<16)|((uint32)0x8<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_gatt_server_attribute_value(CONNECTION,ATTRIBUTE,ATT_OPCODE,OFFSET,VALUE_LEN,VALUE_DATA) \
{\
gecko_apihandler_rsp.data.evt_gatt_server_attribute_value.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_gatt_server_attribute_value.attribute=(ATTRIBUTE); \
gecko_apihandler_rsp.data.evt_gatt_server_attribute_value.att_opcode=(ATT_OPCODE); \
gecko_apihandler_rsp.data.evt_gatt_server_attribute_value.offset=(OFFSET); \
gecko_apihandler_rsp.data.evt_gatt_server_attribute_value.value.len=(VALUE_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)7+gecko_apihandler_rsp.data.evt_gatt_server_attribute_value.value.len)>>8)))|((((uint32)7+gecko_apihandler_rsp.data.evt_gatt_server_attribute_value.value.len)&0xff)<<8)|((uint32)0xa<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+7,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_gatt_server_attribute_value.value.len,(uint8*)VALUE_DATA,1); \
}

/**  **/
#define gecko_evt_gatt_server_attribute_value_BGBUF(CONNECTION,ATTRIBUTE,ATT_OPCODE,OFFSET,VALUE_LEN,VALUE_DATA) \
{\
gecko_apihandler_rsp.data.evt_gatt_server_attribute_value.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_gatt_server_attribute_value.attribute=(ATTRIBUTE); \
gecko_apihandler_rsp.data.evt_gatt_server_attribute_value.att_opcode=(ATT_OPCODE); \
gecko_apihandler_rsp.data.evt_gatt_server_attribute_value.offset=(OFFSET); \
gecko_apihandler_rsp.data.evt_gatt_server_attribute_value.value.len=(VALUE_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)7+gecko_apihandler_rsp.data.evt_gatt_server_attribute_value.value.len)>>8)))|((((uint32)7+gecko_apihandler_rsp.data.evt_gatt_server_attribute_value.value.len)&0xff)<<8)|((uint32)0xa<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+7,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_gatt_server_attribute_value.value.len,(uint8*)VALUE_DATA,2); \
}
/**  **/
#define gecko_evt_gatt_server_user_read_request(CONNECTION,CHARACTERISTIC,ATT_OPCODE,OFFSET) \
{\
gecko_apihandler_rsp.data.evt_gatt_server_user_read_request.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_gatt_server_user_read_request.characteristic=(CHARACTERISTIC); \
gecko_apihandler_rsp.data.evt_gatt_server_user_read_request.att_opcode=(ATT_OPCODE); \
gecko_apihandler_rsp.data.evt_gatt_server_user_read_request.offset=(OFFSET); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)6)>>8)))|((((uint32)6)&0xff)<<8)|((uint32)0xa<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+6,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_gatt_server_user_write_request(CONNECTION,CHARACTERISTIC,ATT_OPCODE,OFFSET,VALUE_LEN,VALUE_DATA) \
{\
gecko_apihandler_rsp.data.evt_gatt_server_user_write_request.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_gatt_server_user_write_request.characteristic=(CHARACTERISTIC); \
gecko_apihandler_rsp.data.evt_gatt_server_user_write_request.att_opcode=(ATT_OPCODE); \
gecko_apihandler_rsp.data.evt_gatt_server_user_write_request.offset=(OFFSET); \
gecko_apihandler_rsp.data.evt_gatt_server_user_write_request.value.len=(VALUE_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)7+gecko_apihandler_rsp.data.evt_gatt_server_user_write_request.value.len)>>8)))|((((uint32)7+gecko_apihandler_rsp.data.evt_gatt_server_user_write_request.value.len)&0xff)<<8)|((uint32)0xa<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+7,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_gatt_server_user_write_request.value.len,(uint8*)VALUE_DATA,1); \
}

/**  **/
#define gecko_evt_gatt_server_user_write_request_BGBUF(CONNECTION,CHARACTERISTIC,ATT_OPCODE,OFFSET,VALUE_LEN,VALUE_DATA) \
{\
gecko_apihandler_rsp.data.evt_gatt_server_user_write_request.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_gatt_server_user_write_request.characteristic=(CHARACTERISTIC); \
gecko_apihandler_rsp.data.evt_gatt_server_user_write_request.att_opcode=(ATT_OPCODE); \
gecko_apihandler_rsp.data.evt_gatt_server_user_write_request.offset=(OFFSET); \
gecko_apihandler_rsp.data.evt_gatt_server_user_write_request.value.len=(VALUE_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)7+gecko_apihandler_rsp.data.evt_gatt_server_user_write_request.value.len)>>8)))|((((uint32)7+gecko_apihandler_rsp.data.evt_gatt_server_user_write_request.value.len)&0xff)<<8)|((uint32)0xa<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+7,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_gatt_server_user_write_request.value.len,(uint8*)VALUE_DATA,2); \
}
/**  **/
#define gecko_evt_gatt_server_characteristic_status(CONNECTION,CHARACTERISTIC,STATUS_FLAGS,CLIENT_CONFIG_FLAGS) \
{\
gecko_apihandler_rsp.data.evt_gatt_server_characteristic_status.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_gatt_server_characteristic_status.characteristic=(CHARACTERISTIC); \
gecko_apihandler_rsp.data.evt_gatt_server_characteristic_status.status_flags=(STATUS_FLAGS); \
gecko_apihandler_rsp.data.evt_gatt_server_characteristic_status.client_config_flags=(CLIENT_CONFIG_FLAGS); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)6)>>8)))|((((uint32)6)&0xff)<<8)|((uint32)0xa<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+6,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_gatt_server_execute_write_completed(CONNECTION,RESULT) \
{\
gecko_apihandler_rsp.data.evt_gatt_server_execute_write_completed.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_gatt_server_execute_write_completed.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)3)>>8)))|((((uint32)3)&0xff)<<8)|((uint32)0xa<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_endpoint_close(RESULT,ENDPOINT) \
{\
gecko_apihandler_rsp.data.rsp_endpoint_close.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_endpoint_close.endpoint=(ENDPOINT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3)>>8)))|((((uint32)3)&0xff)<<8)|((uint32)0xb<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_endpoint_status(ENDPOINT,TYPE,DESTINATION_ENDPOINT,FLAGS) \
{\
gecko_apihandler_rsp.data.evt_endpoint_status.endpoint=(ENDPOINT); \
gecko_apihandler_rsp.data.evt_endpoint_status.type=(TYPE); \
gecko_apihandler_rsp.data.evt_endpoint_status.destination_endpoint=(DESTINATION_ENDPOINT); \
gecko_apihandler_rsp.data.evt_endpoint_status.flags=(FLAGS); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)7)>>8)))|((((uint32)7)&0xff)<<8)|((uint32)0xb<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+7,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_hardware_set_soft_timer(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_hardware_set_soft_timer.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xc<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_hardware_get_time(SECONDS,TICKS) \
{\
gecko_apihandler_rsp.data.rsp_hardware_get_time.seconds=(SECONDS); \
gecko_apihandler_rsp.data.rsp_hardware_get_time.ticks=(TICKS); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)6)>>8)))|((((uint32)6)&0xff)<<8)|((uint32)0xc<<16)|((uint32)0xb<<24); \
gecko_handle_library_packet(4+6,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_hardware_set_lazy_soft_timer(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_hardware_set_lazy_soft_timer.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xc<<16)|((uint32)0xc<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_hardware_enable_dcdc(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_hardware_enable_dcdc.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xc<<16)|((uint32)0xd<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_hardware_soft_timer(HANDLE) \
{\
gecko_apihandler_rsp.data.evt_hardware_soft_timer.handle=(HANDLE); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)1)>>8)))|((((uint32)1)&0xff)<<8)|((uint32)0xc<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+1,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_flash_ps_erase_all(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_flash_ps_erase_all.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xd<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_flash_ps_save(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_flash_ps_save.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xd<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_flash_ps_load(RESULT,VALUE_LEN,VALUE_DATA) \
{\
gecko_apihandler_rsp.data.rsp_flash_ps_load.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_flash_ps_load.value.len=(VALUE_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_flash_ps_load.value.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_flash_ps_load.value.len)&0xff)<<8)|((uint32)0xd<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_flash_ps_load.value.len,(uint8*)VALUE_DATA,1); \
}

/**  **/
#define gecko_rsp_flash_ps_load_BGBUF(RESULT,VALUE_LEN,VALUE_DATA) \
{\
gecko_apihandler_rsp.data.rsp_flash_ps_load.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_flash_ps_load.value.len=(VALUE_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_flash_ps_load.value.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_flash_ps_load.value.len)&0xff)<<8)|((uint32)0xd<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_flash_ps_load.value.len,(uint8*)VALUE_DATA,2); \
}
/**  **/
#define gecko_rsp_flash_ps_erase(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_flash_ps_erase.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xd<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_test_dtm_tx(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_test_dtm_tx.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xe<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_test_dtm_rx(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_test_dtm_rx.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xe<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_test_dtm_end(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_test_dtm_end.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xe<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_test_debug_command(RESULT,ID,DEBUGDATA_LEN,DEBUGDATA_DATA) \
{\
gecko_apihandler_rsp.data.rsp_test_debug_command.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_test_debug_command.id=(ID); \
gecko_apihandler_rsp.data.rsp_test_debug_command.debugdata.len=(DEBUGDATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)4+gecko_apihandler_rsp.data.rsp_test_debug_command.debugdata.len)>>8)))|((((uint32)4+gecko_apihandler_rsp.data.rsp_test_debug_command.debugdata.len)&0xff)<<8)|((uint32)0xe<<16)|((uint32)0x7<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_test_debug_command.debugdata.len,(uint8*)DEBUGDATA_DATA,1); \
}

/**  **/
#define gecko_rsp_test_debug_command_BGBUF(RESULT,ID,DEBUGDATA_LEN,DEBUGDATA_DATA) \
{\
gecko_apihandler_rsp.data.rsp_test_debug_command.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_test_debug_command.id=(ID); \
gecko_apihandler_rsp.data.rsp_test_debug_command.debugdata.len=(DEBUGDATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)4+gecko_apihandler_rsp.data.rsp_test_debug_command.debugdata.len)>>8)))|((((uint32)4+gecko_apihandler_rsp.data.rsp_test_debug_command.debugdata.len)&0xff)<<8)|((uint32)0xe<<16)|((uint32)0x7<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_test_debug_command.debugdata.len,(uint8*)DEBUGDATA_DATA,2); \
}
/**  **/
#define gecko_rsp_test_debug_counter(RESULT,VALUE) \
{\
gecko_apihandler_rsp.data.rsp_test_debug_counter.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_test_debug_counter.value=(VALUE); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)6)>>8)))|((((uint32)6)&0xff)<<8)|((uint32)0xe<<16)|((uint32)0xc<<24); \
gecko_handle_library_packet(4+6,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_test_dtm_completed(RESULT,NUMBER_OF_PACKETS) \
{\
gecko_apihandler_rsp.data.evt_test_dtm_completed.result=(RESULT); \
gecko_apihandler_rsp.data.evt_test_dtm_completed.number_of_packets=(NUMBER_OF_PACKETS); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)4)>>8)))|((((uint32)4)&0xff)<<8)|((uint32)0xe<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_test_hcidump(TIME,DIRECTION,PACKET_TYPE,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_test_hcidump.time=(TIME); \
gecko_apihandler_rsp.data.evt_test_hcidump.direction=(DIRECTION); \
gecko_apihandler_rsp.data.evt_test_hcidump.packet_type=(PACKET_TYPE); \
gecko_apihandler_rsp.data.evt_test_hcidump.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)8+gecko_apihandler_rsp.data.evt_test_hcidump.data.len)>>8)))|((((uint32)8+gecko_apihandler_rsp.data.evt_test_hcidump.data.len)&0xff)<<8)|((uint32)0xe<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+8,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_test_hcidump.data.len,(uint8*)DATA_DATA,1); \
}

/**  **/
#define gecko_evt_test_hcidump_BGBUF(TIME,DIRECTION,PACKET_TYPE,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_test_hcidump.time=(TIME); \
gecko_apihandler_rsp.data.evt_test_hcidump.direction=(DIRECTION); \
gecko_apihandler_rsp.data.evt_test_hcidump.packet_type=(PACKET_TYPE); \
gecko_apihandler_rsp.data.evt_test_hcidump.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)8+gecko_apihandler_rsp.data.evt_test_hcidump.data.len)>>8)))|((((uint32)8+gecko_apihandler_rsp.data.evt_test_hcidump.data.len)&0xff)<<8)|((uint32)0xe<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+8,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_test_hcidump.data.len,(uint8*)DATA_DATA,2); \
}
/**  **/
#define gecko_rsp_sm_set_bondable_mode(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_sm_set_bondable_mode.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xf<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_sm_configure(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_sm_configure.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xf<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_sm_store_bonding_configuration(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_sm_store_bonding_configuration.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xf<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_sm_increase_security(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_sm_increase_security.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xf<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_sm_delete_bonding(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_sm_delete_bonding.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xf<<16)|((uint32)0x6<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_sm_delete_bondings(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_sm_delete_bondings.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xf<<16)|((uint32)0x7<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_sm_enter_passkey(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_sm_enter_passkey.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xf<<16)|((uint32)0x8<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_sm_passkey_confirm(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_sm_passkey_confirm.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xf<<16)|((uint32)0x9<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_sm_set_oob_data(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_sm_set_oob_data.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xf<<16)|((uint32)0xa<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_sm_list_all_bondings(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_sm_list_all_bondings.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xf<<16)|((uint32)0xb<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_sm_bonding_confirm(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_sm_bonding_confirm.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xf<<16)|((uint32)0xe<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_sm_set_debug_mode(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_sm_set_debug_mode.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xf<<16)|((uint32)0xf<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_sm_set_passkey(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_sm_set_passkey.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xf<<16)|((uint32)0x10<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_sm_use_sc_oob(RESULT,OOB_DATA_LEN,OOB_DATA_DATA) \
{\
gecko_apihandler_rsp.data.rsp_sm_use_sc_oob.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_sm_use_sc_oob.oob_data.len=(OOB_DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_sm_use_sc_oob.oob_data.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_sm_use_sc_oob.oob_data.len)&0xff)<<8)|((uint32)0xf<<16)|((uint32)0x11<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_sm_use_sc_oob.oob_data.len,(uint8*)OOB_DATA_DATA,1); \
}

/**  **/
#define gecko_rsp_sm_use_sc_oob_BGBUF(RESULT,OOB_DATA_LEN,OOB_DATA_DATA) \
{\
gecko_apihandler_rsp.data.rsp_sm_use_sc_oob.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_sm_use_sc_oob.oob_data.len=(OOB_DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_sm_use_sc_oob.oob_data.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_sm_use_sc_oob.oob_data.len)&0xff)<<8)|((uint32)0xf<<16)|((uint32)0x11<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_sm_use_sc_oob.oob_data.len,(uint8*)OOB_DATA_DATA,2); \
}
/**  **/
#define gecko_rsp_sm_set_sc_remote_oob_data(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_sm_set_sc_remote_oob_data.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xf<<16)|((uint32)0x12<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_sm_passkey_display(CONNECTION,PASSKEY) \
{\
gecko_apihandler_rsp.data.evt_sm_passkey_display.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_sm_passkey_display.passkey=(PASSKEY); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)5)>>8)))|((((uint32)5)&0xff)<<8)|((uint32)0xf<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+5,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_sm_passkey_request(CONNECTION) \
{\
gecko_apihandler_rsp.data.evt_sm_passkey_request.connection=(CONNECTION); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)1)>>8)))|((((uint32)1)&0xff)<<8)|((uint32)0xf<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+1,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_sm_confirm_passkey(CONNECTION,PASSKEY) \
{\
gecko_apihandler_rsp.data.evt_sm_confirm_passkey.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_sm_confirm_passkey.passkey=(PASSKEY); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)5)>>8)))|((((uint32)5)&0xff)<<8)|((uint32)0xf<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+5,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_sm_bonded(CONNECTION,BONDING) \
{\
gecko_apihandler_rsp.data.evt_sm_bonded.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_sm_bonded.bonding=(BONDING); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xf<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_sm_bonding_failed(CONNECTION,REASON) \
{\
gecko_apihandler_rsp.data.evt_sm_bonding_failed.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_sm_bonding_failed.reason=(REASON); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)3)>>8)))|((((uint32)3)&0xff)<<8)|((uint32)0xf<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_sm_list_bonding_entry(BONDING,ADDRESS,ADDRESS_TYPE) \
{\
gecko_apihandler_rsp.data.evt_sm_list_bonding_entry.bonding=(BONDING); \
memcpy(&gecko_apihandler_rsp.data.evt_sm_list_bonding_entry.address,ADDRESS,sizeof(bd_addr)); \
gecko_apihandler_rsp.data.evt_sm_list_bonding_entry.address_type=(ADDRESS_TYPE); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)8)>>8)))|((((uint32)8)&0xff)<<8)|((uint32)0xf<<16)|((uint32)0x5<<24); \
gecko_handle_library_packet(4+8,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_sm_list_all_bondings_complete() \
{\
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)0)>>8)))|((((uint32)0)&0xff)<<8)|((uint32)0xf<<16)|((uint32)0x6<<24); \
gecko_handle_library_packet(4+0,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_sm_confirm_bonding(CONNECTION,BONDING_HANDLE) \
{\
gecko_apihandler_rsp.data.evt_sm_confirm_bonding.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_sm_confirm_bonding.bonding_handle=(BONDING_HANDLE); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0xf<<16)|((uint32)0x9<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_homekit_configure(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_homekit_configure.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x13<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_homekit_advertise(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_homekit_advertise.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x13<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_homekit_delete_pairings(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_homekit_delete_pairings.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x13<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_homekit_check_authcp(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_homekit_check_authcp.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x13<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_homekit_get_pairing_id(RESULT,PAIRING_ID_LEN,PAIRING_ID_DATA) \
{\
gecko_apihandler_rsp.data.rsp_homekit_get_pairing_id.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_homekit_get_pairing_id.pairing_id.len=(PAIRING_ID_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_homekit_get_pairing_id.pairing_id.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_homekit_get_pairing_id.pairing_id.len)&0xff)<<8)|((uint32)0x13<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_homekit_get_pairing_id.pairing_id.len,(uint8*)PAIRING_ID_DATA,1); \
}

/**  **/
#define gecko_rsp_homekit_get_pairing_id_BGBUF(RESULT,PAIRING_ID_LEN,PAIRING_ID_DATA) \
{\
gecko_apihandler_rsp.data.rsp_homekit_get_pairing_id.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_homekit_get_pairing_id.pairing_id.len=(PAIRING_ID_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_homekit_get_pairing_id.pairing_id.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_homekit_get_pairing_id.pairing_id.len)&0xff)<<8)|((uint32)0x13<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_homekit_get_pairing_id.pairing_id.len,(uint8*)PAIRING_ID_DATA,2); \
}
/**  **/
#define gecko_rsp_homekit_send_write_response(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_homekit_send_write_response.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x13<<16)|((uint32)0x5<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_homekit_send_read_response(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_homekit_send_read_response.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x13<<16)|((uint32)0x6<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_homekit_gsn_action(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_homekit_gsn_action.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x13<<16)|((uint32)0x7<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_homekit_event_notification(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_homekit_event_notification.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x13<<16)|((uint32)0x8<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_homekit_broadcast_action(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_homekit_broadcast_action.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x13<<16)|((uint32)0x9<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_homekit_setupcode_display(CONNECTION,SETUPCODE_LEN,SETUPCODE_DATA) \
{\
gecko_apihandler_rsp.data.evt_homekit_setupcode_display.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_homekit_setupcode_display.setupcode.len=(SETUPCODE_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)2+gecko_apihandler_rsp.data.evt_homekit_setupcode_display.setupcode.len)>>8)))|((((uint32)2+gecko_apihandler_rsp.data.evt_homekit_setupcode_display.setupcode.len)&0xff)<<8)|((uint32)0x13<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_homekit_setupcode_display.setupcode.len,(uint8*)SETUPCODE_DATA,1); \
}

/**  **/
#define gecko_evt_homekit_setupcode_display_BGBUF(CONNECTION,SETUPCODE_LEN,SETUPCODE_DATA) \
{\
gecko_apihandler_rsp.data.evt_homekit_setupcode_display.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_homekit_setupcode_display.setupcode.len=(SETUPCODE_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)2+gecko_apihandler_rsp.data.evt_homekit_setupcode_display.setupcode.len)>>8)))|((((uint32)2+gecko_apihandler_rsp.data.evt_homekit_setupcode_display.setupcode.len)&0xff)<<8)|((uint32)0x13<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_homekit_setupcode_display.setupcode.len,(uint8*)SETUPCODE_DATA,2); \
}
/**  **/
#define gecko_evt_homekit_paired(CONNECTION,REASON) \
{\
gecko_apihandler_rsp.data.evt_homekit_paired.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_homekit_paired.reason=(REASON); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)3)>>8)))|((((uint32)3)&0xff)<<8)|((uint32)0x13<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_homekit_pair_verified(CONNECTION,REASON) \
{\
gecko_apihandler_rsp.data.evt_homekit_pair_verified.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_homekit_pair_verified.reason=(REASON); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)3)>>8)))|((((uint32)3)&0xff)<<8)|((uint32)0x13<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_homekit_connection_opened(CONNECTION) \
{\
gecko_apihandler_rsp.data.evt_homekit_connection_opened.connection=(CONNECTION); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)1)>>8)))|((((uint32)1)&0xff)<<8)|((uint32)0x13<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+1,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_homekit_connection_closed(CONNECTION,REASON) \
{\
gecko_apihandler_rsp.data.evt_homekit_connection_closed.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_homekit_connection_closed.reason=(REASON); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)3)>>8)))|((((uint32)3)&0xff)<<8)|((uint32)0x13<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_homekit_identify(CONNECTION) \
{\
gecko_apihandler_rsp.data.evt_homekit_identify.connection=(CONNECTION); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)1)>>8)))|((((uint32)1)&0xff)<<8)|((uint32)0x13<<16)|((uint32)0x5<<24); \
gecko_handle_library_packet(4+1,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_homekit_write_request(CONNECTION,CHARACTERISTIC,CHR_VALUE_SIZE,AUTHORIZATION_SIZE,VALUE_OFFSET,VALUE_LEN,VALUE_DATA) \
{\
gecko_apihandler_rsp.data.evt_homekit_write_request.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_homekit_write_request.characteristic=(CHARACTERISTIC); \
gecko_apihandler_rsp.data.evt_homekit_write_request.chr_value_size=(CHR_VALUE_SIZE); \
gecko_apihandler_rsp.data.evt_homekit_write_request.authorization_size=(AUTHORIZATION_SIZE); \
gecko_apihandler_rsp.data.evt_homekit_write_request.value_offset=(VALUE_OFFSET); \
gecko_apihandler_rsp.data.evt_homekit_write_request.value.len=(VALUE_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)10+gecko_apihandler_rsp.data.evt_homekit_write_request.value.len)>>8)))|((((uint32)10+gecko_apihandler_rsp.data.evt_homekit_write_request.value.len)&0xff)<<8)|((uint32)0x13<<16)|((uint32)0x6<<24); \
gecko_handle_library_packet(4+10,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_homekit_write_request.value.len,(uint8*)VALUE_DATA,1); \
}

/**  **/
#define gecko_evt_homekit_write_request_BGBUF(CONNECTION,CHARACTERISTIC,CHR_VALUE_SIZE,AUTHORIZATION_SIZE,VALUE_OFFSET,VALUE_LEN,VALUE_DATA) \
{\
gecko_apihandler_rsp.data.evt_homekit_write_request.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_homekit_write_request.characteristic=(CHARACTERISTIC); \
gecko_apihandler_rsp.data.evt_homekit_write_request.chr_value_size=(CHR_VALUE_SIZE); \
gecko_apihandler_rsp.data.evt_homekit_write_request.authorization_size=(AUTHORIZATION_SIZE); \
gecko_apihandler_rsp.data.evt_homekit_write_request.value_offset=(VALUE_OFFSET); \
gecko_apihandler_rsp.data.evt_homekit_write_request.value.len=(VALUE_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)10+gecko_apihandler_rsp.data.evt_homekit_write_request.value.len)>>8)))|((((uint32)10+gecko_apihandler_rsp.data.evt_homekit_write_request.value.len)&0xff)<<8)|((uint32)0x13<<16)|((uint32)0x6<<24); \
gecko_handle_library_packet(4+10,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_homekit_write_request.value.len,(uint8*)VALUE_DATA,2); \
}
/**  **/
#define gecko_evt_homekit_read_request(CONNECTION,CHARACTERISTIC,OFFSET) \
{\
gecko_apihandler_rsp.data.evt_homekit_read_request.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_homekit_read_request.characteristic=(CHARACTERISTIC); \
gecko_apihandler_rsp.data.evt_homekit_read_request.offset=(OFFSET); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)5)>>8)))|((((uint32)5)&0xff)<<8)|((uint32)0x13<<16)|((uint32)0x7<<24); \
gecko_handle_library_packet(4+5,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_homekit_disconnection_required(CONNECTION,REASON) \
{\
gecko_apihandler_rsp.data.evt_homekit_disconnection_required.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_homekit_disconnection_required.reason=(REASON); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)3)>>8)))|((((uint32)3)&0xff)<<8)|((uint32)0x13<<16)|((uint32)0x8<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_homekit_pairing_removed(CONNECTION,REMAINING_PAIRINGS,PAIRING_ID_LEN,PAIRING_ID_DATA) \
{\
gecko_apihandler_rsp.data.evt_homekit_pairing_removed.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_homekit_pairing_removed.remaining_pairings=(REMAINING_PAIRINGS); \
gecko_apihandler_rsp.data.evt_homekit_pairing_removed.pairing_id.len=(PAIRING_ID_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)4+gecko_apihandler_rsp.data.evt_homekit_pairing_removed.pairing_id.len)>>8)))|((((uint32)4+gecko_apihandler_rsp.data.evt_homekit_pairing_removed.pairing_id.len)&0xff)<<8)|((uint32)0x13<<16)|((uint32)0x9<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_homekit_pairing_removed.pairing_id.len,(uint8*)PAIRING_ID_DATA,1); \
}

/**  **/
#define gecko_evt_homekit_pairing_removed_BGBUF(CONNECTION,REMAINING_PAIRINGS,PAIRING_ID_LEN,PAIRING_ID_DATA) \
{\
gecko_apihandler_rsp.data.evt_homekit_pairing_removed.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_homekit_pairing_removed.remaining_pairings=(REMAINING_PAIRINGS); \
gecko_apihandler_rsp.data.evt_homekit_pairing_removed.pairing_id.len=(PAIRING_ID_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)4+gecko_apihandler_rsp.data.evt_homekit_pairing_removed.pairing_id.len)>>8)))|((((uint32)4+gecko_apihandler_rsp.data.evt_homekit_pairing_removed.pairing_id.len)&0xff)<<8)|((uint32)0x13<<16)|((uint32)0x9<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_homekit_pairing_removed.pairing_id.len,(uint8*)PAIRING_ID_DATA,2); \
}
/**  **/
#define gecko_evt_homekit_setuppayload_display(CONNECTION,SETUPPAYLOAD_LEN,SETUPPAYLOAD_DATA) \
{\
gecko_apihandler_rsp.data.evt_homekit_setuppayload_display.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_homekit_setuppayload_display.setuppayload.len=(SETUPPAYLOAD_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)2+gecko_apihandler_rsp.data.evt_homekit_setuppayload_display.setuppayload.len)>>8)))|((((uint32)2+gecko_apihandler_rsp.data.evt_homekit_setuppayload_display.setuppayload.len)&0xff)<<8)|((uint32)0x13<<16)|((uint32)0xa<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_homekit_setuppayload_display.setuppayload.len,(uint8*)SETUPPAYLOAD_DATA,1); \
}

/**  **/
#define gecko_evt_homekit_setuppayload_display_BGBUF(CONNECTION,SETUPPAYLOAD_LEN,SETUPPAYLOAD_DATA) \
{\
gecko_apihandler_rsp.data.evt_homekit_setuppayload_display.connection=(CONNECTION); \
gecko_apihandler_rsp.data.evt_homekit_setuppayload_display.setuppayload.len=(SETUPPAYLOAD_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)2+gecko_apihandler_rsp.data.evt_homekit_setuppayload_display.setuppayload.len)>>8)))|((((uint32)2+gecko_apihandler_rsp.data.evt_homekit_setuppayload_display.setuppayload.len)&0xff)<<8)|((uint32)0x13<<16)|((uint32)0xa<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_homekit_setuppayload_display.setuppayload.len,(uint8*)SETUPPAYLOAD_DATA,2); \
}
/**  **/
#define gecko_rsp_mesh_node_init(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_node_init.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_node_start_unprov_beaconing(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_node_start_unprov_beaconing.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_node_input_oob_request_rsp(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_node_input_oob_request_rsp.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_node_get_uuid(RESULT,UUID_LEN,UUID_DATA) \
{\
gecko_apihandler_rsp.data.rsp_mesh_node_get_uuid.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_node_get_uuid.uuid.len=(UUID_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_node_get_uuid.uuid.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_node_get_uuid.uuid.len)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_mesh_node_get_uuid.uuid.len,(uint8*)UUID_DATA,1); \
}

/**  **/
#define gecko_rsp_mesh_node_get_uuid_BGBUF(RESULT,UUID_LEN,UUID_DATA) \
{\
gecko_apihandler_rsp.data.rsp_mesh_node_get_uuid.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_node_get_uuid.uuid.len=(UUID_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_node_get_uuid.uuid.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_node_get_uuid.uuid.len)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_mesh_node_get_uuid.uuid.len,(uint8*)UUID_DATA,2); \
}
/**  **/
#define gecko_rsp_mesh_node_set_provisioning_data(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_node_set_provisioning_data.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_node_init_oob(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_node_init_oob.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x5<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_node_set_ivrecovery_mode(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_node_set_ivrecovery_mode.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x6<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_node_get_ivrecovery_mode(RESULT,MODE) \
{\
gecko_apihandler_rsp.data.rsp_mesh_node_get_ivrecovery_mode.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_node_get_ivrecovery_mode.mode=(MODE); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3)>>8)))|((((uint32)3)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x7<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_node_set_adv_event_filter(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_node_set_adv_event_filter.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x8<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_node_get_statistics(RESULT,STATISTICS_LEN,STATISTICS_DATA) \
{\
gecko_apihandler_rsp.data.rsp_mesh_node_get_statistics.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_node_get_statistics.statistics.len=(STATISTICS_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_node_get_statistics.statistics.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_node_get_statistics.statistics.len)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x9<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_mesh_node_get_statistics.statistics.len,(uint8*)STATISTICS_DATA,1); \
}

/**  **/
#define gecko_rsp_mesh_node_get_statistics_BGBUF(RESULT,STATISTICS_LEN,STATISTICS_DATA) \
{\
gecko_apihandler_rsp.data.rsp_mesh_node_get_statistics.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_node_get_statistics.statistics.len=(STATISTICS_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_node_get_statistics.statistics.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_node_get_statistics.statistics.len)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x9<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_mesh_node_get_statistics.statistics.len,(uint8*)STATISTICS_DATA,2); \
}
/**  **/
#define gecko_rsp_mesh_node_clear_statistics(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_node_clear_statistics.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0xa<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_node_set_net_relay_delay(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_node_set_net_relay_delay.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0xb<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_node_get_net_relay_delay(RESULT,MIN,MAX) \
{\
gecko_apihandler_rsp.data.rsp_mesh_node_get_net_relay_delay.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_node_get_net_relay_delay.min=(MIN); \
gecko_apihandler_rsp.data.rsp_mesh_node_get_net_relay_delay.max=(MAX); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)4)>>8)))|((((uint32)4)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0xc<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_node_get_ivupdate_state(RESULT,IVINDEX,STATE) \
{\
gecko_apihandler_rsp.data.rsp_mesh_node_get_ivupdate_state.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_node_get_ivupdate_state.ivindex=(IVINDEX); \
gecko_apihandler_rsp.data.rsp_mesh_node_get_ivupdate_state.state=(STATE); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)7)>>8)))|((((uint32)7)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0xd<<24); \
gecko_handle_library_packet(4+7,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_node_request_ivupdate(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_node_request_ivupdate.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0xe<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_node_get_seq_remaining(RESULT,COUNT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_node_get_seq_remaining.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_node_get_seq_remaining.count=(COUNT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)6)>>8)))|((((uint32)6)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0xf<<24); \
gecko_handle_library_packet(4+6,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_node_save_replay_protection_list(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_node_save_replay_protection_list.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x10<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_node_set_uuid(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_node_set_uuid.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x11<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_node_get_element_address(RESULT,ADDRESS) \
{\
gecko_apihandler_rsp.data.rsp_mesh_node_get_element_address.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_node_get_element_address.address=(ADDRESS); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)4)>>8)))|((((uint32)4)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x12<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_node_static_oob_request_rsp(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_node_static_oob_request_rsp.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x13<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_node_initialized(PROVISIONED,ADDRESS,IVI) \
{\
gecko_apihandler_rsp.data.evt_mesh_node_initialized.provisioned=(PROVISIONED); \
gecko_apihandler_rsp.data.evt_mesh_node_initialized.address=(ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_node_initialized.ivi=(IVI); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)7)>>8)))|((((uint32)7)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+7,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_node_provisioned(IV_INDEX,ADDRESS) \
{\
gecko_apihandler_rsp.data.evt_mesh_node_provisioned.iv_index=(IV_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_node_provisioned.address=(ADDRESS); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)6)>>8)))|((((uint32)6)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+6,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_node_config_get(ID,NETKEY_INDEX) \
{\
gecko_apihandler_rsp.data.evt_mesh_node_config_get.id=(ID); \
gecko_apihandler_rsp.data.evt_mesh_node_config_get.netkey_index=(NETKEY_INDEX); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)4)>>8)))|((((uint32)4)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_node_config_set(ID,NETKEY_INDEX,VALUE_LEN,VALUE_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_node_config_set.id=(ID); \
gecko_apihandler_rsp.data.evt_mesh_node_config_set.netkey_index=(NETKEY_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_node_config_set.value.len=(VALUE_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)5+gecko_apihandler_rsp.data.evt_mesh_node_config_set.value.len)>>8)))|((((uint32)5+gecko_apihandler_rsp.data.evt_mesh_node_config_set.value.len)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+5,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_node_config_set.value.len,(uint8*)VALUE_DATA,1); \
}

/**  **/
#define gecko_evt_mesh_node_config_set_BGBUF(ID,NETKEY_INDEX,VALUE_LEN,VALUE_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_node_config_set.id=(ID); \
gecko_apihandler_rsp.data.evt_mesh_node_config_set.netkey_index=(NETKEY_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_node_config_set.value.len=(VALUE_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)5+gecko_apihandler_rsp.data.evt_mesh_node_config_set.value.len)>>8)))|((((uint32)5+gecko_apihandler_rsp.data.evt_mesh_node_config_set.value.len)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+5,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_node_config_set.value.len,(uint8*)VALUE_DATA,2); \
}
/**  **/
#define gecko_evt_mesh_node_display_output_oob(OUTPUT_ACTION,OUTPUT_SIZE,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_node_display_output_oob.output_action=(OUTPUT_ACTION); \
gecko_apihandler_rsp.data.evt_mesh_node_display_output_oob.output_size=(OUTPUT_SIZE); \
gecko_apihandler_rsp.data.evt_mesh_node_display_output_oob.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.evt_mesh_node_display_output_oob.data.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.evt_mesh_node_display_output_oob.data.len)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_node_display_output_oob.data.len,(uint8*)DATA_DATA,1); \
}

/**  **/
#define gecko_evt_mesh_node_display_output_oob_BGBUF(OUTPUT_ACTION,OUTPUT_SIZE,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_node_display_output_oob.output_action=(OUTPUT_ACTION); \
gecko_apihandler_rsp.data.evt_mesh_node_display_output_oob.output_size=(OUTPUT_SIZE); \
gecko_apihandler_rsp.data.evt_mesh_node_display_output_oob.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.evt_mesh_node_display_output_oob.data.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.evt_mesh_node_display_output_oob.data.len)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_node_display_output_oob.data.len,(uint8*)DATA_DATA,2); \
}
/**  **/
#define gecko_evt_mesh_node_input_oob_request(INPUT_ACTION,INPUT_SIZE) \
{\
gecko_apihandler_rsp.data.evt_mesh_node_input_oob_request.input_action=(INPUT_ACTION); \
gecko_apihandler_rsp.data.evt_mesh_node_input_oob_request.input_size=(INPUT_SIZE); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x5<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_node_provisioning_started(RESULT) \
{\
gecko_apihandler_rsp.data.evt_mesh_node_provisioning_started.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x6<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_node_provisioning_failed(RESULT) \
{\
gecko_apihandler_rsp.data.evt_mesh_node_provisioning_failed.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x7<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_node_key_added(TYPE,INDEX,NETKEY_INDEX) \
{\
gecko_apihandler_rsp.data.evt_mesh_node_key_added.type=(TYPE); \
gecko_apihandler_rsp.data.evt_mesh_node_key_added.index=(INDEX); \
gecko_apihandler_rsp.data.evt_mesh_node_key_added.netkey_index=(NETKEY_INDEX); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)5)>>8)))|((((uint32)5)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x8<<24); \
gecko_handle_library_packet(4+5,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_node_model_config_changed(MESH_NODE_CONFIG_STATE,ELEMENT_ADDRESS,VENDOR_ID,MODEL_ID) \
{\
gecko_apihandler_rsp.data.evt_mesh_node_model_config_changed.mesh_node_config_state=(MESH_NODE_CONFIG_STATE); \
gecko_apihandler_rsp.data.evt_mesh_node_model_config_changed.element_address=(ELEMENT_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_node_model_config_changed.vendor_id=(VENDOR_ID); \
gecko_apihandler_rsp.data.evt_mesh_node_model_config_changed.model_id=(MODEL_ID); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)7)>>8)))|((((uint32)7)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0x9<<24); \
gecko_handle_library_packet(4+7,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_node_reset() \
{\
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)0)>>8)))|((((uint32)0)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0xa<<24); \
gecko_handle_library_packet(4+0,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_node_ivrecovery_needed(NODE_IVINDEX,NETWORK_IVINDEX) \
{\
gecko_apihandler_rsp.data.evt_mesh_node_ivrecovery_needed.node_ivindex=(NODE_IVINDEX); \
gecko_apihandler_rsp.data.evt_mesh_node_ivrecovery_needed.network_ivindex=(NETWORK_IVINDEX); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)8)>>8)))|((((uint32)8)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0xb<<24); \
gecko_handle_library_packet(4+8,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_node_changed_ivupdate_state(IVINDEX,STATE) \
{\
gecko_apihandler_rsp.data.evt_mesh_node_changed_ivupdate_state.ivindex=(IVINDEX); \
gecko_apihandler_rsp.data.evt_mesh_node_changed_ivupdate_state.state=(STATE); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)5)>>8)))|((((uint32)5)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0xc<<24); \
gecko_handle_library_packet(4+5,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_node_static_oob_request() \
{\
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)0)>>8)))|((((uint32)0)&0xff)<<8)|((uint32)0x14<<16)|((uint32)0xd<<24); \
gecko_handle_library_packet(4+0,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_init(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_init.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_scan_unprov_beacons(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_scan_unprov_beacons.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_provision_device(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_provision_device.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_create_network(RESULT,NETWORK_ID) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_create_network.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_prov_create_network.network_id=(NETWORK_ID); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3)>>8)))|((((uint32)3)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_get_dcd(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_get_dcd.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_get_config(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_get_config.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x5<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_set_config(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_set_config.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x6<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_create_appkey(RESULT,APPKEY_INDEX,KEY_LEN,KEY_DATA) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_create_appkey.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_prov_create_appkey.appkey_index=(APPKEY_INDEX); \
gecko_apihandler_rsp.data.rsp_mesh_prov_create_appkey.key.len=(KEY_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)5+gecko_apihandler_rsp.data.rsp_mesh_prov_create_appkey.key.len)>>8)))|((((uint32)5+gecko_apihandler_rsp.data.rsp_mesh_prov_create_appkey.key.len)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x7<<24); \
gecko_handle_library_packet(4+5,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_mesh_prov_create_appkey.key.len,(uint8*)KEY_DATA,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_create_appkey_BGBUF(RESULT,APPKEY_INDEX,KEY_LEN,KEY_DATA) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_create_appkey.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_prov_create_appkey.appkey_index=(APPKEY_INDEX); \
gecko_apihandler_rsp.data.rsp_mesh_prov_create_appkey.key.len=(KEY_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)5+gecko_apihandler_rsp.data.rsp_mesh_prov_create_appkey.key.len)>>8)))|((((uint32)5+gecko_apihandler_rsp.data.rsp_mesh_prov_create_appkey.key.len)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x7<<24); \
gecko_handle_library_packet(4+5,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_mesh_prov_create_appkey.key.len,(uint8*)KEY_DATA,2); \
}
/**  **/
#define gecko_rsp_mesh_prov_oob_pkey_rsp(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_oob_pkey_rsp.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x8<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_oob_auth_rsp(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_oob_auth_rsp.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x9<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_set_oob_requirements(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_set_oob_requirements.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0xa<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_key_refresh_start(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_key_refresh_start.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0xb<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_get_key_refresh_blacklist(RESULT,STATUS) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_get_key_refresh_blacklist.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_prov_get_key_refresh_blacklist.status=(STATUS); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3)>>8)))|((((uint32)3)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0xc<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_set_key_refresh_blacklist(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_set_key_refresh_blacklist.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0xd<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_appkey_add(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_appkey_add.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0xe<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_appkey_delete(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_appkey_delete.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0xf<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_model_app_bind(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_model_app_bind.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x10<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_model_app_unbind(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_model_app_unbind.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x11<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_model_app_get(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_model_app_get.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x12<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_model_sub_add(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_model_sub_add.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x13<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_model_pub_set(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_model_pub_set.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x14<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_provision_gatt_device(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_provision_gatt_device.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x15<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_ddb_get(RESULT,DEVICE_KEY,NETKEY_INDEX,ADDRESS,ELEMENTS) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_ddb_get.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_prov_ddb_get.device_key=(DEVICE_KEY); \
gecko_apihandler_rsp.data.rsp_mesh_prov_ddb_get.netkey_index=(NETKEY_INDEX); \
gecko_apihandler_rsp.data.rsp_mesh_prov_ddb_get.address=(ADDRESS); \
gecko_apihandler_rsp.data.rsp_mesh_prov_ddb_get.elements=(ELEMENTS); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)23)>>8)))|((((uint32)23)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x16<<24); \
gecko_handle_library_packet(4+23,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_ddb_delete(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_ddb_delete.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x17<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_ddb_add(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_ddb_add.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x18<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_ddb_list_devices(RESULT,COUNT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_ddb_list_devices.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_prov_ddb_list_devices.count=(COUNT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)4)>>8)))|((((uint32)4)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x19<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_network_add(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_network_add.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x1a<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_network_delete(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_network_delete.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x1b<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_nettx_get(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_nettx_get.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x1c<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_nettx_set(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_nettx_set.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x1d<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_model_sub_del(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_model_sub_del.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x1e<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_model_sub_add_va(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_model_sub_add_va.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x1f<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_model_sub_del_va(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_model_sub_del_va.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x20<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_model_sub_set(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_model_sub_set.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x21<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_model_sub_set_va(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_model_sub_set_va.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x22<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_heartbeat_publication_get(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_heartbeat_publication_get.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x23<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_heartbeat_publication_set(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_heartbeat_publication_set.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x24<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_heartbeat_subscription_get(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_heartbeat_subscription_get.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x25<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_heartbeat_subscription_set(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_heartbeat_subscription_set.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x26<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_relay_get(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_relay_get.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x27<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_relay_set(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_relay_set.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x28<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_reset_node(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_reset_node.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x29<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_appkey_get(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_appkey_get.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x2a<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_network_get(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_network_get.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x2b<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_model_sub_clear(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_model_sub_clear.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x2c<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_model_pub_get(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_model_pub_get.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x2d<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_model_pub_set_va(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_model_pub_set_va.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x2e<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_model_pub_set_cred(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_model_pub_set_cred.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x2f<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_model_pub_set_va_cred(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_model_pub_set_va_cred.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x30<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_model_sub_get(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_model_sub_get.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x31<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_prov_friend_timeout_get(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_prov_friend_timeout_get.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x32<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_prov_initialized(NETWORKS,ADDRESS,IVI) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_initialized.networks=(NETWORKS); \
gecko_apihandler_rsp.data.evt_mesh_prov_initialized.address=(ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_prov_initialized.ivi=(IVI); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)7)>>8)))|((((uint32)7)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+7,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_prov_provisioning_failed(REASON,UUID_LEN,UUID_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_provisioning_failed.reason=(REASON); \
gecko_apihandler_rsp.data.evt_mesh_prov_provisioning_failed.uuid.len=(UUID_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)2+gecko_apihandler_rsp.data.evt_mesh_prov_provisioning_failed.uuid.len)>>8)))|((((uint32)2+gecko_apihandler_rsp.data.evt_mesh_prov_provisioning_failed.uuid.len)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_prov_provisioning_failed.uuid.len,(uint8*)UUID_DATA,1); \
}

/**  **/
#define gecko_evt_mesh_prov_provisioning_failed_BGBUF(REASON,UUID_LEN,UUID_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_provisioning_failed.reason=(REASON); \
gecko_apihandler_rsp.data.evt_mesh_prov_provisioning_failed.uuid.len=(UUID_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)2+gecko_apihandler_rsp.data.evt_mesh_prov_provisioning_failed.uuid.len)>>8)))|((((uint32)2+gecko_apihandler_rsp.data.evt_mesh_prov_provisioning_failed.uuid.len)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_prov_provisioning_failed.uuid.len,(uint8*)UUID_DATA,2); \
}
/**  **/
#define gecko_evt_mesh_prov_device_provisioned(ADDRESS,UUID_LEN,UUID_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_device_provisioned.address=(ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_prov_device_provisioned.uuid.len=(UUID_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.evt_mesh_prov_device_provisioned.uuid.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.evt_mesh_prov_device_provisioned.uuid.len)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_prov_device_provisioned.uuid.len,(uint8*)UUID_DATA,1); \
}

/**  **/
#define gecko_evt_mesh_prov_device_provisioned_BGBUF(ADDRESS,UUID_LEN,UUID_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_device_provisioned.address=(ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_prov_device_provisioned.uuid.len=(UUID_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.evt_mesh_prov_device_provisioned.uuid.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.evt_mesh_prov_device_provisioned.uuid.len)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_prov_device_provisioned.uuid.len,(uint8*)UUID_DATA,2); \
}
/**  **/
#define gecko_evt_mesh_prov_unprov_beacon(OOB_CAPABILITIES,URI_HASH,BEARER,ADDRESS,ADDRESS_TYPE,UUID_LEN,UUID_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_unprov_beacon.oob_capabilities=(OOB_CAPABILITIES); \
gecko_apihandler_rsp.data.evt_mesh_prov_unprov_beacon.uri_hash=(URI_HASH); \
gecko_apihandler_rsp.data.evt_mesh_prov_unprov_beacon.bearer=(BEARER); \
memcpy(&gecko_apihandler_rsp.data.evt_mesh_prov_unprov_beacon.address,ADDRESS,sizeof(bd_addr)); \
gecko_apihandler_rsp.data.evt_mesh_prov_unprov_beacon.address_type=(ADDRESS_TYPE); \
gecko_apihandler_rsp.data.evt_mesh_prov_unprov_beacon.uuid.len=(UUID_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)15+gecko_apihandler_rsp.data.evt_mesh_prov_unprov_beacon.uuid.len)>>8)))|((((uint32)15+gecko_apihandler_rsp.data.evt_mesh_prov_unprov_beacon.uuid.len)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+15,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_prov_unprov_beacon.uuid.len,(uint8*)UUID_DATA,1); \
}

/**  **/
#define gecko_evt_mesh_prov_unprov_beacon_BGBUF(OOB_CAPABILITIES,URI_HASH,BEARER,ADDRESS,ADDRESS_TYPE,UUID_LEN,UUID_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_unprov_beacon.oob_capabilities=(OOB_CAPABILITIES); \
gecko_apihandler_rsp.data.evt_mesh_prov_unprov_beacon.uri_hash=(URI_HASH); \
gecko_apihandler_rsp.data.evt_mesh_prov_unprov_beacon.bearer=(BEARER); \
memcpy(&gecko_apihandler_rsp.data.evt_mesh_prov_unprov_beacon.address,ADDRESS,sizeof(bd_addr)); \
gecko_apihandler_rsp.data.evt_mesh_prov_unprov_beacon.address_type=(ADDRESS_TYPE); \
gecko_apihandler_rsp.data.evt_mesh_prov_unprov_beacon.uuid.len=(UUID_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)15+gecko_apihandler_rsp.data.evt_mesh_prov_unprov_beacon.uuid.len)>>8)))|((((uint32)15+gecko_apihandler_rsp.data.evt_mesh_prov_unprov_beacon.uuid.len)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+15,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_prov_unprov_beacon.uuid.len,(uint8*)UUID_DATA,2); \
}
/**  **/
#define gecko_evt_mesh_prov_dcd_status(RESULT,ADDRESS,CID,PID,VID,CRPL,FEATURES,ELEMENTS,MODELS,ELEMENT_DATA_LEN,ELEMENT_DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_dcd_status.result=(RESULT); \
gecko_apihandler_rsp.data.evt_mesh_prov_dcd_status.address=(ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_prov_dcd_status.cid=(CID); \
gecko_apihandler_rsp.data.evt_mesh_prov_dcd_status.pid=(PID); \
gecko_apihandler_rsp.data.evt_mesh_prov_dcd_status.vid=(VID); \
gecko_apihandler_rsp.data.evt_mesh_prov_dcd_status.crpl=(CRPL); \
gecko_apihandler_rsp.data.evt_mesh_prov_dcd_status.features=(FEATURES); \
gecko_apihandler_rsp.data.evt_mesh_prov_dcd_status.elements=(ELEMENTS); \
gecko_apihandler_rsp.data.evt_mesh_prov_dcd_status.models=(MODELS); \
gecko_apihandler_rsp.data.evt_mesh_prov_dcd_status.element_data.len=(ELEMENT_DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)17+gecko_apihandler_rsp.data.evt_mesh_prov_dcd_status.element_data.len)>>8)))|((((uint32)17+gecko_apihandler_rsp.data.evt_mesh_prov_dcd_status.element_data.len)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+17,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_prov_dcd_status.element_data.len,(uint8*)ELEMENT_DATA_DATA,1); \
}

/**  **/
#define gecko_evt_mesh_prov_dcd_status_BGBUF(RESULT,ADDRESS,CID,PID,VID,CRPL,FEATURES,ELEMENTS,MODELS,ELEMENT_DATA_LEN,ELEMENT_DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_dcd_status.result=(RESULT); \
gecko_apihandler_rsp.data.evt_mesh_prov_dcd_status.address=(ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_prov_dcd_status.cid=(CID); \
gecko_apihandler_rsp.data.evt_mesh_prov_dcd_status.pid=(PID); \
gecko_apihandler_rsp.data.evt_mesh_prov_dcd_status.vid=(VID); \
gecko_apihandler_rsp.data.evt_mesh_prov_dcd_status.crpl=(CRPL); \
gecko_apihandler_rsp.data.evt_mesh_prov_dcd_status.features=(FEATURES); \
gecko_apihandler_rsp.data.evt_mesh_prov_dcd_status.elements=(ELEMENTS); \
gecko_apihandler_rsp.data.evt_mesh_prov_dcd_status.models=(MODELS); \
gecko_apihandler_rsp.data.evt_mesh_prov_dcd_status.element_data.len=(ELEMENT_DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)17+gecko_apihandler_rsp.data.evt_mesh_prov_dcd_status.element_data.len)>>8)))|((((uint32)17+gecko_apihandler_rsp.data.evt_mesh_prov_dcd_status.element_data.len)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+17,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_prov_dcd_status.element_data.len,(uint8*)ELEMENT_DATA_DATA,2); \
}
/**  **/
#define gecko_evt_mesh_prov_config_status(ADDRESS,ID,STATUS,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_config_status.address=(ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_prov_config_status.id=(ID); \
gecko_apihandler_rsp.data.evt_mesh_prov_config_status.status=(STATUS); \
gecko_apihandler_rsp.data.evt_mesh_prov_config_status.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)6+gecko_apihandler_rsp.data.evt_mesh_prov_config_status.data.len)>>8)))|((((uint32)6+gecko_apihandler_rsp.data.evt_mesh_prov_config_status.data.len)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x5<<24); \
gecko_handle_library_packet(4+6,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_prov_config_status.data.len,(uint8*)DATA_DATA,1); \
}

/**  **/
#define gecko_evt_mesh_prov_config_status_BGBUF(ADDRESS,ID,STATUS,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_config_status.address=(ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_prov_config_status.id=(ID); \
gecko_apihandler_rsp.data.evt_mesh_prov_config_status.status=(STATUS); \
gecko_apihandler_rsp.data.evt_mesh_prov_config_status.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)6+gecko_apihandler_rsp.data.evt_mesh_prov_config_status.data.len)>>8)))|((((uint32)6+gecko_apihandler_rsp.data.evt_mesh_prov_config_status.data.len)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x5<<24); \
gecko_handle_library_packet(4+6,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_prov_config_status.data.len,(uint8*)DATA_DATA,2); \
}
/**  **/
#define gecko_evt_mesh_prov_oob_pkey_request(UUID_LEN,UUID_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_oob_pkey_request.uuid.len=(UUID_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)1+gecko_apihandler_rsp.data.evt_mesh_prov_oob_pkey_request.uuid.len)>>8)))|((((uint32)1+gecko_apihandler_rsp.data.evt_mesh_prov_oob_pkey_request.uuid.len)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x6<<24); \
gecko_handle_library_packet(4+1,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_prov_oob_pkey_request.uuid.len,(uint8*)UUID_DATA,1); \
}

/**  **/
#define gecko_evt_mesh_prov_oob_pkey_request_BGBUF(UUID_LEN,UUID_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_oob_pkey_request.uuid.len=(UUID_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)1+gecko_apihandler_rsp.data.evt_mesh_prov_oob_pkey_request.uuid.len)>>8)))|((((uint32)1+gecko_apihandler_rsp.data.evt_mesh_prov_oob_pkey_request.uuid.len)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x6<<24); \
gecko_handle_library_packet(4+1,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_prov_oob_pkey_request.uuid.len,(uint8*)UUID_DATA,2); \
}
/**  **/
#define gecko_evt_mesh_prov_oob_auth_request(OUTPUT,OUTPUT_ACTION,OUTPUT_SIZE,UUID_LEN,UUID_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_oob_auth_request.output=(OUTPUT); \
gecko_apihandler_rsp.data.evt_mesh_prov_oob_auth_request.output_action=(OUTPUT_ACTION); \
gecko_apihandler_rsp.data.evt_mesh_prov_oob_auth_request.output_size=(OUTPUT_SIZE); \
gecko_apihandler_rsp.data.evt_mesh_prov_oob_auth_request.uuid.len=(UUID_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)4+gecko_apihandler_rsp.data.evt_mesh_prov_oob_auth_request.uuid.len)>>8)))|((((uint32)4+gecko_apihandler_rsp.data.evt_mesh_prov_oob_auth_request.uuid.len)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x7<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_prov_oob_auth_request.uuid.len,(uint8*)UUID_DATA,1); \
}

/**  **/
#define gecko_evt_mesh_prov_oob_auth_request_BGBUF(OUTPUT,OUTPUT_ACTION,OUTPUT_SIZE,UUID_LEN,UUID_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_oob_auth_request.output=(OUTPUT); \
gecko_apihandler_rsp.data.evt_mesh_prov_oob_auth_request.output_action=(OUTPUT_ACTION); \
gecko_apihandler_rsp.data.evt_mesh_prov_oob_auth_request.output_size=(OUTPUT_SIZE); \
gecko_apihandler_rsp.data.evt_mesh_prov_oob_auth_request.uuid.len=(UUID_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)4+gecko_apihandler_rsp.data.evt_mesh_prov_oob_auth_request.uuid.len)>>8)))|((((uint32)4+gecko_apihandler_rsp.data.evt_mesh_prov_oob_auth_request.uuid.len)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x7<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_prov_oob_auth_request.uuid.len,(uint8*)UUID_DATA,2); \
}
/**  **/
#define gecko_evt_mesh_prov_oob_display_input(INPUT_ACTION,INPUT_SIZE,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_oob_display_input.input_action=(INPUT_ACTION); \
gecko_apihandler_rsp.data.evt_mesh_prov_oob_display_input.input_size=(INPUT_SIZE); \
gecko_apihandler_rsp.data.evt_mesh_prov_oob_display_input.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.evt_mesh_prov_oob_display_input.data.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.evt_mesh_prov_oob_display_input.data.len)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x8<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_prov_oob_display_input.data.len,(uint8*)DATA_DATA,1); \
}

/**  **/
#define gecko_evt_mesh_prov_oob_display_input_BGBUF(INPUT_ACTION,INPUT_SIZE,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_oob_display_input.input_action=(INPUT_ACTION); \
gecko_apihandler_rsp.data.evt_mesh_prov_oob_display_input.input_size=(INPUT_SIZE); \
gecko_apihandler_rsp.data.evt_mesh_prov_oob_display_input.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.evt_mesh_prov_oob_display_input.data.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.evt_mesh_prov_oob_display_input.data.len)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x8<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_prov_oob_display_input.data.len,(uint8*)DATA_DATA,2); \
}
/**  **/
#define gecko_evt_mesh_prov_ddb_list(UUID,ADDRESS,ELEMENTS) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_ddb_list.uuid=(UUID); \
gecko_apihandler_rsp.data.evt_mesh_prov_ddb_list.address=(ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_prov_ddb_list.elements=(ELEMENTS); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)19)>>8)))|((((uint32)19)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x9<<24); \
gecko_handle_library_packet(4+19,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_prov_heartbeat_publication_status(ADDRESS,NETKEY_INDEX,PUBLICATION_ADDRESS,COUNT_LOG,PERIOD_LOG,TTL,FEATURES,PUBLICATION_NETKEY_INDEX) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_heartbeat_publication_status.address=(ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_prov_heartbeat_publication_status.netkey_index=(NETKEY_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_prov_heartbeat_publication_status.publication_address=(PUBLICATION_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_prov_heartbeat_publication_status.count_log=(COUNT_LOG); \
gecko_apihandler_rsp.data.evt_mesh_prov_heartbeat_publication_status.period_log=(PERIOD_LOG); \
gecko_apihandler_rsp.data.evt_mesh_prov_heartbeat_publication_status.ttl=(TTL); \
gecko_apihandler_rsp.data.evt_mesh_prov_heartbeat_publication_status.features=(FEATURES); \
gecko_apihandler_rsp.data.evt_mesh_prov_heartbeat_publication_status.publication_netkey_index=(PUBLICATION_NETKEY_INDEX); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)13)>>8)))|((((uint32)13)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0xa<<24); \
gecko_handle_library_packet(4+13,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_prov_heartbeat_subscription_status(ADDRESS,NETKEY_INDEX,SUBSCRIPTION_SOURCE,SUBSCRIPTION_DESTINATION,PERIOD_LOG,COUNT_LOG,MIN_HOPS,MAX_HOPS) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_heartbeat_subscription_status.address=(ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_prov_heartbeat_subscription_status.netkey_index=(NETKEY_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_prov_heartbeat_subscription_status.subscription_source=(SUBSCRIPTION_SOURCE); \
gecko_apihandler_rsp.data.evt_mesh_prov_heartbeat_subscription_status.subscription_destination=(SUBSCRIPTION_DESTINATION); \
gecko_apihandler_rsp.data.evt_mesh_prov_heartbeat_subscription_status.period_log=(PERIOD_LOG); \
gecko_apihandler_rsp.data.evt_mesh_prov_heartbeat_subscription_status.count_log=(COUNT_LOG); \
gecko_apihandler_rsp.data.evt_mesh_prov_heartbeat_subscription_status.min_hops=(MIN_HOPS); \
gecko_apihandler_rsp.data.evt_mesh_prov_heartbeat_subscription_status.max_hops=(MAX_HOPS); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)12)>>8)))|((((uint32)12)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0xb<<24); \
gecko_handle_library_packet(4+12,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_prov_relay_status(ADDRESS,NETKEY_INDEX,VALUE,COUNT,INTERVAL) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_relay_status.address=(ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_prov_relay_status.netkey_index=(NETKEY_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_prov_relay_status.value=(VALUE); \
gecko_apihandler_rsp.data.evt_mesh_prov_relay_status.count=(COUNT); \
gecko_apihandler_rsp.data.evt_mesh_prov_relay_status.interval=(INTERVAL); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)7)>>8)))|((((uint32)7)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0xc<<24); \
gecko_handle_library_packet(4+7,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_prov_uri(HASH,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_uri.hash=(HASH); \
gecko_apihandler_rsp.data.evt_mesh_prov_uri.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)5+gecko_apihandler_rsp.data.evt_mesh_prov_uri.data.len)>>8)))|((((uint32)5+gecko_apihandler_rsp.data.evt_mesh_prov_uri.data.len)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0xd<<24); \
gecko_handle_library_packet(4+5,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_prov_uri.data.len,(uint8*)DATA_DATA,1); \
}

/**  **/
#define gecko_evt_mesh_prov_uri_BGBUF(HASH,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_uri.hash=(HASH); \
gecko_apihandler_rsp.data.evt_mesh_prov_uri.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)5+gecko_apihandler_rsp.data.evt_mesh_prov_uri.data.len)>>8)))|((((uint32)5+gecko_apihandler_rsp.data.evt_mesh_prov_uri.data.len)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0xd<<24); \
gecko_handle_library_packet(4+5,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_prov_uri.data.len,(uint8*)DATA_DATA,2); \
}
/**  **/
#define gecko_evt_mesh_prov_node_reset(ADDRESS) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_node_reset.address=(ADDRESS); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0xe<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_prov_appkey_list(ADDRESS,NETKEY_INDEX,APPKEY_INDEX) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_appkey_list.address=(ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_prov_appkey_list.netkey_index=(NETKEY_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_prov_appkey_list.appkey_index=(APPKEY_INDEX); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)6)>>8)))|((((uint32)6)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0xf<<24); \
gecko_handle_library_packet(4+6,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_prov_appkey_list_end(RESULT,ADDRESS,NETKEY_INDEX) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_appkey_list_end.result=(RESULT); \
gecko_apihandler_rsp.data.evt_mesh_prov_appkey_list_end.address=(ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_prov_appkey_list_end.netkey_index=(NETKEY_INDEX); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)6)>>8)))|((((uint32)6)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x10<<24); \
gecko_handle_library_packet(4+6,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_prov_network_list(ADDRESS,NETKEY_INDEX) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_network_list.address=(ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_prov_network_list.netkey_index=(NETKEY_INDEX); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)4)>>8)))|((((uint32)4)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x11<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_prov_network_list_end(RESULT,ADDRESS) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_network_list_end.result=(RESULT); \
gecko_apihandler_rsp.data.evt_mesh_prov_network_list_end.address=(ADDRESS); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)4)>>8)))|((((uint32)4)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x12<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_prov_model_pub_status(RESULT,ELEM_ADDRESS,VENDOR_ID,MODEL_ID,APPKEY_INDEX,PUB_ADDRESS,TTL,PERIOD,RETRANS,CREDENTIALS) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_model_pub_status.result=(RESULT); \
gecko_apihandler_rsp.data.evt_mesh_prov_model_pub_status.elem_address=(ELEM_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_prov_model_pub_status.vendor_id=(VENDOR_ID); \
gecko_apihandler_rsp.data.evt_mesh_prov_model_pub_status.model_id=(MODEL_ID); \
gecko_apihandler_rsp.data.evt_mesh_prov_model_pub_status.appkey_index=(APPKEY_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_prov_model_pub_status.pub_address=(PUB_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_prov_model_pub_status.ttl=(TTL); \
gecko_apihandler_rsp.data.evt_mesh_prov_model_pub_status.period=(PERIOD); \
gecko_apihandler_rsp.data.evt_mesh_prov_model_pub_status.retrans=(RETRANS); \
gecko_apihandler_rsp.data.evt_mesh_prov_model_pub_status.credentials=(CREDENTIALS); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)16)>>8)))|((((uint32)16)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x13<<24); \
gecko_handle_library_packet(4+16,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_prov_key_refresh_phase_update(KEY,PHASE) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_key_refresh_phase_update.key=(KEY); \
gecko_apihandler_rsp.data.evt_mesh_prov_key_refresh_phase_update.phase=(PHASE); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)3)>>8)))|((((uint32)3)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x14<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_prov_key_refresh_node_update(KEY,PHASE,UUID_LEN,UUID_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_key_refresh_node_update.key=(KEY); \
gecko_apihandler_rsp.data.evt_mesh_prov_key_refresh_node_update.phase=(PHASE); \
gecko_apihandler_rsp.data.evt_mesh_prov_key_refresh_node_update.uuid.len=(UUID_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)4+gecko_apihandler_rsp.data.evt_mesh_prov_key_refresh_node_update.uuid.len)>>8)))|((((uint32)4+gecko_apihandler_rsp.data.evt_mesh_prov_key_refresh_node_update.uuid.len)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x15<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_prov_key_refresh_node_update.uuid.len,(uint8*)UUID_DATA,1); \
}

/**  **/
#define gecko_evt_mesh_prov_key_refresh_node_update_BGBUF(KEY,PHASE,UUID_LEN,UUID_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_key_refresh_node_update.key=(KEY); \
gecko_apihandler_rsp.data.evt_mesh_prov_key_refresh_node_update.phase=(PHASE); \
gecko_apihandler_rsp.data.evt_mesh_prov_key_refresh_node_update.uuid.len=(UUID_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)4+gecko_apihandler_rsp.data.evt_mesh_prov_key_refresh_node_update.uuid.len)>>8)))|((((uint32)4+gecko_apihandler_rsp.data.evt_mesh_prov_key_refresh_node_update.uuid.len)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x15<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_prov_key_refresh_node_update.uuid.len,(uint8*)UUID_DATA,2); \
}
/**  **/
#define gecko_evt_mesh_prov_key_refresh_complete(KEY,RESULT) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_key_refresh_complete.key=(KEY); \
gecko_apihandler_rsp.data.evt_mesh_prov_key_refresh_complete.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)4)>>8)))|((((uint32)4)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x16<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_prov_model_sub_addr(ELEM_ADDRESS,VENDOR_ID,MODEL_ID,SUB_ADDR) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_model_sub_addr.elem_address=(ELEM_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_prov_model_sub_addr.vendor_id=(VENDOR_ID); \
gecko_apihandler_rsp.data.evt_mesh_prov_model_sub_addr.model_id=(MODEL_ID); \
gecko_apihandler_rsp.data.evt_mesh_prov_model_sub_addr.sub_addr=(SUB_ADDR); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)8)>>8)))|((((uint32)8)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x17<<24); \
gecko_handle_library_packet(4+8,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_prov_model_sub_addr_end(RESULT,ELEM_ADDRESS,VENDOR_ID,MODEL_ID) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_model_sub_addr_end.result=(RESULT); \
gecko_apihandler_rsp.data.evt_mesh_prov_model_sub_addr_end.elem_address=(ELEM_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_prov_model_sub_addr_end.vendor_id=(VENDOR_ID); \
gecko_apihandler_rsp.data.evt_mesh_prov_model_sub_addr_end.model_id=(MODEL_ID); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)8)>>8)))|((((uint32)8)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x18<<24); \
gecko_handle_library_packet(4+8,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_prov_friend_timeout_status(ADDRESS,NETKEY_INDEX,TIMEOUT) \
{\
gecko_apihandler_rsp.data.evt_mesh_prov_friend_timeout_status.address=(ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_prov_friend_timeout_status.netkey_index=(NETKEY_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_prov_friend_timeout_status.timeout=(TIMEOUT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)8)>>8)))|((((uint32)8)&0xff)<<8)|((uint32)0x15<<16)|((uint32)0x19<<24); \
gecko_handle_library_packet(4+8,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_debug_dump_keys(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_dump_keys.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_debug_prov_dump_database(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_prov_dump_database.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_debug_prov_load_database_entries(RESULT,COUNT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_prov_load_database_entries.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_debug_prov_load_database_entries.count=(COUNT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3)>>8)))|((((uint32)3)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_debug_set_mask(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_set_mask.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x6<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_debug_set_kludges(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_set_kludges.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0xd<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_debug_rssi_limit_set(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_rssi_limit_set.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x19<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_debug_add_va(RESULT,INDEX,HASH) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_add_va.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_debug_add_va.index=(INDEX); \
gecko_apihandler_rsp.data.rsp_mesh_debug_add_va.hash=(HASH); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)5)>>8)))|((((uint32)5)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x1b<<24); \
gecko_handle_library_packet(4+5,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_debug_unref_va(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_unref_va.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x1c<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_debug_dump_va(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_dump_va.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x1d<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_debug_set_white_list_item(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_set_white_list_item.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x20<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_debug_set_white_list_active(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_set_white_list_active.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x21<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_debug_node_set_static_oob_data(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_node_set_static_oob_data.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x22<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_debug_node_set_oob_eckey(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_node_set_oob_eckey.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x23<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_debug_node_get_oob_eckey(RESULT,KEY_LEN,KEY_DATA) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_oob_eckey.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_oob_eckey.key.len=(KEY_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_oob_eckey.key.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_oob_eckey.key.len)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x24<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_oob_eckey.key.len,(uint8*)KEY_DATA,1); \
}

/**  **/
#define gecko_rsp_mesh_debug_node_get_oob_eckey_BGBUF(RESULT,KEY_LEN,KEY_DATA) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_oob_eckey.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_oob_eckey.key.len=(KEY_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_oob_eckey.key.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_oob_eckey.key.len)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x24<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_oob_eckey.key.len,(uint8*)KEY_DATA,2); \
}
/**  **/
#define gecko_rsp_mesh_debug_node_get_static_oob_data(RESULT,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_static_oob_data.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_static_oob_data.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_static_oob_data.data.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_static_oob_data.data.len)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x25<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_static_oob_data.data.len,(uint8*)DATA_DATA,1); \
}

/**  **/
#define gecko_rsp_mesh_debug_node_get_static_oob_data_BGBUF(RESULT,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_static_oob_data.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_static_oob_data.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_static_oob_data.data.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_static_oob_data.data.len)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x25<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_static_oob_data.data.len,(uint8*)DATA_DATA,2); \
}
/**  **/
#define gecko_rsp_mesh_debug_network_trace_config(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_network_trace_config.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x26<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_debug_network_update(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_network_update.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x29<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_debug_appkey_update(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_appkey_update.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x2a<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_debug_proxy_listen(RESULT,HANDLE) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_proxy_listen.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_debug_proxy_listen.handle=(HANDLE); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)6)>>8)))|((((uint32)6)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x2e<<24); \
gecko_handle_library_packet(4+6,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_debug_set_scan(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_set_scan.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x2f<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_debug_node_set_oob_uri(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_node_set_oob_uri.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x30<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_debug_node_get_oob_uri(RESULT,URI_LEN,URI_DATA) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_oob_uri.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_oob_uri.uri.len=(URI_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_oob_uri.uri.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_oob_uri.uri.len)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x31<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_oob_uri.uri.len,(uint8*)URI_DATA,1); \
}

/**  **/
#define gecko_rsp_mesh_debug_node_get_oob_uri_BGBUF(RESULT,URI_LEN,URI_DATA) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_oob_uri.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_oob_uri.uri.len=(URI_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_oob_uri.uri.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_oob_uri.uri.len)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x31<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_mesh_debug_node_get_oob_uri.uri.len,(uint8*)URI_DATA,2); \
}
/**  **/
#define gecko_rsp_mesh_debug_node_init_cfgcl(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_node_init_cfgcl.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x32<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_debug_key_refresh_start_noauto(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_key_refresh_start_noauto.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x33<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_debug_key_refresh_next_phase(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_key_refresh_next_phase.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x34<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_debug_net_send(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_debug_net_send.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x35<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_debug_key(ID,TYPE,FLAGS,INDEX,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_debug_key.id=(ID); \
gecko_apihandler_rsp.data.evt_mesh_debug_key.type=(TYPE); \
gecko_apihandler_rsp.data.evt_mesh_debug_key.flags=(FLAGS); \
gecko_apihandler_rsp.data.evt_mesh_debug_key.index=(INDEX); \
gecko_apihandler_rsp.data.evt_mesh_debug_key.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)7+gecko_apihandler_rsp.data.evt_mesh_debug_key.data.len)>>8)))|((((uint32)7+gecko_apihandler_rsp.data.evt_mesh_debug_key.data.len)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+7,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_debug_key.data.len,(uint8*)DATA_DATA,1); \
}

/**  **/
#define gecko_evt_mesh_debug_key_BGBUF(ID,TYPE,FLAGS,INDEX,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_debug_key.id=(ID); \
gecko_apihandler_rsp.data.evt_mesh_debug_key.type=(TYPE); \
gecko_apihandler_rsp.data.evt_mesh_debug_key.flags=(FLAGS); \
gecko_apihandler_rsp.data.evt_mesh_debug_key.index=(INDEX); \
gecko_apihandler_rsp.data.evt_mesh_debug_key.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)7+gecko_apihandler_rsp.data.evt_mesh_debug_key.data.len)>>8)))|((((uint32)7+gecko_apihandler_rsp.data.evt_mesh_debug_key.data.len)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+7,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_debug_key.data.len,(uint8*)DATA_DATA,2); \
}
/**  **/
#define gecko_evt_mesh_debug_keys_end() \
{\
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)0)>>8)))|((((uint32)0)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+0,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_debug_msg(DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_debug_msg.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)1+gecko_apihandler_rsp.data.evt_mesh_debug_msg.data.len)>>8)))|((((uint32)1+gecko_apihandler_rsp.data.evt_mesh_debug_msg.data.len)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+1,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_debug_msg.data.len,(uint8*)DATA_DATA,1); \
}

/**  **/
#define gecko_evt_mesh_debug_msg_BGBUF(DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_debug_msg.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)1+gecko_apihandler_rsp.data.evt_mesh_debug_msg.data.len)>>8)))|((((uint32)1+gecko_apihandler_rsp.data.evt_mesh_debug_msg.data.len)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+1,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_debug_msg.data.len,(uint8*)DATA_DATA,2); \
}
/**  **/
#define gecko_evt_mesh_debug_prov_database_entry(DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_debug_prov_database_entry.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)1+gecko_apihandler_rsp.data.evt_mesh_debug_prov_database_entry.data.len)>>8)))|((((uint32)1+gecko_apihandler_rsp.data.evt_mesh_debug_prov_database_entry.data.len)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+1,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_debug_prov_database_entry.data.len,(uint8*)DATA_DATA,1); \
}

/**  **/
#define gecko_evt_mesh_debug_prov_database_entry_BGBUF(DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_debug_prov_database_entry.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)1+gecko_apihandler_rsp.data.evt_mesh_debug_prov_database_entry.data.len)>>8)))|((((uint32)1+gecko_apihandler_rsp.data.evt_mesh_debug_prov_database_entry.data.len)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+1,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_debug_prov_database_entry.data.len,(uint8*)DATA_DATA,2); \
}
/**  **/
#define gecko_evt_mesh_debug_prov_database_entries_end() \
{\
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)0)>>8)))|((((uint32)0)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+0,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_debug_va(INDEX,HASH,LABEL_LEN,LABEL_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_debug_va.index=(INDEX); \
gecko_apihandler_rsp.data.evt_mesh_debug_va.hash=(HASH); \
gecko_apihandler_rsp.data.evt_mesh_debug_va.label.len=(LABEL_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)4+gecko_apihandler_rsp.data.evt_mesh_debug_va.label.len)>>8)))|((((uint32)4+gecko_apihandler_rsp.data.evt_mesh_debug_va.label.len)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0xb<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_debug_va.label.len,(uint8*)LABEL_DATA,1); \
}

/**  **/
#define gecko_evt_mesh_debug_va_BGBUF(INDEX,HASH,LABEL_LEN,LABEL_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_debug_va.index=(INDEX); \
gecko_apihandler_rsp.data.evt_mesh_debug_va.hash=(HASH); \
gecko_apihandler_rsp.data.evt_mesh_debug_va.label.len=(LABEL_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)4+gecko_apihandler_rsp.data.evt_mesh_debug_va.label.len)>>8)))|((((uint32)4+gecko_apihandler_rsp.data.evt_mesh_debug_va.label.len)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0xb<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_debug_va.label.len,(uint8*)LABEL_DATA,2); \
}
/**  **/
#define gecko_evt_mesh_debug_va_end() \
{\
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)0)>>8)))|((((uint32)0)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0xc<<24); \
gecko_handle_library_packet(4+0,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_debug_network_trace_pdu(INDEX,NID,IVI,CTL,TTL,SEQ,SRC,DST,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_pdu.index=(INDEX); \
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_pdu.nid=(NID); \
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_pdu.ivi=(IVI); \
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_pdu.ctl=(CTL); \
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_pdu.ttl=(TTL); \
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_pdu.seq=(SEQ); \
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_pdu.src=(SRC); \
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_pdu.dst=(DST); \
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_pdu.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)18+gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_pdu.data.len)>>8)))|((((uint32)18+gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_pdu.data.len)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0xd<<24); \
gecko_handle_library_packet(4+18,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_pdu.data.len,(uint8*)DATA_DATA,1); \
}

/**  **/
#define gecko_evt_mesh_debug_network_trace_pdu_BGBUF(INDEX,NID,IVI,CTL,TTL,SEQ,SRC,DST,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_pdu.index=(INDEX); \
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_pdu.nid=(NID); \
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_pdu.ivi=(IVI); \
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_pdu.ctl=(CTL); \
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_pdu.ttl=(TTL); \
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_pdu.seq=(SEQ); \
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_pdu.src=(SRC); \
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_pdu.dst=(DST); \
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_pdu.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)18+gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_pdu.data.len)>>8)))|((((uint32)18+gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_pdu.data.len)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0xd<<24); \
gecko_handle_library_packet(4+18,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_pdu.data.len,(uint8*)DATA_DATA,2); \
}
/**  **/
#define gecko_evt_mesh_debug_network_trace_access_payload(INDEX,OPCODE,VENDOR,LENGTH,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_access_payload.index=(INDEX); \
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_access_payload.opcode=(OPCODE); \
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_access_payload.vendor=(VENDOR); \
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_access_payload.length=(LENGTH); \
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_access_payload.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)9+gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_access_payload.data.len)>>8)))|((((uint32)9+gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_access_payload.data.len)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0xe<<24); \
gecko_handle_library_packet(4+9,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_access_payload.data.len,(uint8*)DATA_DATA,1); \
}

/**  **/
#define gecko_evt_mesh_debug_network_trace_access_payload_BGBUF(INDEX,OPCODE,VENDOR,LENGTH,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_access_payload.index=(INDEX); \
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_access_payload.opcode=(OPCODE); \
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_access_payload.vendor=(VENDOR); \
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_access_payload.length=(LENGTH); \
gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_access_payload.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)9+gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_access_payload.data.len)>>8)))|((((uint32)9+gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_access_payload.data.len)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0xe<<24); \
gecko_handle_library_packet(4+9,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_debug_network_trace_access_payload.data.len,(uint8*)DATA_DATA,2); \
}
/**  **/
#define gecko_evt_mesh_debug_network_status(RESULT,ADDRESS,NETKEY_INDEX) \
{\
gecko_apihandler_rsp.data.evt_mesh_debug_network_status.result=(RESULT); \
gecko_apihandler_rsp.data.evt_mesh_debug_network_status.address=(ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_debug_network_status.netkey_index=(NETKEY_INDEX); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)6)>>8)))|((((uint32)6)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0xf<<24); \
gecko_handle_library_packet(4+6,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_debug_appkey_status(RESULT,ADDRESS,NETKEY_INDEX,APPKEY_INDEX) \
{\
gecko_apihandler_rsp.data.evt_mesh_debug_appkey_status.result=(RESULT); \
gecko_apihandler_rsp.data.evt_mesh_debug_appkey_status.address=(ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_debug_appkey_status.netkey_index=(NETKEY_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_debug_appkey_status.appkey_index=(APPKEY_INDEX); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)8)>>8)))|((((uint32)8)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x10<<24); \
gecko_handle_library_packet(4+8,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_debug_transport_rx_cancelled(SRC,DST,SEQ_AUTH) \
{\
gecko_apihandler_rsp.data.evt_mesh_debug_transport_rx_cancelled.src=(SRC); \
gecko_apihandler_rsp.data.evt_mesh_debug_transport_rx_cancelled.dst=(DST); \
gecko_apihandler_rsp.data.evt_mesh_debug_transport_rx_cancelled.seq_auth=(SEQ_AUTH); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)8)>>8)))|((((uint32)8)&0xff)<<8)|((uint32)0x16<<16)|((uint32)0x11<<24); \
gecko_handle_library_packet(4+8,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_proxy_radio_proxy_send_adv(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_proxy_radio_proxy_send_adv.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x17<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_proxy_radio_child_adv_req_done(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_proxy_radio_child_adv_req_done.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x17<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_proxy_radio_child_adv_data(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_proxy_radio_child_adv_data.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x17<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_proxy_radio_get_ms_ticks(RESULT,MS) \
{\
gecko_apihandler_rsp.data.rsp_proxy_radio_get_ms_ticks.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_proxy_radio_get_ms_ticks.ms=(MS); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)6)>>8)))|((((uint32)6)&0xff)<<8)|((uint32)0x17<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+6,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_proxy_radio_test_timer(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_proxy_radio_test_timer.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x17<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_proxy_radio_proxy_send_adv_done() \
{\
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)0)>>8)))|((((uint32)0)&0xff)<<8)|((uint32)0x17<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+0,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_proxy_radio_proxy_adv_data(DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_proxy_radio_proxy_adv_data.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)1+gecko_apihandler_rsp.data.evt_proxy_radio_proxy_adv_data.data.len)>>8)))|((((uint32)1+gecko_apihandler_rsp.data.evt_proxy_radio_proxy_adv_data.data.len)&0xff)<<8)|((uint32)0x17<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+1,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_proxy_radio_proxy_adv_data.data.len,(uint8*)DATA_DATA,1); \
}

/**  **/
#define gecko_evt_proxy_radio_proxy_adv_data_BGBUF(DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_proxy_radio_proxy_adv_data.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)1+gecko_apihandler_rsp.data.evt_proxy_radio_proxy_adv_data.data.len)>>8)))|((((uint32)1+gecko_apihandler_rsp.data.evt_proxy_radio_proxy_adv_data.data.len)&0xff)<<8)|((uint32)0x17<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+1,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_proxy_radio_proxy_adv_data.data.len,(uint8*)DATA_DATA,2); \
}
/**  **/
#define gecko_evt_proxy_radio_child_adv_req(DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_proxy_radio_child_adv_req.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)1+gecko_apihandler_rsp.data.evt_proxy_radio_child_adv_req.data.len)>>8)))|((((uint32)1+gecko_apihandler_rsp.data.evt_proxy_radio_child_adv_req.data.len)&0xff)<<8)|((uint32)0x17<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+1,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_proxy_radio_child_adv_req.data.len,(uint8*)DATA_DATA,1); \
}

/**  **/
#define gecko_evt_proxy_radio_child_adv_req_BGBUF(DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_proxy_radio_child_adv_req.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)1+gecko_apihandler_rsp.data.evt_proxy_radio_child_adv_req.data.len)>>8)))|((((uint32)1+gecko_apihandler_rsp.data.evt_proxy_radio_child_adv_req.data.len)&0xff)<<8)|((uint32)0x17<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+1,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_proxy_radio_child_adv_req.data.len,(uint8*)DATA_DATA,2); \
}
/**  **/
#define gecko_evt_proxy_radio_child_adv_params_req(ADV_INTERVAL_MIN,ADV_INTERVAL_MAX,OWN_ADDRESS_TYPE,ADV_CHANNEL_MAP,SCAN_INTERVAL,SCAN_WINDOW) \
{\
gecko_apihandler_rsp.data.evt_proxy_radio_child_adv_params_req.adv_interval_min=(ADV_INTERVAL_MIN); \
gecko_apihandler_rsp.data.evt_proxy_radio_child_adv_params_req.adv_interval_max=(ADV_INTERVAL_MAX); \
gecko_apihandler_rsp.data.evt_proxy_radio_child_adv_params_req.own_address_type=(OWN_ADDRESS_TYPE); \
gecko_apihandler_rsp.data.evt_proxy_radio_child_adv_params_req.adv_channel_map=(ADV_CHANNEL_MAP); \
gecko_apihandler_rsp.data.evt_proxy_radio_child_adv_params_req.scan_interval=(SCAN_INTERVAL); \
gecko_apihandler_rsp.data.evt_proxy_radio_child_adv_params_req.scan_window=(SCAN_WINDOW); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)10)>>8)))|((((uint32)10)&0xff)<<8)|((uint32)0x17<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+10,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_proxy_radio_test_timer_expired(DUMMY) \
{\
gecko_apihandler_rsp.data.evt_proxy_radio_test_timer_expired.dummy=(DUMMY); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x17<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_proxy_connect(RESULT,HANDLE) \
{\
gecko_apihandler_rsp.data.rsp_mesh_proxy_connect.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_proxy_connect.handle=(HANDLE); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)6)>>8)))|((((uint32)6)&0xff)<<8)|((uint32)0x18<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+6,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_proxy_disconnect(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_proxy_disconnect.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x18<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_proxy_set_filter_type(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_proxy_set_filter_type.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x18<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_proxy_allow(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_proxy_allow.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x18<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_proxy_deny(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_proxy_deny.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x18<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_proxy_connected(HANDLE) \
{\
gecko_apihandler_rsp.data.evt_mesh_proxy_connected.handle=(HANDLE); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)4)>>8)))|((((uint32)4)&0xff)<<8)|((uint32)0x18<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_proxy_disconnected(HANDLE,REASON) \
{\
gecko_apihandler_rsp.data.evt_mesh_proxy_disconnected.handle=(HANDLE); \
gecko_apihandler_rsp.data.evt_mesh_proxy_disconnected.reason=(REASON); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)6)>>8)))|((((uint32)6)&0xff)<<8)|((uint32)0x18<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+6,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_proxy_filter_status(HANDLE,TYPE,COUNT) \
{\
gecko_apihandler_rsp.data.evt_mesh_proxy_filter_status.handle=(HANDLE); \
gecko_apihandler_rsp.data.evt_mesh_proxy_filter_status.type=(TYPE); \
gecko_apihandler_rsp.data.evt_mesh_proxy_filter_status.count=(COUNT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)7)>>8)))|((((uint32)7)&0xff)<<8)|((uint32)0x18<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+7,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_vendor_model_send(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_vendor_model_send.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x19<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_vendor_model_set_publication(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_vendor_model_set_publication.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x19<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_vendor_model_clear_publication(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_vendor_model_clear_publication.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x19<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_vendor_model_publish(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_vendor_model_publish.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x19<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_vendor_model_init(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_vendor_model_init.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x19<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_vendor_model_deinit(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_vendor_model_deinit.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x19<<16)|((uint32)0x5<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_vendor_model_receive(ELEM_INDEX,VENDOR_ID,MODEL_ID,SOURCE_ADDRESS,DESTINATION_ADDRESS,VA_INDEX,APPKEY_INDEX,NONRELAYED,OPCODE,FINAL,PAYLOAD_LEN,PAYLOAD_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.elem_index=(ELEM_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.vendor_id=(VENDOR_ID); \
gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.model_id=(MODEL_ID); \
gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.source_address=(SOURCE_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.destination_address=(DESTINATION_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.va_index=(VA_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.appkey_index=(APPKEY_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.nonrelayed=(NONRELAYED); \
gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.opcode=(OPCODE); \
gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.final=(FINAL); \
gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.payload.len=(PAYLOAD_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)17+gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.payload.len)>>8)))|((((uint32)17+gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.payload.len)&0xff)<<8)|((uint32)0x19<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+17,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.payload.len,(uint8*)PAYLOAD_DATA,1); \
}

/**  **/
#define gecko_evt_mesh_vendor_model_receive_BGBUF(ELEM_INDEX,VENDOR_ID,MODEL_ID,SOURCE_ADDRESS,DESTINATION_ADDRESS,VA_INDEX,APPKEY_INDEX,NONRELAYED,OPCODE,FINAL,PAYLOAD_LEN,PAYLOAD_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.elem_index=(ELEM_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.vendor_id=(VENDOR_ID); \
gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.model_id=(MODEL_ID); \
gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.source_address=(SOURCE_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.destination_address=(DESTINATION_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.va_index=(VA_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.appkey_index=(APPKEY_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.nonrelayed=(NONRELAYED); \
gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.opcode=(OPCODE); \
gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.final=(FINAL); \
gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.payload.len=(PAYLOAD_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)17+gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.payload.len)>>8)))|((((uint32)17+gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.payload.len)&0xff)<<8)|((uint32)0x19<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+17,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_vendor_model_receive.payload.len,(uint8*)PAYLOAD_DATA,2); \
}
/**  **/
#define gecko_rsp_mesh_health_client_get(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_health_client_get.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1a<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_health_client_clear(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_health_client_clear.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1a<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_health_client_test(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_health_client_test.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1a<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_health_client_get_period(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_health_client_get_period.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1a<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_health_client_set_period(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_health_client_set_period.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1a<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_health_client_get_attention(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_health_client_get_attention.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1a<<16)|((uint32)0x5<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_health_client_set_attention(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_health_client_set_attention.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1a<<16)|((uint32)0x6<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_health_client_server_status(RESULT,ELEM_INDEX,CLIENT_ADDRESS,SERVER_ADDRESS,CURRENT,TEST_ID,VENDOR_ID,FAULTS_LEN,FAULTS_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_health_client_server_status.result=(RESULT); \
gecko_apihandler_rsp.data.evt_mesh_health_client_server_status.elem_index=(ELEM_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_health_client_server_status.client_address=(CLIENT_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_health_client_server_status.server_address=(SERVER_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_health_client_server_status.current=(CURRENT); \
gecko_apihandler_rsp.data.evt_mesh_health_client_server_status.test_id=(TEST_ID); \
gecko_apihandler_rsp.data.evt_mesh_health_client_server_status.vendor_id=(VENDOR_ID); \
gecko_apihandler_rsp.data.evt_mesh_health_client_server_status.faults.len=(FAULTS_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)13+gecko_apihandler_rsp.data.evt_mesh_health_client_server_status.faults.len)>>8)))|((((uint32)13+gecko_apihandler_rsp.data.evt_mesh_health_client_server_status.faults.len)&0xff)<<8)|((uint32)0x1a<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+13,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_health_client_server_status.faults.len,(uint8*)FAULTS_DATA,1); \
}

/**  **/
#define gecko_evt_mesh_health_client_server_status_BGBUF(RESULT,ELEM_INDEX,CLIENT_ADDRESS,SERVER_ADDRESS,CURRENT,TEST_ID,VENDOR_ID,FAULTS_LEN,FAULTS_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_health_client_server_status.result=(RESULT); \
gecko_apihandler_rsp.data.evt_mesh_health_client_server_status.elem_index=(ELEM_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_health_client_server_status.client_address=(CLIENT_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_health_client_server_status.server_address=(SERVER_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_health_client_server_status.current=(CURRENT); \
gecko_apihandler_rsp.data.evt_mesh_health_client_server_status.test_id=(TEST_ID); \
gecko_apihandler_rsp.data.evt_mesh_health_client_server_status.vendor_id=(VENDOR_ID); \
gecko_apihandler_rsp.data.evt_mesh_health_client_server_status.faults.len=(FAULTS_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)13+gecko_apihandler_rsp.data.evt_mesh_health_client_server_status.faults.len)>>8)))|((((uint32)13+gecko_apihandler_rsp.data.evt_mesh_health_client_server_status.faults.len)&0xff)<<8)|((uint32)0x1a<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+13,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_health_client_server_status.faults.len,(uint8*)FAULTS_DATA,2); \
}
/**  **/
#define gecko_evt_mesh_health_client_server_status_period(RESULT,ELEM_INDEX,CLIENT_ADDRESS,SERVER_ADDRESS,PERIOD) \
{\
gecko_apihandler_rsp.data.evt_mesh_health_client_server_status_period.result=(RESULT); \
gecko_apihandler_rsp.data.evt_mesh_health_client_server_status_period.elem_index=(ELEM_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_health_client_server_status_period.client_address=(CLIENT_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_health_client_server_status_period.server_address=(SERVER_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_health_client_server_status_period.period=(PERIOD); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)9)>>8)))|((((uint32)9)&0xff)<<8)|((uint32)0x1a<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+9,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_health_client_server_status_attention(RESULT,ELEM_INDEX,CLIENT_ADDRESS,SERVER_ADDRESS,ATTENTION) \
{\
gecko_apihandler_rsp.data.evt_mesh_health_client_server_status_attention.result=(RESULT); \
gecko_apihandler_rsp.data.evt_mesh_health_client_server_status_attention.elem_index=(ELEM_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_health_client_server_status_attention.client_address=(CLIENT_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_health_client_server_status_attention.server_address=(SERVER_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_health_client_server_status_attention.attention=(ATTENTION); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)9)>>8)))|((((uint32)9)&0xff)<<8)|((uint32)0x1a<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+9,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_health_server_set_fault(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_health_server_set_fault.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1b<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_health_server_clear_fault(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_health_server_clear_fault.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1b<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_health_server_test_response(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_health_server_test_response.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1b<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_health_server_attention(ELEM_INDEX,TIMER) \
{\
gecko_apihandler_rsp.data.evt_mesh_health_server_attention.elem_index=(ELEM_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_health_server_attention.timer=(TIMER); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)3)>>8)))|((((uint32)3)&0xff)<<8)|((uint32)0x1b<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_health_server_test_request(ELEM_INDEX,CLIENT_ADDRESS,SERVER_ADDRESS,APPKEY_INDEX,TEST_ID,VENDOR_ID,RESPONSE_REQUIRED) \
{\
gecko_apihandler_rsp.data.evt_mesh_health_server_test_request.elem_index=(ELEM_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_health_server_test_request.client_address=(CLIENT_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_health_server_test_request.server_address=(SERVER_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_health_server_test_request.appkey_index=(APPKEY_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_health_server_test_request.test_id=(TEST_ID); \
gecko_apihandler_rsp.data.evt_mesh_health_server_test_request.vendor_id=(VENDOR_ID); \
gecko_apihandler_rsp.data.evt_mesh_health_server_test_request.response_required=(RESPONSE_REQUIRED); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)12)>>8)))|((((uint32)12)&0xff)<<8)|((uint32)0x1b<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+12,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_srtest_client_init(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_srtest_client_init.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1c<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_srtest_client_deinit(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_srtest_client_deinit.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1c<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_srtest_client_run(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_srtest_client_run.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1c<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_srtest_client_stop(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_srtest_client_stop.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1c<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_srtest_client_status(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_srtest_client_status.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1c<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_srtest_client_statistics(RESULT,DATA_RECEIVED,ACK_SUCCESS,ACK_FAILURE) \
{\
gecko_apihandler_rsp.data.rsp_mesh_srtest_client_statistics.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_srtest_client_statistics.data_received=(DATA_RECEIVED); \
gecko_apihandler_rsp.data.rsp_mesh_srtest_client_statistics.ack_success=(ACK_SUCCESS); \
gecko_apihandler_rsp.data.rsp_mesh_srtest_client_statistics.ack_failure=(ACK_FAILURE); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)14)>>8)))|((((uint32)14)&0xff)<<8)|((uint32)0x1c<<16)|((uint32)0x5<<24); \
gecko_handle_library_packet(4+14,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_srtest_client_server_status(ELEM_INDEX,CLIENT_ADDRESS,SERVER_ADDRESS,APPKEY_INDEX,SIZE,FORCE_SEGMENTATION,RATE,RUN_LENGTH) \
{\
gecko_apihandler_rsp.data.evt_mesh_srtest_client_server_status.elem_index=(ELEM_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_srtest_client_server_status.client_address=(CLIENT_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_srtest_client_server_status.server_address=(SERVER_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_srtest_client_server_status.appkey_index=(APPKEY_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_srtest_client_server_status.size=(SIZE); \
gecko_apihandler_rsp.data.evt_mesh_srtest_client_server_status.force_segmentation=(FORCE_SEGMENTATION); \
gecko_apihandler_rsp.data.evt_mesh_srtest_client_server_status.rate=(RATE); \
gecko_apihandler_rsp.data.evt_mesh_srtest_client_server_status.run_length=(RUN_LENGTH); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)19)>>8)))|((((uint32)19)&0xff)<<8)|((uint32)0x1c<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+19,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_srtest_client_payload_received() \
{\
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)0)>>8)))|((((uint32)0)&0xff)<<8)|((uint32)0x1c<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+0,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_srtest_server_init(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_srtest_server_init.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1d<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_srtest_server_deinit(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_srtest_server_deinit.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1d<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_srtest_server_statistics(RESULT,SEND_SUCCESS,SEND_FAILURE,ACKS_RECEIVED,TR_TIME_MIN,TR_TIME_MAX,TR_TIME_AVG,STALE_ACKS_RECEIVED) \
{\
gecko_apihandler_rsp.data.rsp_mesh_srtest_server_statistics.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_srtest_server_statistics.send_success=(SEND_SUCCESS); \
gecko_apihandler_rsp.data.rsp_mesh_srtest_server_statistics.send_failure=(SEND_FAILURE); \
gecko_apihandler_rsp.data.rsp_mesh_srtest_server_statistics.acks_received=(ACKS_RECEIVED); \
gecko_apihandler_rsp.data.rsp_mesh_srtest_server_statistics.tr_time_min=(TR_TIME_MIN); \
gecko_apihandler_rsp.data.rsp_mesh_srtest_server_statistics.tr_time_max=(TR_TIME_MAX); \
gecko_apihandler_rsp.data.rsp_mesh_srtest_server_statistics.tr_time_avg=(TR_TIME_AVG); \
gecko_apihandler_rsp.data.rsp_mesh_srtest_server_statistics.stale_acks_received=(STALE_ACKS_RECEIVED); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)30)>>8)))|((((uint32)30)&0xff)<<8)|((uint32)0x1d<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+30,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_srtest_server_state_changed(ELEM_INDEX,CLIENT_ADDRESS,SERVER_ADDRESS,APPKEY_INDEX,SIZE,FORCE_SEGMENTATION,RATE,RUN_LENGTH) \
{\
gecko_apihandler_rsp.data.evt_mesh_srtest_server_state_changed.elem_index=(ELEM_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_srtest_server_state_changed.client_address=(CLIENT_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_srtest_server_state_changed.server_address=(SERVER_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_srtest_server_state_changed.appkey_index=(APPKEY_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_srtest_server_state_changed.size=(SIZE); \
gecko_apihandler_rsp.data.evt_mesh_srtest_server_state_changed.force_segmentation=(FORCE_SEGMENTATION); \
gecko_apihandler_rsp.data.evt_mesh_srtest_server_state_changed.rate=(RATE); \
gecko_apihandler_rsp.data.evt_mesh_srtest_server_state_changed.run_length=(RUN_LENGTH); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)17)>>8)))|((((uint32)17)&0xff)<<8)|((uint32)0x1d<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+17,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_srtest_server_run_started(ELEM_INDEX) \
{\
gecko_apihandler_rsp.data.evt_mesh_srtest_server_run_started.elem_index=(ELEM_INDEX); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1d<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_srtest_server_run_ended(ELEM_INDEX) \
{\
gecko_apihandler_rsp.data.evt_mesh_srtest_server_run_ended.elem_index=(ELEM_INDEX); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1d<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_srtest_server_statistics_dump(ELEM_INDEX,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_srtest_server_statistics_dump.elem_index=(ELEM_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_srtest_server_statistics_dump.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.evt_mesh_srtest_server_statistics_dump.data.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.evt_mesh_srtest_server_statistics_dump.data.len)&0xff)<<8)|((uint32)0x1d<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_srtest_server_statistics_dump.data.len,(uint8*)DATA_DATA,1); \
}

/**  **/
#define gecko_evt_mesh_srtest_server_statistics_dump_BGBUF(ELEM_INDEX,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_srtest_server_statistics_dump.elem_index=(ELEM_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_srtest_server_statistics_dump.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.evt_mesh_srtest_server_statistics_dump.data.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.evt_mesh_srtest_server_statistics_dump.data.len)&0xff)<<8)|((uint32)0x1d<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_srtest_server_statistics_dump.data.len,(uint8*)DATA_DATA,2); \
}
/**  **/
#define gecko_evt_mesh_srtest_server_payload_sent() \
{\
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)0)>>8)))|((((uint32)0)&0xff)<<8)|((uint32)0x1d<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+0,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_generic_client_get(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_generic_client_get.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1e<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_generic_client_set(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_generic_client_set.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1e<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_generic_client_publish(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_generic_client_publish.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1e<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_generic_client_get_params(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_generic_client_get_params.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1e<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_generic_client_init(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_generic_client_init.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1e<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_generic_client_server_status(MODEL_ID,ELEM_INDEX,CLIENT_ADDRESS,SERVER_ADDRESS,REMAINING,FLAGS,TYPE,PARAMETERS_LEN,PARAMETERS_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_generic_client_server_status.model_id=(MODEL_ID); \
gecko_apihandler_rsp.data.evt_mesh_generic_client_server_status.elem_index=(ELEM_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_generic_client_server_status.client_address=(CLIENT_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_generic_client_server_status.server_address=(SERVER_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_generic_client_server_status.remaining=(REMAINING); \
gecko_apihandler_rsp.data.evt_mesh_generic_client_server_status.flags=(FLAGS); \
gecko_apihandler_rsp.data.evt_mesh_generic_client_server_status.type=(TYPE); \
gecko_apihandler_rsp.data.evt_mesh_generic_client_server_status.parameters.len=(PARAMETERS_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)16+gecko_apihandler_rsp.data.evt_mesh_generic_client_server_status.parameters.len)>>8)))|((((uint32)16+gecko_apihandler_rsp.data.evt_mesh_generic_client_server_status.parameters.len)&0xff)<<8)|((uint32)0x1e<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+16,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_generic_client_server_status.parameters.len,(uint8*)PARAMETERS_DATA,1); \
}

/**  **/
#define gecko_evt_mesh_generic_client_server_status_BGBUF(MODEL_ID,ELEM_INDEX,CLIENT_ADDRESS,SERVER_ADDRESS,REMAINING,FLAGS,TYPE,PARAMETERS_LEN,PARAMETERS_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_generic_client_server_status.model_id=(MODEL_ID); \
gecko_apihandler_rsp.data.evt_mesh_generic_client_server_status.elem_index=(ELEM_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_generic_client_server_status.client_address=(CLIENT_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_generic_client_server_status.server_address=(SERVER_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_generic_client_server_status.remaining=(REMAINING); \
gecko_apihandler_rsp.data.evt_mesh_generic_client_server_status.flags=(FLAGS); \
gecko_apihandler_rsp.data.evt_mesh_generic_client_server_status.type=(TYPE); \
gecko_apihandler_rsp.data.evt_mesh_generic_client_server_status.parameters.len=(PARAMETERS_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)16+gecko_apihandler_rsp.data.evt_mesh_generic_client_server_status.parameters.len)>>8)))|((((uint32)16+gecko_apihandler_rsp.data.evt_mesh_generic_client_server_status.parameters.len)&0xff)<<8)|((uint32)0x1e<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+16,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_generic_client_server_status.parameters.len,(uint8*)PARAMETERS_DATA,2); \
}
/**  **/
#define gecko_rsp_mesh_generic_server_response(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_generic_server_response.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1f<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_generic_server_update(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_generic_server_update.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1f<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_generic_server_publish(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_generic_server_publish.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1f<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_generic_server_init(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_generic_server_init.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x1f<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_generic_server_client_request(MODEL_ID,ELEM_INDEX,CLIENT_ADDRESS,SERVER_ADDRESS,APPKEY_INDEX,TRANSITION,DELAY,FLAGS,TYPE,PARAMETERS_LEN,PARAMETERS_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_generic_server_client_request.model_id=(MODEL_ID); \
gecko_apihandler_rsp.data.evt_mesh_generic_server_client_request.elem_index=(ELEM_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_generic_server_client_request.client_address=(CLIENT_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_generic_server_client_request.server_address=(SERVER_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_generic_server_client_request.appkey_index=(APPKEY_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_generic_server_client_request.transition=(TRANSITION); \
gecko_apihandler_rsp.data.evt_mesh_generic_server_client_request.delay=(DELAY); \
gecko_apihandler_rsp.data.evt_mesh_generic_server_client_request.flags=(FLAGS); \
gecko_apihandler_rsp.data.evt_mesh_generic_server_client_request.type=(TYPE); \
gecko_apihandler_rsp.data.evt_mesh_generic_server_client_request.parameters.len=(PARAMETERS_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)20+gecko_apihandler_rsp.data.evt_mesh_generic_server_client_request.parameters.len)>>8)))|((((uint32)20+gecko_apihandler_rsp.data.evt_mesh_generic_server_client_request.parameters.len)&0xff)<<8)|((uint32)0x1f<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+20,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_generic_server_client_request.parameters.len,(uint8*)PARAMETERS_DATA,1); \
}

/**  **/
#define gecko_evt_mesh_generic_server_client_request_BGBUF(MODEL_ID,ELEM_INDEX,CLIENT_ADDRESS,SERVER_ADDRESS,APPKEY_INDEX,TRANSITION,DELAY,FLAGS,TYPE,PARAMETERS_LEN,PARAMETERS_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_generic_server_client_request.model_id=(MODEL_ID); \
gecko_apihandler_rsp.data.evt_mesh_generic_server_client_request.elem_index=(ELEM_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_generic_server_client_request.client_address=(CLIENT_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_generic_server_client_request.server_address=(SERVER_ADDRESS); \
gecko_apihandler_rsp.data.evt_mesh_generic_server_client_request.appkey_index=(APPKEY_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_generic_server_client_request.transition=(TRANSITION); \
gecko_apihandler_rsp.data.evt_mesh_generic_server_client_request.delay=(DELAY); \
gecko_apihandler_rsp.data.evt_mesh_generic_server_client_request.flags=(FLAGS); \
gecko_apihandler_rsp.data.evt_mesh_generic_server_client_request.type=(TYPE); \
gecko_apihandler_rsp.data.evt_mesh_generic_server_client_request.parameters.len=(PARAMETERS_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)20+gecko_apihandler_rsp.data.evt_mesh_generic_server_client_request.parameters.len)>>8)))|((((uint32)20+gecko_apihandler_rsp.data.evt_mesh_generic_server_client_request.parameters.len)&0xff)<<8)|((uint32)0x1f<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+20,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_generic_server_client_request.parameters.len,(uint8*)PARAMETERS_DATA,2); \
}
/**  **/
#define gecko_evt_mesh_generic_server_state_changed(MODEL_ID,ELEM_INDEX,REMAINING,TYPE,PARAMETERS_LEN,PARAMETERS_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_generic_server_state_changed.model_id=(MODEL_ID); \
gecko_apihandler_rsp.data.evt_mesh_generic_server_state_changed.elem_index=(ELEM_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_generic_server_state_changed.remaining=(REMAINING); \
gecko_apihandler_rsp.data.evt_mesh_generic_server_state_changed.type=(TYPE); \
gecko_apihandler_rsp.data.evt_mesh_generic_server_state_changed.parameters.len=(PARAMETERS_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)10+gecko_apihandler_rsp.data.evt_mesh_generic_server_state_changed.parameters.len)>>8)))|((((uint32)10+gecko_apihandler_rsp.data.evt_mesh_generic_server_state_changed.parameters.len)&0xff)<<8)|((uint32)0x1f<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+10,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_generic_server_state_changed.parameters.len,(uint8*)PARAMETERS_DATA,1); \
}

/**  **/
#define gecko_evt_mesh_generic_server_state_changed_BGBUF(MODEL_ID,ELEM_INDEX,REMAINING,TYPE,PARAMETERS_LEN,PARAMETERS_DATA) \
{\
gecko_apihandler_rsp.data.evt_mesh_generic_server_state_changed.model_id=(MODEL_ID); \
gecko_apihandler_rsp.data.evt_mesh_generic_server_state_changed.elem_index=(ELEM_INDEX); \
gecko_apihandler_rsp.data.evt_mesh_generic_server_state_changed.remaining=(REMAINING); \
gecko_apihandler_rsp.data.evt_mesh_generic_server_state_changed.type=(TYPE); \
gecko_apihandler_rsp.data.evt_mesh_generic_server_state_changed.parameters.len=(PARAMETERS_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)10+gecko_apihandler_rsp.data.evt_mesh_generic_server_state_changed.parameters.len)>>8)))|((((uint32)10+gecko_apihandler_rsp.data.evt_mesh_generic_server_state_changed.parameters.len)&0xff)<<8)|((uint32)0x1f<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+10,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_mesh_generic_server_state_changed.parameters.len,(uint8*)PARAMETERS_DATA,2); \
}
/**  **/
#define gecko_rsp_coex_set_options(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_coex_set_options.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x20<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_coex_get_counters(RESULT,COUNTERS_LEN,COUNTERS_DATA) \
{\
gecko_apihandler_rsp.data.rsp_coex_get_counters.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_coex_get_counters.counters.len=(COUNTERS_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_coex_get_counters.counters.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_coex_get_counters.counters.len)&0xff)<<8)|((uint32)0x20<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_coex_get_counters.counters.len,(uint8*)COUNTERS_DATA,1); \
}

/**  **/
#define gecko_rsp_coex_get_counters_BGBUF(RESULT,COUNTERS_LEN,COUNTERS_DATA) \
{\
gecko_apihandler_rsp.data.rsp_coex_get_counters.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_coex_get_counters.counters.len=(COUNTERS_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_coex_get_counters.counters.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_coex_get_counters.counters.len)&0xff)<<8)|((uint32)0x20<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_coex_get_counters.counters.len,(uint8*)COUNTERS_DATA,2); \
}
/**  **/
#define gecko_rsp_mesh_test_get_nettx(RESULT,COUNT,INTERVAL) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_get_nettx.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_test_get_nettx.count=(COUNT); \
gecko_apihandler_rsp.data.rsp_mesh_test_get_nettx.interval=(INTERVAL); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)4)>>8)))|((((uint32)4)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_set_nettx(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_set_nettx.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_get_relay(RESULT,ENABLED,COUNT,INTERVAL) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_get_relay.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_test_get_relay.enabled=(ENABLED); \
gecko_apihandler_rsp.data.rsp_mesh_test_get_relay.count=(COUNT); \
gecko_apihandler_rsp.data.rsp_mesh_test_get_relay.interval=(INTERVAL); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)5)>>8)))|((((uint32)5)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+5,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_set_relay(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_set_relay.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_set_adv_scan_params(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_set_adv_scan_params.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_set_ivupdate_test_mode(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_set_ivupdate_test_mode.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x5<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_get_ivupdate_test_mode(RESULT,MODE) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_get_ivupdate_test_mode.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_test_get_ivupdate_test_mode.mode=(MODE); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3)>>8)))|((((uint32)3)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x6<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_set_segment_send_delay(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_set_segment_send_delay.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x7<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_set_ivupdate_state(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_set_ivupdate_state.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x8<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_send_beacons(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_send_beacons.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x9<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_bind_local_model_app(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_bind_local_model_app.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0xa<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_unbind_local_model_app(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_unbind_local_model_app.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0xb<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_add_local_model_sub(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_add_local_model_sub.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0xc<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_del_local_model_sub(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_del_local_model_sub.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0xd<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_add_local_model_sub_va(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_add_local_model_sub_va.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0xe<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_del_local_model_sub_va(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_del_local_model_sub_va.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0xf<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_get_local_model_sub(RESULT,ADDRESSES_LEN,ADDRESSES_DATA) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_get_local_model_sub.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_test_get_local_model_sub.addresses.len=(ADDRESSES_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_test_get_local_model_sub.addresses.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_test_get_local_model_sub.addresses.len)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x10<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_mesh_test_get_local_model_sub.addresses.len,(uint8*)ADDRESSES_DATA,1); \
}

/**  **/
#define gecko_rsp_mesh_test_get_local_model_sub_BGBUF(RESULT,ADDRESSES_LEN,ADDRESSES_DATA) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_get_local_model_sub.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_test_get_local_model_sub.addresses.len=(ADDRESSES_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_test_get_local_model_sub.addresses.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_test_get_local_model_sub.addresses.len)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x10<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_mesh_test_get_local_model_sub.addresses.len,(uint8*)ADDRESSES_DATA,2); \
}
/**  **/
#define gecko_rsp_mesh_test_set_local_model_pub(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_set_local_model_pub.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x11<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_set_local_model_pub_va(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_set_local_model_pub_va.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x12<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_get_local_model_pub(RESULT,APPKEY_INDEX,PUB_ADDRESS,TTL,PERIOD,RETRANS,CREDENTIALS) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_get_local_model_pub.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_test_get_local_model_pub.appkey_index=(APPKEY_INDEX); \
gecko_apihandler_rsp.data.rsp_mesh_test_get_local_model_pub.pub_address=(PUB_ADDRESS); \
gecko_apihandler_rsp.data.rsp_mesh_test_get_local_model_pub.ttl=(TTL); \
gecko_apihandler_rsp.data.rsp_mesh_test_get_local_model_pub.period=(PERIOD); \
gecko_apihandler_rsp.data.rsp_mesh_test_get_local_model_pub.retrans=(RETRANS); \
gecko_apihandler_rsp.data.rsp_mesh_test_get_local_model_pub.credentials=(CREDENTIALS); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)10)>>8)))|((((uint32)10)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x13<<24); \
gecko_handle_library_packet(4+10,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_set_local_heartbeat_subscription(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_set_local_heartbeat_subscription.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x14<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_get_local_heartbeat_subscription(RESULT,COUNT,HOP_MIN,HOP_MAX) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_get_local_heartbeat_subscription.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_test_get_local_heartbeat_subscription.count=(COUNT); \
gecko_apihandler_rsp.data.rsp_mesh_test_get_local_heartbeat_subscription.hop_min=(HOP_MIN); \
gecko_apihandler_rsp.data.rsp_mesh_test_get_local_heartbeat_subscription.hop_max=(HOP_MAX); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)6)>>8)))|((((uint32)6)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x15<<24); \
gecko_handle_library_packet(4+6,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_get_local_heartbeat_publication(RESULT,PUBLICATION_ADDRESS,COUNT,PERIOD_LOG,TTL,FEATURES,PUBLICATION_NETKEY_INDEX) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_get_local_heartbeat_publication.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_test_get_local_heartbeat_publication.publication_address=(PUBLICATION_ADDRESS); \
gecko_apihandler_rsp.data.rsp_mesh_test_get_local_heartbeat_publication.count=(COUNT); \
gecko_apihandler_rsp.data.rsp_mesh_test_get_local_heartbeat_publication.period_log=(PERIOD_LOG); \
gecko_apihandler_rsp.data.rsp_mesh_test_get_local_heartbeat_publication.ttl=(TTL); \
gecko_apihandler_rsp.data.rsp_mesh_test_get_local_heartbeat_publication.features=(FEATURES); \
gecko_apihandler_rsp.data.rsp_mesh_test_get_local_heartbeat_publication.publication_netkey_index=(PUBLICATION_NETKEY_INDEX); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)11)>>8)))|((((uint32)11)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x16<<24); \
gecko_handle_library_packet(4+11,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_set_local_heartbeat_publication(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_set_local_heartbeat_publication.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x17<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_set_local_config(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_set_local_config.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x18<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_get_local_config(RESULT,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_get_local_config.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_test_get_local_config.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_test_get_local_config.data.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_test_get_local_config.data.len)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x19<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_mesh_test_get_local_config.data.len,(uint8*)DATA_DATA,1); \
}

/**  **/
#define gecko_rsp_mesh_test_get_local_config_BGBUF(RESULT,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_get_local_config.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_test_get_local_config.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_test_get_local_config.data.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_mesh_test_get_local_config.data.len)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x19<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_mesh_test_get_local_config.data.len,(uint8*)DATA_DATA,2); \
}
/**  **/
#define gecko_rsp_mesh_test_add_local_key(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_add_local_key.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x1a<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_del_local_key(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_del_local_key.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x1b<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_update_local_key(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_update_local_key.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x1c<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_set_sar_config(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_set_sar_config.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x1d<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_test_get_element_seqnum(RESULT,SEQNUM) \
{\
gecko_apihandler_rsp.data.rsp_mesh_test_get_element_seqnum.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_mesh_test_get_element_seqnum.seqnum=(SEQNUM); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)6)>>8)))|((((uint32)6)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x1e<<24); \
gecko_handle_library_packet(4+6,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_test_local_heartbeat_subscription_complete(COUNT,HOP_MIN,HOP_MAX) \
{\
gecko_apihandler_rsp.data.evt_mesh_test_local_heartbeat_subscription_complete.count=(COUNT); \
gecko_apihandler_rsp.data.evt_mesh_test_local_heartbeat_subscription_complete.hop_min=(HOP_MIN); \
gecko_apihandler_rsp.data.evt_mesh_test_local_heartbeat_subscription_complete.hop_max=(HOP_MAX); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)4)>>8)))|((((uint32)4)&0xff)<<8)|((uint32)0x22<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+4,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_lpn_init(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_lpn_init.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x23<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_lpn_deinit(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_lpn_deinit.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x23<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_lpn_configure(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_lpn_configure.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x23<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_lpn_establish_friendship(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_lpn_establish_friendship.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x23<<16)|((uint32)0x3<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_lpn_poll(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_lpn_poll.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x23<<16)|((uint32)0x4<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_lpn_terminate_friendship(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_lpn_terminate_friendship.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x23<<16)|((uint32)0x5<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_lpn_friendship_established(FRIEND_ADDRESS) \
{\
gecko_apihandler_rsp.data.evt_mesh_lpn_friendship_established.friend_address=(FRIEND_ADDRESS); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x23<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_lpn_friendship_failed(REASON) \
{\
gecko_apihandler_rsp.data.evt_mesh_lpn_friendship_failed.reason=(REASON); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x23<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_lpn_friendship_terminated(REASON) \
{\
gecko_apihandler_rsp.data.evt_mesh_lpn_friendship_terminated.reason=(REASON); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x23<<16)|((uint32)0x2<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_friend_init(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_friend_init.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x24<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_mesh_friend_deinit(RESULT) \
{\
gecko_apihandler_rsp.data.rsp_mesh_friend_deinit.result=(RESULT); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x24<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_friend_friendship_established(LPN_ADDRESS) \
{\
gecko_apihandler_rsp.data.evt_mesh_friend_friendship_established.lpn_address=(LPN_ADDRESS); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x24<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_evt_mesh_friend_friendship_terminated(REASON) \
{\
gecko_apihandler_rsp.data.evt_mesh_friend_friendship_terminated.reason=(REASON); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)2)>>8)))|((((uint32)2)&0xff)<<8)|((uint32)0x24<<16)|((uint32)0x1<<24); \
gecko_handle_library_packet(4+2,(uint8*)&gecko_apihandler_rsp,0,(uint8*)NULL,1); \
}

/**  **/
#define gecko_rsp_user_message_to_target(RESULT,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.rsp_user_message_to_target.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_user_message_to_target.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_user_message_to_target.data.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_user_message_to_target.data.len)&0xff)<<8)|((uint32)0xff<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_user_message_to_target.data.len,(uint8*)DATA_DATA,1); \
}

/**  **/
#define gecko_rsp_user_message_to_target_BGBUF(RESULT,DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.rsp_user_message_to_target.result=(RESULT); \
gecko_apihandler_rsp.data.rsp_user_message_to_target.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_rsp|gecko_dev_type_gecko|(((uint32)3+gecko_apihandler_rsp.data.rsp_user_message_to_target.data.len)>>8)))|((((uint32)3+gecko_apihandler_rsp.data.rsp_user_message_to_target.data.len)&0xff)<<8)|((uint32)0xff<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+3,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.rsp_user_message_to_target.data.len,(uint8*)DATA_DATA,2); \
}
/**  **/
#define gecko_evt_user_message_to_host(DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_user_message_to_host.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)1+gecko_apihandler_rsp.data.evt_user_message_to_host.data.len)>>8)))|((((uint32)1+gecko_apihandler_rsp.data.evt_user_message_to_host.data.len)&0xff)<<8)|((uint32)0xff<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+1,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_user_message_to_host.data.len,(uint8*)DATA_DATA,1); \
}

/**  **/
#define gecko_evt_user_message_to_host_BGBUF(DATA_LEN,DATA_DATA) \
{\
gecko_apihandler_rsp.data.evt_user_message_to_host.data.len=(DATA_LEN); \
gecko_apihandler_rsp.header=(((uint32)gecko_msg_type_evt|gecko_dev_type_gecko|(((uint32)1+gecko_apihandler_rsp.data.evt_user_message_to_host.data.len)>>8)))|((((uint32)1+gecko_apihandler_rsp.data.evt_user_message_to_host.data.len)&0xff)<<8)|((uint32)0xff<<16)|((uint32)0x0<<24); \
gecko_handle_library_packet(4+1,(uint8*)&gecko_apihandler_rsp,gecko_apihandler_rsp.data.evt_user_message_to_host.data.len,(uint8*)DATA_DATA,2); \
}

void gecko_default(const void*); 

#ifdef __cplusplus
}
#endif

#endif
