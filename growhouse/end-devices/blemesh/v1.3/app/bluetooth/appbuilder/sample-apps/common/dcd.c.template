/*****************************************************************************
 *
 *  BT Mesh Device Composition Data
 *
 *  Autogenerated file, do not edit
 *
 ****************************************************************************/
 
#include <stddef.h>
#include <stdint.h>
#include "mesh_memory_config.h"
#include "mesh_sizes.h"
#include "mesh_app_memory_config.h"


{%- macro u8tohex(val) %}
{{ "0x%02x"|format(val.__and__(255)) }}
{%- endmacro %}

{%- macro u16toa(val) %}
{{ "0x%02x, 0x%02x"|format(val.__and__(255), val.__rshift__(8)) }}
{%- endmacro %}

{%- macro u16tohex(val) %}
{{ "0x%04x"|format(val) }}
{%- endmacro %}

{%- macro u32toa(val) %}
{{ "0x%02x, 0x%02x, 0x%02x, 0x%02x"|format(val.__and__(255), val.__rshift__(8).__and__(255), val.__rshift__(16).__and__(255), val.__rshift__(24)) }}
{%- endmacro %}

{% set dcd = context["BT_MESH_CONFIG"] %}
const uint8_t __mesh_dcd[] = {
    {{ u16toa(dcd["Composition Data"]["CID"]|int(base=16)) }}, /* Company ID = {{ u16tohex(dcd["Composition Data"]["CID"]|int(base=16)) }} */
    {{ u16toa(dcd["Composition Data"]["PID"]|int(base=16)) }}, /* Product ID = {{ u16tohex(dcd["Composition Data"]["PID"]|int(base=16)) }} */
    {{ u16toa(dcd["Composition Data"]["VID"]|int(base=16)) }}, /* Version Number = {{ u16tohex(dcd["Composition Data"]["VID"]|int(base=16)) }} */
    {{ u16toa(dcd["Composition Data"]["CRPL"]|int(base=16)) }}, /* Capacity of Replay Protection List = {{ u16tohex(dcd["Composition Data"]["CRPL"]|int(base=16)) }} */
    {{ u16toa(dcd["Composition Data"]["Features"]|int(base=16)) }}, /* Features Bitmask = {{ u16tohex(dcd["Composition Data"]["Features"]|int(base=16)) }} */
{% for elem in dcd["Composition Data"]["Elements"] %}
    /* Begin {{ elem["Name"] }} */
        {{ u16toa(elem["Loc"]|int(base=16)) }}, /* Location = {{ u16tohex(elem["Loc"]|int(base=16)) }} */
        {{ u8tohex(elem["NumS"]|int(base=10)) }}, /* Number of SIG Models = {{ u8tohex(elem["NumS"]|int(base=10)) }} */
        {{ u8tohex(elem["NumV"]|int(base=10)) }}, /* Number of Vendor Models = {{ u8tohex(elem["NumV"]|int(base=10)) }} */
        /* Begin SIG Models */
  {% for model in elem["SIG Models"] %}
    {% if loop.index % 2 %}
        {{ u16toa(model|int(base=16)) }},
    {%- else %} /* {{ model }} */
    {% endif %}
  {% endfor %}
        /* End SIG Models */
        /* Begin Vendor Models */
  {% for model in elem["Vendor Models"] %}
    {% if loop.index % 2 %}
        {{ u32toa(model|int(base=16)) }},
    {%- else %} /* {{ model }} */
    {% endif %}
  {% endfor %}
        /* End Vendor Models */
    /* End {{ elem["Name"] }} */
{% endfor %}
};

const size_t __mesh_dcd_len = sizeof(__mesh_dcd);
const uint8_t *__mesh_dcd_ptr = __mesh_dcd;

const mesh_memory_config_t __mesh_memory_config = {
  .max_elements = MESH_CFG_MAX_ELEMENTS,
  .max_models = MESH_CFG_MAX_MODELS,
  .max_net_keys = MESH_CFG_MAX_NETKEYS,
  .max_appkeys = MESH_CFG_MAX_APPKEYS,
  .max_devkeys = MESH_CFG_MAX_DEVKEYS,
  .max_friendships = MESH_CFG_MAX_FRIENDSHIPS,
  .max_app_binds = MESH_CFG_MAX_APP_BINDS,
  .max_subscriptions = MESH_CFG_MAX_SUBSCRIPTIONS,
  .max_foundation_model_commands = MESH_CFG_MAX_FOUNDATION_CLIENT_CMDS,
  .net_cache_size = MESH_CFG_NET_CACHE_SIZE,
  .replay_size = MESH_CFG_RPL_SIZE,
  .max_send_segs = MESH_CFG_MAX_SEND_SEGS,
  .max_recv_segs = MESH_CFG_MAX_RECV_SEGS,
  .max_virtual_addresses = MESH_CFG_MAX_VAS,
  .max_provision_sessions = MESH_CFG_MAX_PROV_SESSIONS,
  .max_provision_bearers = MESH_CFG_MAX_PROV_BEARERS,
  .max_gatt_connections = MESH_CFG_MAX_GATT_CONNECTIONS,
  .gatt_txqueue_size = MESH_CFG_GATT_TXQ_SIZE,
  .provisioner_max_ddb_entries = MESH_CFG_MAX_PROVISIONED_DEVICES,
  .provisioner_max_node_net_keys = MESH_CFG_MAX_PROVISIONED_DEVICE_NETKEYS,
  .pstore_write_interval_elem_seq = 65536,
  .friend_max_total_cache = MESH_CFG_FRIEND_MAX_TOTAL_CACHE,
  .friend_max_single_cache = MESH_CFG_FRIEND_MAX_SINGLE_CACHE,
  .friend_max_subs_list = MESH_CFG_FRIEND_MAX_SUBS_LIST
};
