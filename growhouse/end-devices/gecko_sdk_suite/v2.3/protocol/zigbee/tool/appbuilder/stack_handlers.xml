<?xml version="1.0"?>
<callback>

  <!-- SOC handlers -->
  <function id="POLL_COMPLETE"
            name="emberPollCompleteHandler"
            returnType="void"
            stackMacro="EMBER_APPLICATION_HAS_POLL_COMPLETE_HANDLER"
            consumed="false"
            platformType="soc">
    <description>
This is called by the stack when a data poll to the parent is complete. See stack documentation for more information.
    </description>
    <arg name="status"
         type="EmberStatus"
         description="Ember status value." />
    <codeForStub />
  </function>

  <function id="MAC_PASSTHROUGH" name="emberMacPassthroughMessageHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_MAC_PASSTHROUGH_HANDLER" consumed="false" platformType="soc">
    <description>
      This is called by stack when an interpan message is received.
    </description>
    <arg name="messageType"
         type="EmberMacPassthroughType"
         description="The type of interpan message being received"/>
    <arg name="message"
         type="EmberMessageBuffer"
         description="The interpan message"/>
    <codeForStub/>
  </function>

  <function id="MAC_FILTER_MATCH_MESSAGE" name="emberMacFilterMatchMessageHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_MAC_FILTER_MATCH_MESSAGE_HANDLER" consumed="false" platformType="soc">
    <description>
      This function is called when the stack has received a raw MAC message that has matched one of the application's configured MAC filters.
    </description>
    <arg name="macFilterMatchStruct" type="const EmberMacFilterMatchStruct *" description="This is a pointer to a structure containing information about the matching message, including the index of the filter that was matched, and the actual data of the message." />
    <codeForStub />
  </function>

  <function id="POLL" name="emberPollHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_POLL_HANDLER" consumed="false" platformType="soc">
    <description>
      This is called by stack when poll is initiated. See stack documentation for more information.
    </description>
    <arg name="childId"
         type="EmberNodeId"
         description="The ID of the child that is requesting data"/>
    <arg name="transmitExpected"
         type="boolean"
         description="TRUE if the child is expecting an application supplied data message"/>
    <codeForStub/>
  </function>

  <function id="INCOMING_ROUTE_ERROR_HANDLER" name="emberIncomingRouteErrorHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_INCOMING_ROUTE_ERROR_HANDLER" consumed="false" platformType="soc">
     <description>
       This is called by the stack to notify the application that a route error message has been received.
     </description>
     <arg name="status" type="EmberStatus" description="The type of route error."/>
     <arg name="target" type="EmberNodeId" description="The node ID associated with the error.  Depending on the error code this may be either originator of the error message or the node ID of the destination that could not be reached."/>
     <codeForStub>
emberAfPushCallbackNetworkIndex();
emberAfPopNetworkIndex();
     </codeForStub>
   </function>

  <function id="INCOMING_BOOTLOAD_MESSAGE_HANDLER" name="emberIncomingBootloadMessageHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_BOOTLOAD_HANDLERS">
    <description>
      This is called when the stack receives an incoming Ember bootload message.
    </description>
    <arg name="longId" type="EmberEUI64" description="The sender of the message"/>
    <arg name="message" type="EmberMessageBuffer" description="The buffer containing the message data."/>
    <codeForStub/>
  </function>

  <function id="BOOTLOAD_TRANSMIT_COMPLETE_HANDLER" name="emberBootloadTransmitCompleteHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_BOOTLOAD_HANDLERS">
    <description>
      This is called when the stack has the result of an attempt to send an Ember bootload message.
    </description>
    <arg name="message" type="EmberMessageBuffer" description="The buffer containing the message data that was sent."/>
    <arg name="status"  type="EmberStatus" description="The message send result"/>
    <codeForStub/>
  </function>

  <function id="COUNTER_HANDLER" name="emberCounterHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_COUNTER_HANDLER">
    <description>
      This is called when a certain type of stack event occurs
    </description>
    <arg name="type" type="EmberCounterType" description="The type of event that occured"/>
    <arg name="data" type="EmberCounterInfo" description="Counter specific additional info"/>
    <codeForStub/>
  </function>

  <function id="EMBER_COUNTER_ROLLOVER_HANDLER" name="emberCounterRolloverHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_COUNTER_ROLLOVER_HANDLER">
    <description>
      This is called when a counter exceeds its threshold
    </description>
    <arg name="type" type="EmberCounterType" description="The type of event that occured"/>
    <codeForStub/>
  </function>

  <function id="RTOS_IDLE_HANDLER" 
            name="emberRtosIdleHandler" 
            returnType="bool" 
            stackMacro="EMBER_APPLICATION_HAS_RTOS_IDLE_HANDLER" 
            platformType="soc">
    <description>
      This is called when the stack is about to idle.
    </description>
    <arg name="idleTimeMs" type="uint32_t*" description="The allowed idle time in milliseconds"/>
    <codeForStub>
      return false;
    </codeForStub>
  </function>

  <function id="RTOS_STACK_WAKEUP_ISR_HANDLER" 
            name="emberRtosStackWakeupIsrHandler" 
            returnType="void" 
            stackMacro="EMBER_APPLICATION_HAS_RTOS_STACK_WAKEUP_ISR_HANDLER" 
            platformType="soc">
    <description>
      This is called when from ISR context when the stack needs to be woken up to do some processing
    </description>
    <codeForStub/>
  </function>

  <function id="INCOMING_COMMAND_HANDLER"
            name="emberIncomingCommandHandler"
            returnType="void"
            stackMacro="EMBER_APPLICATION_HAS_INCOMING_COMMAND_HANDLER"
            consumed="false"
            platformType="soc">
    <description>
        This is called when the stack receives a command that is meant for one of the protocol layers specified in ::EmberZigbeeCommandType. The implementation can get a flat buffer of bytes representing the command byte plus the command payload by calling ::emberCopyFromLinkedBuffers() with a contents array big enough to hold the command payload.
    </description>
    <arg
        name="commandType"
        type="EmberZigbeeCommandType"
        description="The type of command received." />
    <arg
        name="commandBuffer"
        type="EmberMessageBuffer"
        description="The ::EmberMessageBuffer for the command payload." />
    <arg
        name="indexOfCommand"
        type="int8u"
        description="The starting index of the command data. This means the first byte will be the command byte and the following bytes will be the command payload." />
    <arg
        name="data"
        type="void *"
        description="This is a pointer to auxillary data for the command. ZDO commands pass the ::EmberApsFrame associated with the packet here. Otherwise, this value is NULL." />
  </function>

  <function id="OUTGOING_COMMAND_HANDLER"
            name="emberOutgoingCommandHandler"
            returnType="void"
            stackMacro="EMBER_APPLICATION_HAS_OUTGOING_COMMAND_HANDLER"
            consumed="false"
            platformType="soc">
    <description>
        This is called when the stack is preparing to send a command from one of the protocol layers specified in ::EmberZigbeeCommandType. The implementation can get a flat buffer of bytes representing the command byte plus the command payload by calling ::emberCopyFromLinkedBuffers() with a contents array big enough to hold the command payload.
    </description>
    <arg
        name="commandType"
        type="EmberZigbeeCommandType"
        description="The type of command being sent." />
    <arg
        name="commandBuffer"
        type="EmberMessageBuffer"
        description="The ::EmberMessageBuffer for the command payload." />
    <arg
        name="indexOfCommand"
        type="int8u"
        description="The starting index of the command data. This means the first byte will be the command byte and the following bytes will be the command payload." />
    <arg
        name="data"
        type="void *"
        description="This is a pointer to auxillary data for the command, which may be used to pass additional flags and data between the stack and the callback implementation. Otherwise, this value is NULL." />
  </function>

  <function id="ZLL_ADDRESS_ASSIGNMENT_HANDLER" name="emberZllAddressAssignmentHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_ZLL_ADDRESS_ASSIGNMENT_HANDLER">
    <description>
      This call is fired when network and group addresses are assigned to a remote mode in a network start or network join request.
    </description>
    <arg name="addressInfo" type="const EmberZllAddressAssignment*" description="Address assignment information"/>
    <codeForStub/>
  </function>

  <function id="ZLL_NETWORK_FOUND_HANDLER" name="emberZllNetworkFoundHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_ZLL_NETWORK_FOUND_HANDLER">
    <description>
      This call is fired when a ZLL network scan finds a ZLL network.
    </description>
    <arg name="networkInfo" type="const EmberZllNetwork*" description="Zigbee and ZLL specific information about the discovered network."/>
    <arg name="deviceInfo" type="const EmberZllDeviceInfoRecord*" description="Device specific info. This pointer may be NULL, indicating the device has either 0 sub-devices, or more than 1 sub-devices."/>
    <codeForStub/>
  </function>

  <function id="ZLL_SCAN_COMPLETE_HANDLER" name="emberZllScanCompleteHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_ZLL_SCAN_COMPLETE_HANDLER">
    <description>
      This call is fired when a ZLL network scan is complete.
    </description>
    <arg name="status" type="EmberStatus" description="The result of the network scan operation"/>
    <codeForStub/>
  </function>

  <function id="ZLL_TOUCH_LINK_TARGET_HANDLER" name="emberZllTouchLinkTargetHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_ZLL_TOUCH_LINK_TARGET_HANDLER">
    <description>
      This call is fired when the device is a target of a touch link.
    </description>
    <arg name="networkInfo" type="const EmberZllNetwork*" description="Zigbee and ZLL specific information about the initiator"/>
    <codeForStub/>
  </function>

  <function id="GP_EP_INCOMING_MESSAGE_HANDLER" name="emberGpepIncomingMessageHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_GP_EP_HANDLER">
    <description>
      A callback invoked by the GP stub when in incoming GPDF has been received
    </description>
    <arg name="status" type="EmberStatus" />
    <arg name="lqi" type="int8u" />
    <arg name="sequenceNumber" type="int8u" />
    <arg name="addr" type="EmberGpAddress" />
    <arg name="gpdfSecurityLevel" type="EmberGpSecurityLevel" />
    <arg name="autoCommissioning" type="boolean" />
    <arg name="rxAfterTx" type="boolean" />
    <arg name="gpdSecurityFrameCounter" type="int32u" />
    <arg name="gpdCommandId" type="int8u" />
    <arg name="gpdCommandPayload" type="int8u" />
    <arg name="mic" type="int32u" />
  </function>

  <function id="CALCULATE_SMACS_HANDLER" name="emberCalculateSmacsHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_CALCULATE_SMACS_HANDLER" >
    <description>
      This function is an application callback that must be defined when using CBKE.  It is called when the shared secret generation is complete and the link key and SMACs have been derived.  The link key is stored in a temporary location until the application decides to store or discard the key by calling ::emberClearTemporaryDataMaybeStoreLinkKey().
    </description>
    <arg name="status" type="EmberStatus" description="This is the ::EmberStatus value indicating the success or failure of the operation." />
    <arg name="initiatorSmac" type="EmberSmacData*" description="This is a pointer to the ::EmberSmacData structure to the initiator's version of the SMAC." />
    <arg name="responderSmac" type="EmberSmacData*" description="This is a pointer to the ::EmberSmacData structure to the responder's version of the SMAC." />
    <codeForStub />
  </function>
  <function id="GENERATE_CBKE_KEYS_HANDLER" name="emberGenerateCbkeKeysHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_GENERATE_CBKE_KEYS_HANDLER" >
    <description>
      This function is an application callback that must be defined when using CBKE.  It is called when the ephemeral key generation operation is complete.  The newly generated public key is passed back to the application to be sent to the CBKE partner over-the-air.  Internally the stack saves the public and private key pair until it the function ::emberClearTemporaryDataMaybeStoreLinkKey() is called by the application.
    </description>
    <arg name="status" type="EmberStatus" description="This is the ::EmberStatus value indicating the success or failure of the operation." />
    <arg name="ephemeralPublicKey" type="EmberPublicKeyData*" description="A pointer to an ::EmberPublicKeyData structure containing the newly generated public key." />
    <codeForStub />
  </function>
  <function id="CALCULATE_SMACS_HANDLER_283K1" name="emberCalculateSmacsHandler283k1" returnType="void" stackMacro="EMBER_APPLICATION_HAS_CALCULATE_SMACS_HANDLER_283K1" >
    <description>
      This function is an application callback that must be defined when using CBKE.  It is called when the shared secret generation is complete and the link key and SMACs have been derived.  The link key is stored in a temporary location until the application decides to store or discard the key by calling ::emberClearTemporaryDataMaybeStoreLinkKey283k1().
    </description>
    <arg name="status" type="EmberStatus" description="This is the ::EmberStatus value indicating the success or failure of the operation." />
    <arg name="initiatorSmac" type="EmberSmacData*" description="This is a pointer to the ::EmberSmacData structure to the initiator's version of the SMAC." />
    <arg name="responderSmac" type="EmberSmacData*" description="This is a pointer to the ::EmberSmacData structure to the responder's version of the SMAC." />
    <codeForStub />
  </function>
  <function id="GENERATE_CBKE_KEYS_HANDLER_283K1" name="emberGenerateCbkeKeysHandler283k1" returnType="void" stackMacro="EMBER_APPLICATION_HAS_GENERATE_CBKE_KEYS_HANDLER_283K1" >
    <description>
      This function is an application callback that must be defined when using the CBKE 283k1 Library.  It is called when the ephemeral key generation operation is complete.  The newly generated public key is passed back to the application to be sent to the CBKE partner over-the-air.  Internally the stack saves the public and private key pair until it the function ::emberClearTemporaryDataMaybeStoreLinkKey283k1() is called by the application.
    </description>
    <arg name="status" type="EmberStatus" description="This is the ::EmberStatus value indicating the success or failure of the operation." />
    <arg name="ephemeralPublicKey" type="EmberPublicKeyData*" description="A pointer to an ::EmberPublicKeyData structure containing the newly generated public key." />
    <codeForStub />
  </function>
  <function id="DSA_SIGN_HANDLER" name="emberDsaSignHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_DSA_SIGN_HANDLER" >
    <description>
      This function is an application callback that must be defined when using CBKE.  This callback is provided to the application to let it know that the ECC operations have completed and the radio has been turned back on.  When using the sign-and-send option of the ::EmberApsFrame, ::EMBER_APS_OPTION_DSA_SIGN, the handler will NOT return the complete signed message.  This callback is merely informative.  If ::emberDsaSign() has been called, the message plus signature will be returned to the caller and it must be sent separately by one of the message send primitives (such as ::emberSendUnicast()).
    </description>
    <arg name="status" type="EmberStatus" description="This is the ::EmberStatus value indicating the success or failure of the operation." />
    <arg name="signedMessage" type="EmberMessageBuffer" description="This is the ::EmberMessageBuffer indicating the newly signed message, if ::emberDsaSign() was called.  If message was signed using ::EMBER_APS_OPTION_DSA_SIGN then this will be ::EMBER_NULL_MESSAGE_BUFFER." />
    <codeForStub />
  </function>
  <function id="DSA_VERIFY_HANDLER" name="emberDsaVerifyHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_DSA_VERIFY_HANDLER" >
    <description>
This callback is executed by the stack when the DSA verification has completed and has a result.  If the result is EMBER_SUCCESS, the signature is valid.  If the result is EMBER_SIGNATURE_VERIFY_FAILURE then the signature is invalid.  If the result is anything else then the signature verify operation failed and the validity is unknown.
    </description>
    <arg name="status" type="EmberStatus" description="This is the result of the DSA verification" />
    <codeForStub />
  </function>
  <function id="DUTY_CYCLE_HANDLER" name="emberDutyCycleHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_DUTY_CYCLE_HANDLER" >
    <description>
      This callback is invoked by the stack when the duty cycle state changes.
    </description>
    <arg name="channelPage" type="int8u" description="The channel page whose duty cycle state has changed." />
    <arg name="channel" type="int8u" description="The channel number whose duty cycle state has changed." />
    <arg name="state" type="EmberDutyCycleState" description="This is the ::EmberDutyCycleState state indicating the current duty cycle state" />
    <codeForStub />
  </function>
  <function id="SWITCH_NETWORK_KEY_HANDLER" name="emberSwitchNetworkKeyHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_SWITCH_KEY_HANDLER" >
    <description>
      This callback is invoked by the stack to inform the application that the Network Key has been updated and the node has been switched over to use the new key. The actual key being used is not passed up, but the sequence number is.
    </description>
    <arg name="sequenceNumber" type="int8u" description="The sequence number of the new network key." />
    <codeForStub />
  </function>
  <function id="CHILD_JOIN_HANDLER" name="emberChildJoinHandler" returnType="void" stackMacro="EMBER_APPLICATION_HAS_CHILD_JOIN_HANDLER" >
    <description>
      This callback is called by the stack when a child joins or leaves. 'Joining' is true if the child is joining and false if leaving. The index is the same as the value that should be passed to emberGetChildData() to get this child's data. Note that if the child is leaving, emberGetChildData() will return EMBER_NOT_JOINED if called with this index.
    </description>
    <arg name="index" type="int8u" description="The index of the child of interest." />
    <arg name="joining" type="boolean" description="True if the child is joining, false if the child is leaving." />
    <codeForStub />
  </function>

<!-- Ezsp handlers -->
  <function id="EZSP_POLL_COMPLETE"
            name="ezspPollCompleteHandler"
            returnType="void"
            stackMacro="EZSP_APPLICATION_HAS_POLL_COMPLETE_HANDLER"
            consumed="false"
            platformType="host">
    <description>
This is called by the EZSP when a data poll to the parent is complete. See EZSP documentation for more information.
    </description>
    <arg name="status"
         type="EmberStatus"
         description="Ember status value." />
    <codeForStub />
  </function>

  <function id="EZSP_POLL"
            name="ezspPollHandler"
            returnType="void"
            stackMacro="EZSP_APPLICATION_HAS_POLL_HANDLER"
            consumed="false"
            platformType="host">
    <description>
      This is called by EZSP when poll is initiated. See EZSP documentation for more information.
    </description>
    <arg name="childId"
         type="EmberNodeId"
         description="The ID of the child that is requesting data"/>
    <codeForStub/>
  </function>
  <function id="EZSP_TIMER"
            name="ezspTimerHandler"
            returnType="void"
            stackMacro="EZSP_APPLICATION_HAS_TIMER_HANDLER"
            consumed="false"
            platformType="host">
    <description>
      A callback from the timer.
    </description>
    <arg name="timerId"
         type="int8u"
         description="Which timer generated the callback (0 or 1)"/>
  </function>

  <function id="EZSP_MAC_PASSTHROUGH" name="ezspMacPassthroughMessageHandler" returnType="void" stackMacro="EZSP_APPLICATION_HAS_MAC_PASSTHROUGH_HANDLER" consumed="false" platformType="host">
    <description>
      This is called by stack when an interpan message is received.
    </description>
    <arg name="messageType"
         type="EmberMacPassthroughType"
         description="The type of interpan message being received"/>
    <arg name="lastHopLqi"
         type="int8u"
         description="The link quality indicator of the last hop"/>
    <arg name="lastHopRssi"
         type="int8s"
         description="The received signal strength of the last hop"/>
    <arg name="messageLength"
         type="int8u"
         description="The length of the incoming interpan message"/>
    <arg name="messageContents"
         type="int8u *"
         description="A pointer to the incoming interpan message"/>
    <codeForStub/>
  </function>

  <function id="EZSP_MAC_FILTER_MATCH_MESSAGE" name="ezspMacFilterMatchMessageHandler" returnType="void" stackMacro="EZSP_APPLICATION_HAS_MAC_FILTER_MATCH_HANDLER" consumed="false" platformType="host">
    <description>
      This function is called when the stack has received a raw MAC message that has matched one of the application's configured MAC filters.
    </description>
    <arg name="filterIndexMatch"      type="int8u"                   description="The index of the filter that was matched." />
    <arg name="legacyPassthroughType" type="EmberMacPassthroughType" description="The type of MAC passthrough message received." />
    <arg name="lastHopLqi"            type="int8u"                   description="The link quality from the node that last relayed the message." />
    <arg name="lastHopRssi"           type="int8s"                   description="The energy level (in units of dBm) observed during reception." />
    <arg name="messageLength"         type="int8u"                   description="The length of the messageContents parameter in bytes." />
    <arg name="messageContents"       type="int8u *"                 description="The raw message that was received." />
    <codeForStub />
  </function>

  <function id="EZSP_INCOMING_ROUTE_ERROR_HANDLER" name="ezspIncomingRouteErrorHandler" returnType="void" stackMacro="EZSP_APPLICATION_HAS_INCOMING_ROUTE_ERROR_HANDLER" consumed="false" platformType="host">
     <description>
       This is called by the stack to notify the application that a route error message has been received.
     </description>
     <arg name="status" type="EmberStatus" description="The type of route error."/>
     <arg name="target" type="EmberNodeId" description="The node ID associated with the error.  Depending on the error code this may be either originator of the error message or the node ID of the destination that could not be reached."/>
     <codeForStub>
emberAfPushCallbackNetworkIndex();
emberAfPopNetworkIndex();
     </codeForStub>
   </function>

  <function id="EZSP_CUSTOM_FRAME_HANDLER" name="ezspCustomFrameHandler" returnType="void" stackMacro="EZSP_APPLICATION_HAS_CUSTOM_FRAME_HANDLER" consumed="false" platformType="host">
    <description>
      This is called when Extensible NCP software running on the NCP sends a custom EZSP frame to the host.  Normal Silicon Labs NCP software images do not use custom EZSP frames.  Customer created NCP images may implement this frame.
    </description>
    <arg name="payloadLength" type="int8u"  description="The length of the custom frame."/>
    <arg name="payload"       type="int8u*" description="The custom payload data."/>
    <codeForStub>
    </codeForStub>
  </function>

  <function id="EZSP_INCOMING_BOOTLOAD_MESSAGE_HANDLER" name="ezspIncomingBootloadMessageHandler" returnType="void" stackMacro="EZSP_APPLICATION_HAS_BOOTLOADER_HANDLER" consumed="false" platformType="host">
    <description>
      This is called when the NCP receives an Ember bootload message and it is being passed to the host.
    </description>
    <arg type="EmberEUI64" name="longId"   description="The sender of the message"/>
    <arg type="int8s" name="lastHopLqi"    description="The LQI of the message"/>
    <arg type="int8s" name="lastHopRssi"   description="The RSSI of the message"/>
    <arg type="int8u" name="messageLength" description="The length of the received message"/>
    <arg type="int8u*" name="message"      description="The message data"/>
    <codeForStub/>
  </function>
  <function id="EZSP_BOOTLOAD_TRANSMIT_COMPLETE_HANDLER" name="ezspBootloadTransmitCompleteHandler" returnType="void" stackMacro="EZSP_APPLICATION_HAS_BOOTLOADER_HANDLER" consumed="false" platformType="host">
    <description>
      This is called to notify the host of the result of an attempt to send an Ember bootload message.
    </description>
    <arg type="EmberStatus" name="status"        description="The result of the send attempt."/>
    <arg type="int8u"       name="messageLength" description="The length of the received message"/>
    <arg type="int8u*"      name="message"       description="The message data"/>
  </function>
  <function id="EZSP_COUNTER_ROLLOVER_HANDLER" name="ezspCounterRolloverHandler" returnType="void" stackMacro="EZSP_APPLICATION_HAS_COUNTER_ROLLOVER_HANDLER" platformType="host">
    <description>
      This is called when a counter exceeds its threshold
    </description>
    <arg name="type" type="EmberCounterType" description="The type of event that occured"/>
    <codeForStub/>
  </function>
  <function id="EZSP_ZLL_ADDRESS_ASSIGNMENT_HANDLER" name="ezspZllAddressAssignmentHandler" returnType="void" stackMacro="EZSP_APPLICATION_HAS_ZLL_ADDRESS_ASSIGNMENT_HANDLER" platformType="host">
    <description>
      This call is fired when network and group addresses are assigned to a remote mode in a network start or network join request.
    </description>
    <arg name="addressInfo" type="const EmberZllAddressAssignment*" description="Address assignment information"/>
    <codeForStub/>
  </function>
  <function id="EZSP_ZLL_NETWORK_FOUND_HANDLER" name="ezspZllNetworkFoundHandler" returnType="void" stackMacro="EZSP_APPLICATION_HAS_ZLL_NETWORK_FOUND_HANDLER" platformType="host">
    <description>
      This call is fired when a ZLL network scan finds a ZLL network.
    </description>
    <arg name="networkInfo" type="const EmberZllNetwork*" description="Zigbee and ZLL specific information about the discovered network."/>
    <arg name="deviceInfo" type="const EmberZllDeviceInfoRecord*" description="Device specific info. This pointer may be NULL, indicating the device has either 0 sub-devices, or more than 1 sub-devices."/>
    <codeForStub/>
  </function>
  <function id="EZSP_ZLL_SCAN_COMPLETE_HANDLER" name="ezspZllScanCompleteHandler" returnType="void" stackMacro="EZSP_APPLICATION_HAS_ZLL_SCAN_COMPLETE_HANDLER" platformType="host">
    <description>
      This call is fired when a ZLL network scan is complete.
    </description>
    <arg name="status" type="EmberStatus" description="The result of the network scan operation"/>
    <codeForStub/>
  </function>
  <function id="EZSP_ZLL_TOUCH_LINK_TARGET_HANDLER" name="ezspZllTouchLinkTargetHandler" returnType="void" stackMacro="EZSP_APPLICATION_HAS_ZLL_TOUCH_LINK_TARGET_HANDLER" platformType="host">
    <description>
      This call is fired when the device is a target of a touch link.
    </description>
    <arg name="networkInfo" type="const EmberZllNetwork*" description="Zigbee and ZLL specific information about the initiator"/>
    <codeForStub/>
  </function>

  <function id="EZSP_CALCULATE_SMACS_HANDLER" name="ezspCalculateSmacsHandler" returnType="void" stackMacro="EZSP_APPLICATION_HAS_CALCULATE_SMACS_HANDLER" platformType="host">
    <description>
      This function is an application callback that must be defined when using CBKE.  It is called when the shared secret generation is complete and the link key and SMACs have been derived.  The link key is stored in a temporary location until the application decides to store or discard the key by calling ::emberClearTemporaryDataMaybeStoreLinkKey().
    </description>
    <arg name="status" type="EmberStatus" description="This is the ::EmberStatus value indicating the success or failure of the operation." />
    <arg name="initiatorSmac" type="EmberSmacData*" description="This is a pointer to the ::EmberSmacData structure to the initiator's version of the SMAC." />
    <arg name="responderSmac" type="EmberSmacData*" description="This is a pointer to the ::EmberSmacData structure to the responder's version of the SMAC." />
    <codeForStub />
  </function>
  <function id="EZSP_GENERATE_CBKE_KEYS_HANDLER" name="ezspGenerateCbkeKeysHandler" returnType="void" stackMacro="EZSP_APPLICATION_HAS_GENERATE_CBKE_KEYS_HANDLER" platformType="host">
    <description>
      This function is an application callback that must be defined when using CBKE.  It is called when the ephemeral key generation operation is complete.  The newly generated public key is passed back to the application to be sent to the CBKE partner over-the-air.  Internally the stack saves the public and private key pair until it the function ::emberClearTemporaryDataMaybeStoreLinkKey() is called by the application.
    </description>
    <arg name="status" type="EmberStatus" description="This is the ::EmberStatus value indicating the success or failure of the operation." />
    <arg name="ephemeralPublicKey" type="EmberPublicKeyData*" description="A pointer to an ::EmberPublicKeyData structure containing the newly generated public key." />
    <codeForStub />
  </function>
  <function id="EZSP_CALCULATE_SMACS_HANDLER_283K1" name="ezspCalculateSmacsHandler283k1" returnType="void" stackMacro="EZSP_APPLICATION_HAS_CALCULATE_SMACS_HANDLER_283K1" platformType="host">
    <description>
      This function is an application callback that must be defined when using CBKE.  It is called when the shared secret generation is complete and the link key and SMACs have been derived.  The link key is stored in a temporary location until the application decides to store or discard the key by calling ::emberClearTemporaryDataMaybeStoreLinkKey283k1().
    </description>
    <arg name="status" type="EmberStatus" description="This is the ::EmberStatus value indicating the success or failure of the operation." />
    <arg name="initiatorSmac" type="EmberSmacData*" description="This is a pointer to the ::EmberSmacData structure to the initiator's version of the SMAC." />
    <arg name="responderSmac" type="EmberSmacData*" description="This is a pointer to the ::EmberSmacData structure to the responder's version of the SMAC." />
    <codeForStub />
  </function>
  <function id="EZSP_GENERATE_CBKE_KEYS_HANDLER_283K1" name="ezspGenerateCbkeKeysHandler283k1" returnType="void" stackMacro="EZSP_APPLICATION_HAS_GENERATE_CBKE_KEYS_HANDLER_283K1" platformType="host">
    <description>
      This function is an application callback that must be defined when using the CBKE 283k1 Library.  It is called when the ephemeral key generation operation is complete.  The newly generated public key is passed back to the application to be sent to the CBKE partner over-the-air.  Internally the stack saves the public and private key pair until it the function ::emberClearTemporaryDataMaybeStoreLinkKey283k1() is called by the application.
    </description>
    <arg name="status" type="EmberStatus" description="This is the ::EmberStatus value indicating the success or failure of the operation." />
    <arg name="ephemeralPublicKey" type="EmberPublicKeyData*" description="A pointer to an ::EmberPublicKeyData structure containing the newly generated public key." />
    <codeForStub />
  </function>

  <function id="EZSP_DSA_SIGN_HANDLER" name="ezspDsaSignHandler" returnType="void" stackMacro="EZSP_APPLICATION_HAS_DSA_SIGN_HANDLER" platformType="host">
    <description>
      This function is an application callback that must be defined when using CBKE.  This callback is provided to the application to let it know that the ECC operations have completed and the radio has been turned back on.  When using the sign-and-send option of the ::EmberApsFrame, ::EMBER_APS_OPTION_DSA_SIGN, the handler will NOT return the complete signed message.  This callback is merely informative.  If ::emberDsaSign() has been called, the message plus signature will be returned to the caller and it must be sent separately by one of the message send primitives (such as ::emberSendUnicast()).
    </description>
    <arg name="status" type="EmberStatus" description="This is the ::EmberStatus value indicating the success or failure of the operation." />
    <arg name="messageLength" type="int8u" description="This is the ::EmberMessageBuffer indicating the newly signed message, if ::emberDsaSign() was called.  If message was signed using ::EMBER_APS_OPTION_DSA_SIGN then this will be ::EMBER_NULL_MESSAGE_BUFFER." />
    <arg name="messageContents" type="int8u *" description="This is the ::EmberMessageBuffer indicating the newly signed message, if ::emberDsaSign() was called.  If message was signed using ::EMBER_APS_OPTION_DSA_SIGN then this will be ::EMBER_NULL_MESSAGE_BUFFER." />
    <codeForStub />
  </function>
  <function id="EZSP_DSA_VERIFY_HANDLER" name="ezspDsaVerifyHandler" returnType="void" stackMacro="EZSP_APPLICATION_HAS_DSA_VERIFY_HANDLER" platformType="host">
    <description>
      This callback is executed by the stack when the DSA verification has completed and has a result.  If the result is EMBER_SUCCESS, the signature is valid.  If the result is EMBER_SIGNATURE_VERIFY_FAILURE then the signature is invalid.  If the result is anything else then the signature verify operation failed and the validity is unknown.
    </description>
    <arg name="status" type="EmberStatus" description="This is the result of the DSA verification" />
    <codeForStub />
  </function>
  <function id="EZSP_DUTY_CYCLE_HANDLER" name="ezspDutyCycleHandler" returnType="void" stackMacro="EZSP_APPLICATION_HAS_DUTY_CYCLE_HANDLER" platformType="host">
    <description>
      This callback is invoked by the stack when the duty cycle state changes.
    </description>
    <arg name="channelPage" type="int8u" description="The channel page whose duty cycle state has changed." />
    <arg name="channel" type="int8u" description="The channel number whose duty cycle state has changed." />
    <arg name="state" type="EmberDutyCycleState" description="This is the ::EmberDutyCycleState state indicating the current duty cycle state" />
    <arg name="totalDevices" type="int8u" description="The total number of connected end devices that are being monitored for duty cycle." />
    <arg name="arrayOfDeviceDutyCycles" type="EmberPerDeviceDutyCycle" description="Consumed duty cycles of end devices that are being monitored. The first entry always be the local stack's nodeId, and thus the total aggregate duty cycle for the device." />
    <codeForStub />
  </function>
  <function id="EZSP_SWITCH_NETWORK_KEY_HANDLER" name="ezspSwitchNetworkKeyHandler" returnType="void" stackMacro="EZSP_APPLICATION_HAS_SWITCH_NETWORK_KEY_HANDLER" >
    <description>
      This callback is invoked by the stack to inform the application that the Network Key has been updated and the node has been switched over to use the new key. The actual key being used is not passed up, but the sequence number is.
    </description>
    <arg name="sequenceNumber" type="int8u" description="The sequence number of the new network key." />
    <codeForStub />
  </function>
  <function id="EZSP_CHILD_JOIN_HANDLER" name="ezspChildJoinHandler" returnType="void" stackMacro="EZSP_APPLICATION_HAS_CHILD_JOIN_HANDLER" >
    <description>
      This callback is called by the stack when a child joins or leaves. 'Joining' is true if the child is joining and false if leaving. The index is the same as the value that should be passed to emberGetChildData() to get this child's data. Note that if the child is leaving, emberGetChildData() will return EMBER_NOT_JOINED if called with this index.
    </description>
    <arg name="index" type="int8u" description="The index of the child of interest." />
    <arg name="joining" type="boolean" description="True if the child is joining, false if the child is leaving." />
    <arg name="childId" type="EmberNodeId" description="The node ID of the child of interest." />
    <arg name="childEui64" type="EmberEUI64" description="The EUI of the child of interest." />
    <arg name="childType" type="EmberNodeType" description="The node type of the child of interest." />
    <codeForStub />
  </function>
</callback>
