name=mbed TLS
description=This plugin includes the cryptographic algorithms that meet Silicon Labs multiprotocol requirements. The mbed TLS configuration file can be found at config-multiprotocol.h.

category=Utility
qualityString=Production Ready
quality=production
includedByDefault=false

architecture=efr32+iar,simulation

providedApis=mbedtls

sourceFiles=
$MBEDTLS/library/ecp.c
$MBEDTLS/library/ecdh.c
$MBEDTLS/library/bignum.c
$MBEDTLS/library/ecp_curves.c
$MBEDTLS/library/aes.c
$MBEDTLS/library/sha256.c
$MBEDTLS/library/ctr_drbg.c
$MBEDTLS/library/entropy.c
$MBEDTLS/library/ccm.c
$MBEDTLS/library/cmac.c
$MBEDTLS/library/cipher.c
$MBEDTLS/library/cipher_wrap.c
$MBEDTLS/library/threading.c
$MBEDTLS/sl_crypto/src/crypto_aes.c
$MBEDTLS/sl_crypto/src/crypto_ble.c
$MBEDTLS/sl_crypto/src/crypto_ecp.c
$MBEDTLS/sl_crypto/src/crypto_management.c
$MBEDTLS/sl_crypto/src/crypto_sha.c

# Stolen straight from the brain of Rob Alexander:
# In theory we should always be including mbedTLS whenever we use Micrium. The
# reason for this is that our version of mbedTLS provides hardware crypto
# support and if the hardware supports this. The stack and the app can use
# different instances of the crypto hardware (if the hardware supports it) so as
# not to block multiple crypto operations. Zigbee doesn't make much use of
# crypto hardware but if the customer wants to have their own tasks use crypto
# they will need it. So by extension, we should include mbedtls for all Micrium
# apps and thus sl_malloc.c
$SILABS_CORE/memory_manager/sl_malloc.c

setup(additionalFiles) {
  PATH(ABSOLUTE):$MBEDTLS
  PATH(ABSOLUTE):$MBEDTLS/include/mbedtls
  PATH(ABSOLUTE):$MBEDTLS/include
  PATH(ABSOLUTE):$MBEDTLS/sl_crypto/include
}

setup(macros){
  -DMBEDTLS_CONFIG_FILE="configs/config-multiprotocol.h"
  -DMBEDTLS_MICRIUMOS
}
