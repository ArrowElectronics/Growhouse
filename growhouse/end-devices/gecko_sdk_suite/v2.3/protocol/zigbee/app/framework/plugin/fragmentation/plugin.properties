# Name of the plugin.
name=Fragmentation
category=Utility

# Any string is allowable here.  Generally though it is Production Ready, Test Tool, Extension Needed
qualityString=Production Ready (Certifiable)
# This is one of the following:  productionReady, testTool, extensionNeeded
quality=production

introducedIn=

# Description of the plugin.
description=This code allows to send long packets through fragmentation and reassembly.  

# List of .c files that need to be compiled and linked in.
sourceFiles=fragmentation.c, fragmentation-cli.c
sourceFilesSoc=fragmentation-soc.c
sourceFilesHost=fragmentation-host.c

providedApis=fragmentation

implementedCallbacks=emberAfPluginFragmentationInitCallback,emberAfPluginFragmentationNcpInitCallback

# Turn this on by default
includedByDefault=false

options=maxIncomingPackets, maxOutgoingPackets, bufferSize, freeOutgoingMessagePriorToFinalAck

maxIncomingPackets.name=Max incoming fragmented packets
maxIncomingPackets.description= Indicates the maximum number of simultaneous incoming fragmented packets that the node will be able to handle. Notice that each entry requires a buffer for storing the incoming fragmented packet
maxIncomingPackets.type=NUMBER:1,10
maxIncomingPackets.default=1

maxOutgoingPackets.name=Max outgoing fragmented packets
maxOutgoingPackets.description= Indicates the maximum number of simultaneous outgoing fragmented packets that the node will be able to handle. Notice that each entry requires a buffer for storing the outgoing fragmented packet
maxOutgoingPackets.type=NUMBER:1,10
maxOutgoingPackets.default=1

bufferSize.name=Max payload size prior to fragmentation
bufferSize.description= Indicates the maximum size in bytes of the payload of a packet that can be handled by the fragmentation plugin
bufferSize.type=NUMBER:74,10000
bufferSize.default=255

freeOutgoingMessagePriorToFinalAck.name=Free outgoing message buffer prior to final acknowledgement
freeOutgoingMessagePriorToFinalAck.description=This allow the fragmentation plugin to free the outgoing message buffer prior to receiving the final acknowledgement.  This helps in situations where an application wants to immediately turn around and send a new fragmented transmission after completing the preivous one.  However, the message sent handler will NOT have access to the buffer with the transmitted message after success or failure.
freeOutgoingMessagePriorToFinalAck.type=BOOLEAN
freeOutgoingMessagePriorToFinalAck.default=false

